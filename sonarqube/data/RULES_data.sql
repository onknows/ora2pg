TRUNCATE TABLE rules;
SET search_path = public;


COPY rules (id,name,plugin_rule_key,plugin_config_key,plugin_name,description,priority,template_id,status,language,def_remediation_function,def_remediation_gap_mult,def_remediation_base_effort,gap_description,system_tags,is_template,description_format,created_at,updated_at,rule_type,plugin_key) FROM STDIN;
11	"pass" should not be used needlessly	S2772	\N	python	<p>The use of a <code>pass</code> statement where it's not required by the syntax is pure cruft and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n    def __init__(self, log="", who="", date=0, files=[]):\n        self.log = log\n        self.files = files\n        self.who = who\n        self.date = date\n        pass    # Noncompliant\n\n    def lookup():\n        pass    # Compliant; method can't be empty\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n    def __init__(self, log="", who="", date=0, files=[]):\n        self.log = log\n        self.files = files\n        self.who = who\n        self.date = date\n\n    def lookup():\n        pass\n</pre>	1	\N	READY	py	CONSTANT_ISSUE	\N	2min	\N	unused	0	HTML	1576224521126	1576224521127	1	python
12	"<>" should not be used to test inequality	InequalityUsage	\N	python	<p>The forms <code>&lt;&gt;</code> and <code>!=</code> are equivalent. But in Python 2.7.3 the <code>&lt;&gt;</code> form is considered obsolete.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nreturn a &lt;&gt; b # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn a != b\n</pre>	2	\N	READY	py	CONSTANT_ISSUE	\N	5min	\N	obsolete	0	HTML	1576224521129	1576224521130	1	python
13	Jump statements should not be followed by other statements	S1763	\N	python	<p>Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, and <code>raise</code>) move control flow out of the current code\nblock. Typically, any statements in a block that come after a jump are simply wasted keystrokes lying in wait to confuse the unwary. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef fun(a):\n  i = 10\n  return i + a       # Noncompliant\n  i += 1             # this is never executed\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef fun(a):\n  i = 10\n  return i + a\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>\n  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>\n  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/561.html">MITRE, CWE-561</a> - Dead Code </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/OYIyAQ">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>\n</ul>	2	\N	READY	py	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,misra,unused	0	HTML	1576224521132	1576224521176	2	python
14	Docstrings should be defined	S1720	\N	python	<p>A string literal that is the first statement in a module, function, class, or method is a docstring. A docstring should document what a caller\nneeds to know about the code. Information about what it does, what it returns, and what it requires are all valid candidates for documentation. Well\nwritten docstrings allow callers to use your code without having to first read it and understand its logic.</p>\n<p>By convention, docstrings are enclosed in three sets of double-quotes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef my_function(a,b):\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef my_function(a,b):\n      """Do X"""\n</pre>	2	\N	READY	py	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224521225	1576224521229	1	python
15	Identical expressions should not be used on both sides of a binary operator	S1764	\N	python	<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif a == a: # Noncompliant\n    work()\n\nif  a != a: # Noncompliant\n    work()\n\nif  a == b and a == b: # Noncompliant\n    work()\n\nif a == b or a == b: # Noncompliant\n    work()\n\nj = 5 / 5 # Noncompliant\nk = 5 - 5 # Noncompliant\n</pre>\n<h2>Exceptions</h2>\n<p>The following are ignored:</p>\n<ul>\n  <li> The expression <code>1 &lt;&lt; 1</code> </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> {rule:python:S1656} - Implements a check on <code>=</code>. </li>\n</ul>	2	\N	READY	py	CONSTANT_ISSUE	\N	2min	\N	cert	0	HTML	1576224521235	1576224521280	2	python
16	Sections of code should not be "commented out"	S125	\N	python	<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be "commented out". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out" </li>\n</ul>	2	\N	READY	py	CONSTANT_ISSUE	\N	5min	\N	misra,unused	0	HTML	1576224521327	1576224521333	1	python
17	Track "TODO" and "FIXME" comments that do not contain a reference to a person	S1707	\N	python	<p>TODO and FIXME comments are typically intended to be short-lived; they are placeholders and reminders that programmers leave for themselves.\nUnfortunately, even with the best of intentions, those comments are not always acted on and removed in a timely manner. Thus, they can become\nmysterious, lingering cruft in a code base, reducing both readability and understand-ability.</p>\n<p>This rule flags all FIXME and TODO comments that do not have an attribution matching the specified regular expression immediately after the FIXME\nor TODO. Ideally, such comments will also contain information about what needs to be fixed or done, but this rule does not enforce that.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n# TODO\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n# TODO(ganncamp) per the business partners, more checks needed\n</pre>	1	\N	READY	py	\N	\N	\N	\N	convention	0	HTML	1576224521339	1576224521339	1	python
18	Track comments matching a regular expression	CommentRegularExpression	\N	python	<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing "REVIEW".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>	2	\N	READY	py	\N	\N	\N	\N	\N	1	HTML	1576224521347	1576224521347	1	python
19	Long suffix "L" should be upper case	LongIntegerWithLowercaseSuffixUsage	\N	python	<p>The long suffix should always be written in uppercase, i.e. 'L', as the lowercase 'l' can easily be confused with the digit one '1'.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nreturn 10l  // Noncompliant; easily confused with one zero one\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn 10L\n</pre>	1	\N	READY	py	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224521360	1576224521365	1	python
20	Functions should not be too complex	FunctionComplexity	\N	python	<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.</p>	3	\N	READY	py	LINEAR_OFFSET	1min	10min	per complexity point above the threshold	brain-overload	0	HTML	1576224521377	1576224521379	1	python
21	The "print" statement should not be used	PrintStatementUsage	\N	python	<p>The <code>print</code> statement was removed in Python 3.0. The built-in function should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprint '1'  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprint('1')\n</pre>	4	\N	READY	py	CONSTANT_ISSUE	\N	5min	\N	obsolete,python3	0	HTML	1576224521385	1576224521387	2	python
22	"break" and "continue" should not be used outside a loop	S1716	\N	python	<p><code>break</code> and <code>continue</code> are unstructured control flow statements which make code harder to read. Additionally, more recent\nversions of Python raise a SyntaxError when modules containing <code>break</code> or <code>continue</code> outside of a loop are imported.</p>\n<p>Therefore, these statements should not be used outside of loops. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnarg=len(sys.argv)\nif narg == 1:\n        print('@Usage: input_filename nelements nintervals')\n        break\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif narg == 1:\n        print('@Usage: input_filename nelements nintervals')\n        sys.exit()\n</pre>	3	\N	READY	py	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224521389	1576224521391	2	python
23	"\\" should only be used as an escape character outside of raw strings	S1717	\N	python	<p>Typically, backslashes are seen only as part of escape sequences. Therefore, the use of a backslash outside of a raw string or escape sequence\nlooks suspiciously like a broken escape sequence. </p>\n<p>Characters recognized as escape-able are: <code>abfnrtvox\\'"</code></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ns = "Hello \\world."\nt = "Nice to \\ meet you"\nu = "Let's have \\ lunch"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ns = "Hello world."\nt = "Nice to \\\\ meet you"\nu = r"Let's have \\ lunch"  // raw string\n</pre>	2	\N	READY	py	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224521393	1576224521394	2	python
24	Control flow statements "if", "for", "while", "try" and "with" should not be nested too deeply	S134	\N	python	<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>try</code>, and <code>with</code> statements are key ingredients for making\nwhat's known as "Spaghetti code". Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>The following code snippet illustrates this rule with the default threshold of 3.</p>\n<pre>\n  if condition1:           # Compliant - depth = 1\n    # ...\n    if condition2:         # Compliant - depth = 2\n      # ...\n      for i in range(10):  # Compliant - depth = 3, not exceeding the limit\n        # ...\n        if condition4:     # Non-Compliant - depth = 4\n          if condition5:   # Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            # ...\n</pre>	3	\N	READY	py	CONSTANT_ISSUE	\N	10min	\N	brain-overload	0	HTML	1576224521396	1576224521397	1	python
1	Comments should not be located at the end of lines of code	S139	\N	python	<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = b + c   # This is a trailing comment that can be very very long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n# This very long comment is better placed before the line of code\na = b + c\n</pre>	1	\N	READY	py	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224520930	1576224520985	1	python
2	Unused local variables should be removed	S1481	\N	python	<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef hello(name):\n    message = "Hello " + name # Noncompliant\n    print(name)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef hello(name):\n    message = "Hello " + name\n    print(message)\n</pre>	1	\N	READY	py	CONSTANT_ISSUE	\N	5min	\N	unused	0	HTML	1576224521070	1576224521072	1	python
3	Parentheses should not be used after certain keywords	S1721	\N	python	<p>Parentheses are not required after the <code>assert</code>, <code>del</code>, <code>elif</code>, <code>except</code>, <code>for</code>,\n<code>if</code>, <code>in</code>, <code>not</code>, <code>raise</code>, <code>return</code>, <code>while</code>, and <code>yield</code> keywords, and\nusing them unnecessarily impairs readability. They should therefore be omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = 1\nwhile (x &lt; 10):\n    print "x is now %d" % (x)\n    x += 1\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx = 1\nwhile x &lt; 10:\n    print "x is now %d" % (x)\n    x += 1\n</pre>	1	\N	READY	py	CONSTANT_ISSUE	\N	1min	\N	\N	0	HTML	1576224521078	1576224521080	1	python
4	"__init__" should not return a value	S2734	\N	python	<p>By contract, every Python function returns something, even if it's the <code>None</code> value, which can be returned implicitly by omitting the\n<code>return</code> statement, or explicitly. </p>\n<p>The <code>__init__</code> method is required to return <code>None</code>. A <code>TypeError</code> will be raised if the <code>__init__</code>\nmethod either <code>yield</code>s or <code>return</code>s any expression other than <code>None</code>. Returning some expression that evaluates to\n<code>None</code> will not raise an error, but is considered bad practice.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n        return self  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass(object):\n    def __init__(self):\n        self.message = 'Hello'\n</pre>	4	\N	READY	py	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224521083	1576224521085	2	python
5	New-style classes should be used	S1722	\N	python	<p>The new style of class creation, with the declaration of a parent class, created a unified object model in Python, so that the type of an\ninstantiated class is equal to its class. In Python 2.2-2.7, this is not the case for old-style classes. In Python 3+ all classes are new-style\nclasses. However, since the behavior can differ from 2.2+ to 3+, explicitly inheriting from <code>object</code> (if there is no better candidate) is\nrecommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass():\n    pass\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass(object):\n    pass\n</pre>	1	\N	READY	py	CONSTANT_ISSUE	\N	2min	\N	python3	0	HTML	1576224521087	1576224521089	1	python
6	"__exit__" should accept type, value, and traceback arguments	S2733	\N	python	<p>The <code>__exit__</code> method is invoked with four arguments: self, type, value and traceback. Leave one of these out of the method declaration\nand the result will be a <code>TypeError</code> at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass:\n   def __enter__(self):\n       pass\n   def __exit__(self, exc_type, exc_val):  # Noncompliant\n       pass\n</pre>	4	\N	READY	py	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224521092	1576224521094	2	python
7	Methods and field names should not differ only by capitalization	S1845	\N	python	<p>Looking at the set of methods and fields in a <code>class</code> and finding two that differ only by capitalization is confusing to users of the\nclass.</p>\n<p>This situation may simply indicate poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case\nwhere both a method and a field have the same name (with or without capitalization differences). However, renaming a public method could be disruptive\nto callers. Therefore renaming the member is the recommended action.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass SomeClass:\n    lookUp = false\n    def lookup():       # Non-compliant; method name differs from field name only by capitalization\n        pass\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass SomeClass:\n    lookUp = false\n    def getLookUp():\n        pass\n</pre>	4	\N	READY	py	CONSTANT_ISSUE	\N	10min	\N	confusing	0	HTML	1576224521097	1576224521099	1	python
8	Method names should comply with a naming convention	S100	\N	python	<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all method\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression: ^[a-z_][a-z0-9_]{2,30}$</p>\n<pre>\nclass MyClass:\n    def MyMethod(a,b):\n        ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass:\n    def my_method(a,b):\n        ...\n</pre>	1	\N	READY	py	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224521103	1576224521104	1	python
9	Class names should comply with a naming convention	S101	\N	python	<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass myClass:\n   ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass:\n   ...\n</pre>	1	\N	READY	py	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224521110	1576224521111	1	python
10	Files should not be too complex	FileComplexity	\N	python	<p>Most of the time, a very complex file breaks the Single Responsibility Principle and should be re-factored into several different files.</p>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>	2	\N	DEPRECATED	py	LINEAR_OFFSET	1min	30min	per complexity point above the threshold	\N	0	HTML	1576224521116	1576224521118	1	python
25	Redundant pairs of parentheses should be removed	S1110	\N	python	<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nreturn ((3))        # Noncompliant\nreturn ((x + 1))    # Noncompliant\nx = ((y / 2)) + 1   # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn 3\nreturn (3)\nreturn x + 1\nreturn (x + 1)\nx = y / 2 + 1\nx = (y / 2) + 1\n</pre>	2	\N	READY	py	CONSTANT_ISSUE	\N	1min	\N	confusing	0	HTML	1576224521402	1576224521404	1	python
26	Two branches in a conditional structure should not have exactly the same implementation	S1871	\N	python	<p>Having two branches in the same <code>if</code> structure with the same implementation is at best duplicate code, and at worst a coding error. If\nthe same logic is truly needed for both instances, then they should be combined.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif 0 &lt;= a &lt; 10:\n    do_the_thing()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelif 20 &lt;= a &lt; 50:\n    do_the_thing()  # Noncompliant; duplicates first condition\nelse:\n    do_the_rest()\n\nb = 4 if a &gt; 12 else 4\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (0 &lt;= a &lt; 10) or (20 &lt;= a &lt; 50):\n    do_the_thing()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelse:\n    do_the_rest()\n\nb = 4\n</pre>\n<p>or </p>\n<pre>\nif 0 &lt;= a &lt; 10:\n    do_the_thing()\nelif 10 &lt;= a &lt; 20:\n    do_the_other_thing()\nelif 20 &lt;= a &lt; 50:\n    do_the_third_thing()\nelse:\n    do_the_rest()\n\nb = 8 if a &gt; 12 else 4\n</pre>	2	\N	READY	py	CONSTANT_ISSUE	\N	10min	\N	design,suspicious	0	HTML	1576224521406	1576224521408	1	python
27	Methods and properties that don't access instance data should be static	S2325	\N	python	<p>Class methods that don't access instance data can and should be static because they yield more performant code.</p>\n<p>To implement a static method in Python one should use either <code>@classmethod</code> or <code>@staticmethod</code>. A class method receives the\nclass as implicit first argument, just like an instance method receives the instance. A static method does not receive an implicit first argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Utilities:\n    def do_the_thing(self, arg1, arg2, ...):  # Noncompliant\n        #...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Utilities:\n    @classmethod\n    def do_the_thing(cls, arg1, arg2, ...):\n        #...\n</pre>\n<p>or</p>\n<pre>\nclass Utilities:\n    @staticmethod\n    def do_the_thing(arg1, arg2, ...):\n        #...\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Methods which raise or may raise a <code>NotImplementedError</code> are ignored. </li>\n</ul>	1	\N	READY	py	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224521410	1576224521411	1	python
28	Cognitive Complexity of functions should not be too high	S3776	\N	python	<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>\n</ul>	3	\N	READY	py	LINEAR_OFFSET	1min	5min	per complexity point over the threshold	brain-overload	0	HTML	1576224521413	1576224521414	1	python
76	Source files should not have any duplicated blocks	DuplicatedBlocks	\N	common-java	An issue is created on a file as soon as there is at least one block of duplicated code on this file	2	\N	READY	java	LINEAR_OFFSET	10min	10min	number of duplicate blocks	pitfall	0	HTML	1576224523531	1576224523532	1	\N
77	Skipped unit tests should be either removed or fixed	SkippedUnitTests	\N	common-java	Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.	2	\N	READY	java	LINEAR	10min	\N	number of skipped tests	pitfall	0	HTML	1576224523534	1576224523535	1	\N
78	Failed unit tests should be fixed	FailedUnitTests	\N	common-java	Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.	2	\N	READY	java	LINEAR	10min	\N	number of failed tests	\N	0	HTML	1576224523537	1576224523538	2	\N
79	Branches should have sufficient coverage by tests	InsufficientBranchCoverage	\N	common-json	An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.	2	\N	READY	json	LINEAR	5min	\N	number of uncovered conditions	bad-practice	0	HTML	1576224523541	1576224523587	1	\N
80	Lines should have sufficient coverage by tests	InsufficientLineCoverage	\N	common-json	An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.	2	\N	READY	json	LINEAR	2min	\N	number of lines under the coverage threshold	bad-practice	0	HTML	1576224523591	1576224523592	1	\N
81	Source files should have a sufficient density of comment lines	InsufficientCommentDensity	\N	common-json	An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.	2	\N	READY	json	LINEAR	2min	\N	number of lines required to meet minimum density	convention	0	HTML	1576224523594	1576224523595	1	\N
82	Source files should not have any duplicated blocks	DuplicatedBlocks	\N	common-json	An issue is created on a file as soon as there is at least one block of duplicated code on this file	2	\N	READY	json	LINEAR_OFFSET	10min	10min	number of duplicate blocks	pitfall	0	HTML	1576224523597	1576224523597	1	\N
83	Skipped unit tests should be either removed or fixed	SkippedUnitTests	\N	common-json	Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.	2	\N	READY	json	LINEAR	10min	\N	number of skipped tests	pitfall	0	HTML	1576224523599	1576224523599	1	\N
84	Failed unit tests should be fixed	FailedUnitTests	\N	common-json	Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.	2	\N	READY	json	LINEAR	10min	\N	number of failed tests	\N	0	HTML	1576224523600	1576224523601	2	\N
29	IP addresses should not be hardcoded	S1313	\N	python	<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>\n<ul>\n  <li> a recompile is required if the address changes </li>\n  <li> it forces the same address to be used in every environment (dev, sys, qa, prod) </li>\n  <li> it places the responsibility of setting the value to use in production on the shoulders of the developer </li>\n  <li> it allows attackers to decompile the code and thereby discover a potentially sensitive address </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nip = '127.0.0.1'\nsock = socket.socket()\nsock.bind((ip, 9090))\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nip = config.get(section, ipAddress)\nsock = socket.socket()\nsock.bind((ip, 9090))\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>	1	\N	READY	py	CONSTANT_ISSUE	\N	30min	\N	cert	0	HTML	1576224521417	1576224521418	3	python
30	Local variable and function parameter names should comply with a naming convention	S117	\N	python	<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local\nvariable and function parameter names match a provided regular expression.</p>\n<h2>Exceptions</h2>\n<p>Loop counters are ignored by this rule.</p>\n<pre>\nfor i in range(limit):  # Compliant\n    print(i)\n</pre>	1	\N	READY	py	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224521420	1576224521421	1	python
31	The "exec" statement should not be used	ExecStatementUsage	\N	python	<p>Use of the <code>exec</code> statement could be dangerous, and should be avoided. Moreover, the <code>exec</code> statement was removed in Python\n3.0. Instead, the built-in <code>exec()</code> function can be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nexec 'print 1' # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nexec('print 1')\n</pre>	4	\N	READY	py	CONSTANT_ISSUE	\N	10min	\N	obsolete,python3	0	HTML	1576224521424	1576224521425	2	python
32	Field names should comply with a naming convention	S116	\N	python	<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[_a-z][_a-z0-9]*$</code>:</p>\n<pre>\nclass MyClass:\n  myField = 1\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass:\n  my_field = 1\n</pre>	1	\N	READY	py	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224521426	1576224521428	1	python
33	Files should contain an empty new line at the end	S113	\N	python	<p>Some tools such as Git work better when files end with an empty line. This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<p>&lt;pre&gt;</p>\n<p>+class Test:</p>\n<p>+ pass</p>\n<p> \\ No newline at end of file</p>\n<p>&lt;/pre&gt;</p>	1	\N	READY	py	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224521431	1576224521432	1	python
34	Classes should not be too complex	ClassComplexity	\N	python	<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to\nunderstand and therefore to maintain.</p>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>	3	\N	DEPRECATED	py	LINEAR_OFFSET	1min	10min	per complexity point over the threshold	\N	0	HTML	1576224521434	1576224521435	1	python
35	"return" and "yield" should not be used in the same function	S2712	\N	python	<p>Functions that use <code>yield</code> are known as "generators", and generators cannot <code>return</code> values. Similarly, functions that use\n<code>return</code> cannot use <code>yield</code>. Doing so will cause a <code>SyntaxError</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef adder(n):\n     num = 0\n     while num &lt; n:\n         yield num\n         num += 1\n     return num  #Noncompliant\n</pre>	4	\N	READY	py	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224521439	1576224521440	2	python
36	"yield" and "return" should not be used outside functions	S2711	\N	python	<p><code>yield</code> and <code>return</code> only make sense in the context of functions. Using them outside a function raises a\n<code>SyntaxError</code>. To break out of a loop, use <code>break</code> instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass:\n    while True:\n        return False #Noncompliant\n</pre>	4	\N	READY	py	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224521441	1576224521442	2	python
37	A field should not duplicate the name of its containing class	S1700	\N	python	<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo:\n  foo = ''\n\n  def getFoo(self):\n    ...\n\nfoo = Foo()\nfoo.getFoo() # what does this return?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo:\n  name = ''\n\n  def getName(self):\n    ...\n\nfoo = Foo()\nfoo.getName()\n</pre>	2	\N	READY	py	CONSTANT_ISSUE	\N	10min	\N	brain-overload	0	HTML	1576224521444	1576224521445	1	python
38	Statements should be on separate lines	OneStatementPerLine	\N	python	<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (True): print("hello")\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (True):\n    print("hello")\n</pre>	2	\N	READY	py	CONSTANT_ISSUE	\N	1min	\N	style	0	HTML	1576224521446	1576224521447	1	python
39	Increment and decrement operators should not be used	PreIncrementDecrement	\N	python	<p>Python has no pre/post increment/decrement operator. For instance, <code>x++</code> and <code>x--</code> will fail to parse. More importantly,\n<code>++x</code> and <code>--x</code> will do nothing. To increment a number, simply write <code>x += 1</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n++x # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx += 1\n</pre>	2	\N	READY	py	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224521449	1576224521450	2	python
40	Functions should not contain too many return statements	S1142	\N	python	<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the function.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\ndef fun():          # Noncompliant as there are 4 return statements\n  if condition1:\n    return True\n  elif condition2:\n    return False\n  else:\n    return True\n  return False\n}\n</pre>	2	\N	READY	py	CONSTANT_ISSUE	\N	20min	\N	brain-overload	0	HTML	1576224521451	1576224521452	1	python
41	Collapsible "if" statements should be merged	S1066	\N	python	<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif condition1:\n    if condition2:\n        # ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif condition1 and condition2:\n    # ...\n</pre>	2	\N	READY	py	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224521455	1576224521456	1	python
42	Function names should comply with a naming convention	S1542	\N	python	<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default provided regular expression: ^[a-z_][a-z0-9_]{2,30}$</p>\n<pre>\ndef MyFunction(a,b):\n    ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef my_function(a,b):\n    ...\n</pre>	2	\N	READY	py	CONSTANT_ISSUE	\N	10min	\N	convention	0	HTML	1576224521458	1576224521459	1	python
43	Related "if/else if" statements should not have the same condition	S1862	\N	python	<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif param == 1:\n  openWindow()\nelif param == 2:\n  closeWindow()\nelif param == 1:            # Noncompliant\n  moveWindowToTheBackground()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif param == 1:\n  openWindow()\nelif param == 2:\n  closeWindow()\nelif param == 3:\n  moveWindowToTheBackground()\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	py	CONSTANT_ISSUE	\N	10min	\N	cert,pitfall,unused	0	HTML	1576224521462	1576224521463	2	python
44	Track breaches of an XPath rule	XPath	\N	python	<p>This rule allows the definition of custom rules using XPath expressions.</p>\n<p>Issues are created depending on the return value of the XPath expression. If the XPath expression returns:</p>\n<ul>\n  <li> a single or list of AST nodes, then a line issue with the given message is created for each node </li>\n  <li> a boolean, then a file issue with the given message is created only if the boolean is true </li>\n  <li> anything else, no issue is created </li>\n</ul>\n<p>This rule allows the definition of custom rules using XPath expressions.</p>\n<p>Issues are created depending on the return value of the XPath expression. If the XPath expression returns:</p>\n<ul>\n  <li> a single or list of AST nodes, then a line issue with the given message is created for each node </li>\n  <li> a boolean, then a file issue with the given message is created only if the boolean is true </li>\n  <li> anything else, no issue is created </li>\n</ul>\n<p>Here is an example of an XPath expression to log a violation on each statement: </p>\n<pre>\n//statement\n</pre>	2	\N	READY	py	\N	\N	\N	\N	\N	1	HTML	1576224521464	1576224521464	1	python
45	Nested blocks of code should not be left empty	S108	\N	python	<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor i in range(3):\n    pass\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty.</p>	2	\N	READY	py	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224521468	1576224521469	1	python
46	Functions, methods and lambdas should not have too many parameters	S107	\N	python	<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\ndef do_something(param1, param2, param3, param4, param5):\n\t...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndef do_something(param1, param2, param3, param4):\n\t...\n</pre>	2	\N	READY	py	CONSTANT_ISSUE	\N	20min	\N	brain-overload	0	HTML	1576224523209	1576224523213	1	python
47	Files should not have too many lines of code	S104	\N	python	<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>	2	\N	READY	py	CONSTANT_ISSUE	\N	1h	\N	brain-overload	0	HTML	1576224523227	1576224523230	1	python
48	Module names should comply with a naming convention	S1578	\N	python	<p>Shared coding conventions allow teams to collaborate effectively. For that reason, module names should conform to a defined standard.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/P4IyAQ">CERT, MSC09-CPP.</a> - Character encoding: Use subset of ASCII for safety </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/lQAl">CERT, MSC09-C.</a> - Character encoding: Use subset of ASCII for safety </li>\n</ul>	1	\N	READY	py	CONSTANT_ISSUE	\N	10min	\N	cert,convention	0	HTML	1576224523237	1576224523239	1	python
49	Variables should not be self-assigned	S1656	\N	python	<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nname = name\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nname = other.name\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	py	CONSTANT_ISSUE	\N	3min	\N	cert	0	HTML	1576224523243	1576224523244	2	python
50	Lines should not be too long	LineLength	\N	python	<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>	2	\N	READY	py	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224523246	1576224523247	1	python
51	Python parser failure	ParsingError	\N	python	<p>When the Python parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the\nnumber of files that do not parse but also to easily find out why they do not parse.</p>	2	\N	READY	py	CONSTANT_ISSUE	\N	30min	\N	suspicious	0	HTML	1576224523250	1576224523252	1	python
52	Backticks should not be used	BackticksUsage	\N	python	<p>Backticks are a deprecated alias for <code>repr()</code>. Don't use them any more, the syntax was removed in Python 3.0.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nreturn `num`  # Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn repr(num)\n</pre>	4	\N	READY	py	CONSTANT_ISSUE	\N	5min	\N	python3	0	HTML	1576224523253	1576224523254	2	python
53	Lines should not end with trailing whitespaces	S1131	\N	python	<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same\nfile.</p>\n<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the\nopportunity to do so. </p>	1	\N	READY	py	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224523256	1576224523257	1	python
54	Track uses of "FIXME" tags	S1134	\N	python	<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndef divide(numerator, denominator):\n  return numerator / denominator              # FIXME denominator value might be 0\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>	2	\N	READY	py	\N	\N	\N	\N	cwe	0	HTML	1576224523259	1576224523259	1	python
55	Branches should have sufficient coverage by tests	InsufficientBranchCoverage	\N	common-py	An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.	2	\N	READY	py	LINEAR	5min	\N	number of uncovered conditions	bad-practice	0	HTML	1576224523263	1576224523308	1	\N
56	Lines should have sufficient coverage by tests	InsufficientLineCoverage	\N	common-py	An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.	2	\N	READY	py	LINEAR	2min	\N	number of lines under the coverage threshold	bad-practice	0	HTML	1576224523317	1576224523318	1	\N
57	Source files should have a sufficient density of comment lines	InsufficientCommentDensity	\N	common-py	An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.	2	\N	READY	py	LINEAR	2min	\N	number of lines required to meet minimum density	convention	0	HTML	1576224523322	1576224523323	1	\N
58	Source files should not have any duplicated blocks	DuplicatedBlocks	\N	common-py	An issue is created on a file as soon as there is at least one block of duplicated code on this file	2	\N	READY	py	LINEAR_OFFSET	10min	10min	number of duplicate blocks	pitfall	0	HTML	1576224523327	1576224523328	1	\N
59	Skipped unit tests should be either removed or fixed	SkippedUnitTests	\N	common-py	Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.	2	\N	READY	py	LINEAR	10min	\N	number of skipped tests	pitfall	0	HTML	1576224523331	1576224523332	1	\N
60	Failed unit tests should be fixed	FailedUnitTests	\N	common-py	Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.	2	\N	READY	py	LINEAR	10min	\N	number of failed tests	\N	0	HTML	1576224523334	1576224523335	2	\N
61	Branches should have sufficient coverage by tests	InsufficientBranchCoverage	\N	common-js	An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.	2	\N	READY	js	LINEAR	5min	\N	number of uncovered conditions	bad-practice	0	HTML	1576224523339	1576224523385	1	\N
62	Lines should have sufficient coverage by tests	InsufficientLineCoverage	\N	common-js	An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.	2	\N	READY	js	LINEAR	2min	\N	number of lines under the coverage threshold	bad-practice	0	HTML	1576224523391	1576224523393	1	\N
63	Source files should have a sufficient density of comment lines	InsufficientCommentDensity	\N	common-js	An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.	2	\N	READY	js	LINEAR	2min	\N	number of lines required to meet minimum density	convention	0	HTML	1576224523396	1576224523397	1	\N
64	Source files should not have any duplicated blocks	DuplicatedBlocks	\N	common-js	An issue is created on a file as soon as there is at least one block of duplicated code on this file	2	\N	READY	js	LINEAR_OFFSET	10min	10min	number of duplicate blocks	pitfall	0	HTML	1576224523400	1576224523401	1	\N
65	Skipped unit tests should be either removed or fixed	SkippedUnitTests	\N	common-js	Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.	2	\N	READY	js	LINEAR	10min	\N	number of skipped tests	pitfall	0	HTML	1576224523403	1576224523404	1	\N
66	Failed unit tests should be fixed	FailedUnitTests	\N	common-js	Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.	2	\N	READY	js	LINEAR	10min	\N	number of failed tests	\N	0	HTML	1576224523405	1576224523406	2	\N
67	Branches should have sufficient coverage by tests	InsufficientBranchCoverage	\N	common-flex	An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.	2	\N	READY	flex	LINEAR	5min	\N	number of uncovered conditions	bad-practice	0	HTML	1576224523413	1576224523455	1	\N
68	Lines should have sufficient coverage by tests	InsufficientLineCoverage	\N	common-flex	An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.	2	\N	READY	flex	LINEAR	2min	\N	number of lines under the coverage threshold	bad-practice	0	HTML	1576224523459	1576224523460	1	\N
69	Source files should have a sufficient density of comment lines	InsufficientCommentDensity	\N	common-flex	An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.	2	\N	READY	flex	LINEAR	2min	\N	number of lines required to meet minimum density	convention	0	HTML	1576224523463	1576224523463	1	\N
70	Source files should not have any duplicated blocks	DuplicatedBlocks	\N	common-flex	An issue is created on a file as soon as there is at least one block of duplicated code on this file	2	\N	READY	flex	LINEAR_OFFSET	10min	10min	number of duplicate blocks	pitfall	0	HTML	1576224523466	1576224523466	1	\N
71	Skipped unit tests should be either removed or fixed	SkippedUnitTests	\N	common-flex	Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.	2	\N	READY	flex	LINEAR	10min	\N	number of skipped tests	pitfall	0	HTML	1576224523467	1576224523468	1	\N
72	Failed unit tests should be fixed	FailedUnitTests	\N	common-flex	Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.	2	\N	READY	flex	LINEAR	10min	\N	number of failed tests	\N	0	HTML	1576224523469	1576224523470	2	\N
73	Branches should have sufficient coverage by tests	InsufficientBranchCoverage	\N	common-java	An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.	2	\N	READY	java	LINEAR	5min	\N	number of uncovered conditions	bad-practice	0	HTML	1576224523473	1576224523519	1	\N
74	Lines should have sufficient coverage by tests	InsufficientLineCoverage	\N	common-java	An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.	2	\N	READY	java	LINEAR	2min	\N	number of lines under the coverage threshold	bad-practice	0	HTML	1576224523523	1576224523524	1	\N
75	Source files should have a sufficient density of comment lines	InsufficientCommentDensity	\N	common-java	An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.	2	\N	READY	java	LINEAR	2min	\N	number of lines required to meet minimum density	convention	0	HTML	1576224523527	1576224523527	1	\N
105	Jump statements should not be followed by other statements	UnreachableCode	UnreachableCode	javascript	<p>Jump statements (<code>return</code>, <code>break</code> and <code>continue</code>) and <code>throw</code> expressions move control flow out of the\ncurrent code block. Typically, any statements in a block that come after a jump or <code>throw</code> are simply wasted keystrokes lying in wait to\nconfuse the unwary. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction fun(a) {\n  var i = 10;\n  return i + a;\n  i++;             // Noncompliant; this is never executed\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction fun(int a) {\n  var i = 10;\n  return i + a;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores unreachable <code>break</code> statements in <code>switch</code> clauses.</p>\n<pre>\nswitch (x) {\n  case 42:\n     return 43;\n     break;   // Compliant\n  default:\n    doSomething();\n}\n</pre>\n<p>Hoisted variables declarations without initialization are always considered reachable.</p>\n<pre>\nfunction bar() {\n  return x = function() {\n    x.foo = 42;\n  }\n  var x;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>\n  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>\n  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/561.html">MITRE, CWE-561</a> - Dead Code </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/OYIyAQ">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,misra,unused	0	HTML	1576224524004	1576224524047	2	javascript
85	Function calls should not pass extra arguments	S930	S930	javascript	<p>You can easily call a JavaScript function with more arguments than the function needs, but the extra arguments will be just ignored by function\nexecution.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction say(a, b) {\n  print(a + " " + b);\n}\n\nsay("hello", "world", "!"); // Noncompliant; last argument is not used\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported when <code>arguments</code> is used in the body of the function being called.</p>\n<pre>\nfunction doSomething(a, b) {\n  compute(arguments);\n}\n\ndoSomething(1, 2, 3) // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 16.6 - The number of arguments passed to a function shall match the number of parameters. </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/628.html">MITRE, CWE-628</a> - Function Call with Incorrectly Specified Arguments </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/LoAg">CERT, DCL07-C.</a> - Include the appropriate type information in function\n  declarators </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/VQBc">CERT, EXP37-C.</a> - Call functions with the correct number and type of arguments\n  </li>\n</ul>	3	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	cert,cwe,misra	0	HTML	1576224523603	1576224523649	2	javascript
86	Functions should not have too many lines	S138	S138	javascript	<p>A function that grows too large tends to aggregate too many responsibilities.</p>\n<p>Such functions inevitably become harder to understand and therefore harder to maintain. </p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>\n<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>\n<h2>Exceptions</h2>\n<p>This function ignores Immediately Invoked Function Expressions (IIFE), which are functions that are created and invoked without ever being assigned\na name.</p>\n<pre>\n(function () { // Ignored by this rule\n\n  function open() {  // Classic function declaration; not ignored\n    // ...\n  }\n\n  function read() {\n    // ...\n  }\n\n  function readlines() {\n    // ...\n  }\n})();\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	20min	\N	brain-overload	0	HTML	1576224523699	1576224523703	1	javascript
87	A "for" loop update clause should move the counter in the right direction	S2251	S2251	javascript	<p>A <code>for</code> loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run\ninfinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as <code>while</code> loops. More\ntypically, an infinite <code>for</code> loop is a bug. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i &lt; strings.length; i--) { // Noncompliant;\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (var i = 0; i &lt; strings.length; i++) {\n  //...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/zYEzAg">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	cert	0	HTML	1576224523719	1576224523724	2	javascript
88	Functions should not be defined inside loops	FunctionDefinitionInsideLoop	FunctionDefinitionInsideLoop	javascript	<p>Defining a function inside of a loop can yield unexpected results. Such a function keeps references to the variables which are defined in outer\nscopes. All function instances created inside the loop therefore see the same values for these variables, which is probably not expected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar funs = [];\nfor (var i = 0; i &lt; 13; i++) {\n  funs[i] = function() { // Non-Compliant\n    return i;\n  };\n}\nconsole.log(funs[0]()); // 13 instead of 0\nconsole.log(funs[1]()); // 13 instead of 1\nconsole.log(funs[2]()); // 13 instead of 2\nconsole.log(funs[3]()); // 13 instead of 3\n...\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	30min	\N	suspicious	0	HTML	1576224523731	1576224523735	1	javascript
89	Variables should be declared with "let" or "const"	S3504	S3504	javascript	<p>ECMAScript 2015 introduced the <code>let</code> and <code>const</code> keywords for block-scope variable declaration. Using <code>const</code>\ncreates a read-only (constant) variable.</p>\n<p>The distinction between the variable types created by <code>var</code> and by <code>let</code> is significant, and a switch to <code>let</code>\nwill help alleviate many of the variable scope issues which have caused confusion in the past. </p>\n<p>Because these new keywords create more precise variable types, they are preferred in environments that support ECMAScript 2015. However, some\nrefactoring may be required by the switch from <code>var</code> to <code>let</code>, and you should be aware that they raise <code>SyntaxError</code>s\nin pre-ECMAScript 2015 environments.</p>\n<p>This rule raises an issue when <code>var</code> is used instead of <code>const</code> or <code>let</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar color = "blue";\nvar size = 4;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst color = "blue";\nlet size = 4;\n</pre>	3	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	bad-practice,es2015	0	HTML	1576224523740	1576224523783	1	javascript
90	"[type=...]" should be used to select elements by type	S2898	S2898	javascript	<p>While <code>:&lt;element_type&gt;</code> and <code>[type="&lt;element_type&gt;"]</code> can both be used in jQuery to select elements by their\ntype, <code>[type="&lt;element_type&gt;"]</code> is far faster because it can take advantage of the native DOM <code>querySelectorAll()</code> method\nin modern browsers. </p>\n<p>This rule raises an issue when following selectors are used:</p>\n<ul>\n  <li> <code>:checkbox</code> </li>\n  <li> <code>:file</code> </li>\n  <li> <code>:image</code> </li>\n  <li> <code>:password</code> </li>\n  <li> <code>:radio</code> </li>\n  <li> <code>:reset</code> </li>\n  <li> <code>:text</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar input = $( "form input:radio" ); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar input = $( "form input[type=radio]" ); // Compliant\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	jquery,performance	0	HTML	1576224523832	1576224523836	1	javascript
91	Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply	NestedIfDepth	NestedIfDepth	javascript	<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making\nwhat's known as "Spaghetti code".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\n  if (condition1) {                  // Compliant - depth = 1\n    /* ... */\n    if (condition2) {                // Compliant - depth = 2\n      /* ... */\n      for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n        /* ... */\n        if (condition4) {            // Non-Compliant - depth = 4\n          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            /* ... */\n          }\n          return;\n        }\n      }\n    }\n  }\n</pre>	3	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	brain-overload	0	HTML	1576224523845	1576224523892	1	javascript
92	Variables and functions should not be redeclared	S2814	S2814	javascript	<p>This rule checks that a declaration doesn't use a name that is already in use. Indeed, it is possible to use the same symbol multiple times as\neither a variable or a function, but doing so is likely to confuse maintainers. Further it's possible that such reassignments are made in error, with\nthe developer not realizing that the value of the variable is overwritten by the new assignment.</p>\n<p>This rule also applies to function parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = 'foo';\nfunction a() {}   // Noncompliant\nconsole.log(a);   // prints "foo"\n\nfunction myFunc(arg) {\n  var arg = "event"; // Noncompliant, argument value is lost\n}\n\nfun(); // prints "bar"\n\nfunction fun() {\n  console.log("foo");\n}\n\nfun(); // prints "bar"\n\nfunction fun() {  // Noncompliant\n  console.log("bar");\n}\n\nfun(); // prints "bar"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar a = 'foo';\nfunction otherName() {}\nconsole.log(a);\n\nfunction myFunc(arg) {\n  var newName = "event";\n}\n\nfun(); // prints "foo"\n\nfunction fun() {\n  print("foo");\n}\n\nfun(); // prints "foo"\n\nfunction printBar() {\n  print("bar");\n}\n\nprintBar(); // prints "bar"\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	20min	\N	confusing	0	HTML	1576224523942	1576224523945	1	javascript
93	Web SQL databases should not be used	S2817	S2817	javascript	<p>The Web SQL Database standard never saw the light of day. It was first formulated, then deprecated by the W3C and was only implemented in some\nbrowsers. (It is not supported in Firefox or IE.)</p>\n<p>Further, the use of a Web SQL Database poses security concerns, since you only need its name to access such a database.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar db = window.openDatabase("myDb", "1.0", "Personal secrets stored here", 2*1024*1024);  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities">OWASP Top Ten 2013 Category A9</a> - Using\n  Components with Known Vulnerabilities </li>\n</ul>	4	\N	READY	js	CONSTANT_ISSUE	\N	2h	\N	html5,owasp-a6,owasp-a9	0	HTML	1576224523949	1576224523953	3	javascript
94	Default parameters should not cause side effects	S3509	S3509	javascript	<p>The assignment of default parameter values is generally intended to help the caller. But when a default assignment causes side effects, the caller\nmay not be aware of the extra changes or may not fully understand their implications. I.e. default assignments with side effects may end up hurting\nthe caller, and for that reason, they should be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar count = 0;\n\nfunction go(i = count++) {  // Noncompliant\n  console.log(i);\n}\n\ngo();  // outputs 0\ngo(7); // outputs 7\ngo();  // outputs 1\n</pre>	4	\N	READY	js	CONSTANT_ISSUE	\N	15min	\N	es2015,pitfall	0	HTML	1576224523957	1576224523960	1	javascript
95	Deprecated jQuery methods should not be used	S2770	S2770	javascript	<p>Deprecation is a warning that a method has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth\ntransition away from the aging, soon-to-be-retired technology.</p>\n<p>This rule raises an issue when any of the following methods is used:</p>\n<ul>\n  <li> <code>.andSelf()</code> </li>\n  <li> <code>.context</code> </li>\n  <li> <code>.die()</code> </li>\n  <li> <code>.error()</code> </li>\n  <li> <code>jQuery.boxModel</code> </li>\n  <li> <code>jQuery.browser</code> </li>\n  <li> <code>jQuery.sub()</code> </li>\n  <li> <code>jQuery.support</code> </li>\n  <li> <code>.live()</code> </li>\n  <li> <code>.load()</code> </li>\n  <li> <code>.selector</code> </li>\n  <li> <code>.size()</code> </li>\n  <li> <code>.toggle()</code> </li>\n  <li> <code>.unload()</code> </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	20min	\N	jquery,obsolete	0	HTML	1576224523964	1576224523967	1	javascript
96	Lines should not end with trailing whitespaces	TrailingWhitespace	TrailingWhitespace	javascript	<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same\nfile.</p>\n<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the\nopportunity to do so. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// The following string will error if there is a whitespace after '\\'\nvar str = "Hello \\\nWorld";\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224523971	1576224523973	1	javascript
97	Property getters and setters should come in pairs	S2376	S2376	javascript	<p>When an object is created with a setter for a property but without a getter for that property, the property is inaccessible and is thus\nuseless.</p>\n<p>This rule also enforces the reverse situation (getter but no setter).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar obj = {\n    set foo(value) {\n        this.fooval = value;\n    }\n};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar obj = {\n    set foo(value) {\n        this.fooval = value;\n    },\n    get foo() {\n        return this.fooval;\n    }\n};\n</pre>\n<p>or </p>\n<pre>\nvar obj = {\n    setFoo(value) {    // a standard method, not a setter\n        this.fooval = value;\n    }\n};\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224523976	1576224523978	1	javascript
98	"alert(...)" should not be used	S1442	S1442	javascript	<p><code>alert(...)</code> can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive\ninformation to attackers, and should never be displayed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(unexpectedCondition)\n{\n  alert("Unexpected Condition");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>\n</ul>	1	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	cwe,user-experience	0	HTML	1576224523980	1576224523981	3	javascript
99	Exception should not be created without being thrown	S3984	S3984	javascript	<p>Creating a new <code>Error</code> without actually throwing it is useless and is probably due to a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x &lt; 0) {\n  new Error("x must be nonnegative");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x &lt; 0) {\n  throw new Error("x must be nonnegative");\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224523983	1576224523985	2	javascript
100	Attempts should not be made to update "const" variables	S3500	S3500	javascript	<p>Variables declared with <code>const</code> cannot be modified. Unfortunately, attempts to do so don't always raise an error; in a non-ES2015\nenvironment, such an attempt might simply be ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst pi = "yes, please";\npi = 3.14;  // Noncompliant\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	15min	\N	es2015	0	HTML	1576224523986	1576224523987	2	javascript
101	Bitwise operators should not be used in boolean contexts	BitwiseOperators	BitwiseOperators	javascript	<p>The bitwise operators <code>&amp;</code>, <code>|</code> can be mistaken for the boolean operators <code>&amp;&amp;</code> and <code>||</code>.\n</p>\n<p>This rule raises an issue when <code>&amp;</code> or <code>|</code> is used in a boolean context.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (a &amp; b) { ... } // Noncompliant; &amp; used in error\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a &amp;&amp; b) { ... }\n</pre>\n<h2>Exceptions</h2>\n<p>When a file contains other bitwise operations, (<code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;&gt;</code>, <code>&gt;&gt;</code>,\n<code>~</code>, <code>&amp;=</code>, <code>^=</code>, <code>|=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&gt;&gt;&gt;=</code> and\n<code>&amp;</code> or <code>|</code> used with a numeric literal as the right operand) all issues in the file are ignored, because it is evidence that\nbitwise operations are truly intended in the file.</p>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224523989	1576224523991	2	javascript
102	Properties of variables with "null" or "undefined" values should not be accessed	S2259	S2259	javascript	<p>When a variable is assigned an <code>undefined</code> or <code>null</code> value, it has no properties. Trying to access properties of such a\nvariable anyway results in a <code>TypeError</code>, causing abrupt termination of the script if the error is not caught in a <code>catch</code>\nblock. But instead of <code>catch</code>-ing this condition, it is best to avoid it altogether.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x === undefined) {\n  console.log(x.length); // Noncompliant; TypeError will be thrown\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/PAw">CERT, EXP34-C.</a> - Do not dereference null pointers </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	cert,cwe	0	HTML	1576224523993	1576224523994	2	javascript
103	"undefined" should not be assigned	S2138	S2138	javascript	<p><code>undefined</code> is the value you get for variables and properties which have not yet been created. Use the same value to reset an existing\nvariable and you lose the ability to distinguish between a variable that exists but has no value and a variable that does not yet exist. Instead,\n<code>null</code> should be used, allowing you to tell the difference between a property that has been reset and one that was never created.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myObject = {};\n\n// ...\nmyObject.fname = undefined;  // Noncompliant\n// ...\n\nif (myObject.lname == undefined) {\n  // property not yet created\n}\nif (myObject.fname == undefined) {\n  // no real way of knowing the true state of myObject.fname\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myObject = {};\n\n// ...\nmyObject.fname = null;\n// ...\n\nif (myObject.lname == undefined) {\n  // property not yet created\n}\nif (myObject.fname == undefined) {\n  // no real way of knowing the true state of myObject.fname\n}\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	suspicious	0	HTML	1576224523996	1576224523997	1	javascript
104	Local variables should not shadow "undefined"	S2137	S2137	javascript	<p>It is possible to name a variable <code>undefined</code> in a local scope, but it is a very bad idea because <code>undefined</code> is what's\nreturned for values and properties that have not yet been created. Make <code>undefined</code> a variable and you lose your ability to test whether\nother variables and properties exist.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo () {\n  var undefined = 1; // Noncompliant\n  if (nonExistantVar == undefined) { // this logic doesn't work now\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo () {\n  var bob = 1; // anything is better than naming it 'undefined'\n  if (nonExistantVar == undefined) {\n    // ...\n  }\n}\n</pre>	4	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224523999	1576224524001	1	javascript
106	Equality operators should not be used in "for" loop termination conditions	S888	S888	javascript	<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an\ninfinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an\ninfinite loop.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (var i = 1; i &lt;= 10; i += 2)  // Compliant\n{\n  //...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>\n<ul>\n  <li> starts below the ending value and is incremented by 1 on each iteration. </li>\n  <li> starts above the ending value and is decremented by 1 on each iteration. </li>\n</ul>\n<p>Equality operators are also ignored when the test is against <code>null</code>.</p>\n<pre>\nfor (var i = 0; arr[i] != null; i++) {\n  // ...\n}\n\nfor (var i = 0; (item = arr[i]) != null; i++) {\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 6-5-2 </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/835">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/EwDJAQ">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/GwDJAQ">CERT, MSC21-CPP.</a> - Use inequality to terminate a loop whose counter changes\n  by more than one </li>\n</ul>	3	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	cert,cwe,misra,suspicious	0	HTML	1576224524097	1576224524146	1	javascript
107	The ternary operator should not be used	ConditionalOperator	ConditionalOperator	javascript	<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more\nverbose <code>if</code>/<code>else</code> structure.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(a) {\n  var b = (a === 'A') ? 'is A' : 'is not A'; // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo(a) {\n  var b;\n  if (a === 'A') {\n    b = 'is A';\n  }\n  else {\n    b = 'is not A';\n  }\n  // ...\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	brain-overload	0	HTML	1576224524195	1576224524198	1	javascript
108	Switch cases should end with an unconditional "break" statement	NonEmptyCaseWithoutBreak	NonEmptyCaseWithoutBreak	javascript	<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                               // Ends with comment when fall-through is intentional\n    console.log("this case falls through")\n    // fall through\n  case 4:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 5:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/YIFLAQ">CERT, MSC17-C.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZoFLAQ">CERT, MSC18-CPP.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/ewHAAQ">CERT, MSC52-J.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n</ul>	4	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	cert,cwe,misra,suspicious	0	HTML	1576224524203	1576224524285	1	javascript
129	Functions should use "return" consistently	S3801	S3801	javascript	<p>Unlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can\nreturn different types of values, which can be very confusing to the user and significantly harder to maintain.</p>\n<p>In particular a function, in JavaScript, will return <code>undefined</code> in any of the following cases:</p>\n<ul>\n  <li> It exits without a <code>return</code> statement. </li>\n  <li> It executes a <code>return</code> with no value. </li>\n</ul>\n<p>This rule verifies that return values are either always or never specified for each path through a function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(a) { // Noncompliant, function exits without "return"\n  if (a == 1) {\n    return true;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo(a) {\n  if (a == 1) {\n    return true;\n  }\n  return false;\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	20min	\N	api-design,confusing	0	HTML	1576224524661	1576224524662	1	javascript
130	An open curly brace should be located at the end of a line	S1105	S1105	javascript	<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n{                                                      //Noncompliant\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {                                   //Compliant\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Object literals appearing as arguments can start on their own line.</p>\n<pre>\nfunctionWithObject(\n   {                                                 //Compliant\n        g: "someValue"\n   }\n);\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224524664	1576224524665	1	javascript
131	Function parameters, caught exceptions and foreach variables should not be reassigned	S1226	S1226	javascript	<p>While it is technically correct to assign to parameters from within method bodies, it reduces code readability because developers won't be able to\ntell whether the original parameter or some temporary variable is being accessed without going through the whole method. Moreover, some developers\nmight also expect assignments of method parameters to be visible to callers, which is not the case, and this lack of visibility could confuse them.\nInstead, all parameters, caught exceptions, and foreach parameters should be treated as <code>final</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction MyClass(name) {\n  name = name;                    // Noncompliant - useless identity assignment\n}\n\nfunction add(a, b) {\n  a = a + b;                      // Noncompliant\n  //...\n  return a;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction MyClass(name) {\n  this.name = name;\n}\n\nfunction add(a, b) {\n  let sum = a + b;\n  //...\n  return sum;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>\n</ul>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	misra,pitfall	0	HTML	1576224524666	1576224524667	1	javascript
109	"with" statements should not be used	WithStatement	WithStatement	javascript	<p>The use of the <code>with</code> keyword produces an error in JavaScript strict mode code. However, that's not the worst that can be said against\n<code>with</code>.</p>\n<p>Using <code>with</code> allows a short-hand access to an object's properties - assuming they're already set. But use <code>with</code> to access\nsome property not already set in the object, and suddenly you're catapulted out of the object scope and into the global scope, creating or overwriting\nvariables there. Since the effects of <code>with</code> are entirely dependent on the object passed to it, <code>with</code> can be dangerously\nunpredictable, and should never be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nwith (foo) {  // Noncompliant\n  y = 4;  // updates foo.x\n  x = 3;  // does NOT add a foo.x property; updates x var in outer scope\n}\nprint(foo.x + " " + x); // shows: undefined 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nfoo.y = 4;\nfoo.x = 3;\n\nprint(foo.x + " " + x); // shows: 3 a\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	30min	\N	\N	0	HTML	1576224524330	1576224524331	2	javascript
110	Sections of code should not be "commented out"	CommentedCode	CommentedCode	javascript	<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be "commented out". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out" </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	misra,unused	0	HTML	1576224524333	1576224524334	1	javascript
111	Track comments matching a regular expression	CommentRegularExpression	CommentRegularExpression	javascript	<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing "REVIEW".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>	2	\N	READY	js	\N	\N	\N	\N	\N	1	HTML	1576224524336	1576224524336	1	javascript
112	"if ... else if" constructs should end with "else" clauses	ElseIfWithoutElse	ElseIfWithoutElse	javascript	<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>\nshould be followed by an <code>else</code> statement.</p>\n<p>The requirement for a final <code>else</code> statement is defensive programming.</p>\n<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n} else {\n  throw "Unexpected value for x";\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC57-J.</a> - Strive for logical completeness </li>\n</ul>	3	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	cert,misra	0	HTML	1576224524340	1576224524385	1	javascript
113	"void" should not be used	S3735	S3735	javascript	<p>The <code>void</code> operator evaluates its argument and unconditionally returns <code>undefined</code>. It can be useful in pre-ECMAScript 5\nenvironments, where <code>undefined</code> could be reassigned, but generally, its use makes code harder to understand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid (function() {\n   ...\n}());\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n(function() {\n   ...\n}());\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is raised when <code>void 0</code> is used in place of <code>undefined</code>. </p>\n<pre>\nif (parameter === void 0) {...}\n</pre>	3	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	confusing	0	HTML	1576224524433	1576224524434	1	javascript
114	Functions should not be too complex	FunctionComplexity	FunctionComplexity	javascript	<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.</p>	3	\N	READY	js	LINEAR_OFFSET	1min	10min	per complexity point above the threshold	brain-overload	0	HTML	1576224524437	1576224524439	1	javascript
115	Comma and logical OR operators should not be used in switch cases	S3616	S3616	javascript	<p>The comma operator (<code>,</code>) evaluates its operands, from left to right, and returns the second one. That's useful in some situations, but\njust wrong in a <code>switch</code> <code>case</code>. You may think you're compactly handling multiple values in the case, but only the last one in\nthe comma-list will ever be handled. The rest will fall through to the default.</p>\n<p>Similarly the logical OR operator (<code>||</code>) will not work in a <code>switch</code> <code>case</code>, only the first argument will be\nconsidered at execution time.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch a {\n  case 1,2:  // Noncompliant; only 2 is ever handled by this case\n    doTheThing(a);\n  case 3 || 4: // Noncompliant; only '3' is handled\n    doThatThing(a);\n  case 5:\n    doTheOtherThing(a);\n  default:\n    console.log("Neener, neener!");  // this happens when a==1 or a == 4\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch a {\n  case 1:\n  case 2:\n    doTheThing(a);\n  case 3:\n  case 4:\n    doThatThing(a);\n  case 5:\n    doTheOtherThing(a);\n  default:\n    console.log("Neener, neener!");\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224524444	1576224524445	2	javascript
116	Selection results should be tested with "length"	S2769	S2769	javascript	<p>Once you've made a selection, you typically want to know whether it actually found anything. Since selectors <em>always</em> return an object (the\nset of selected DOM elements), the best way to see whether your selection found anything is to test the returned object's <code>.length</code>\nproperty. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( $( "div.foo" ) ) {  // Noncompliant\n  // this code always runs, even when the selector didn't match any elements\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Testing whether a selection contains elements.\nif ( $( "div.foo" ).length &gt; 0) {\n  // this code only runs if elements were found\n  //  ...\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	jquery	0	HTML	1576224524447	1576224524449	2	javascript
117	"switch" statements should end with "default" clauses	SwitchWithoutDefault	SwitchWithoutDefault	javascript	<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n</ul>	3	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,misra	0	HTML	1576224524451	1576224524495	1	javascript
118	Values should not be uselessly incremented	S2123	S2123	javascript	<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet i = 0;\ni = i++; // Noncompliant; i is still zero\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet i = 0;\ni++;\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	unused	0	HTML	1576224524540	1576224524541	2	javascript
119	Results of operations on strings should not be ignored	S1154	S1154	javascript	<p>Doing an operation on a string without using the result of the operation is useless and is certainly due to a misunderstanding. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar str = "..."\nstr.toUpperCase(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar str = "..."\nstr = str.toUpperCase();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:javascript:S2201} instead.</p>	2	\N	DEPRECATED	js	CONSTANT_ISSUE	\N	20min	\N	cert	0	HTML	1576224524542	1576224524543	2	javascript
120	Comments should not be located at the end of lines of code	TrailingComment	TrailingComment	javascript	<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a1 = b + c; // This is a trailing comment that can be very very long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\nvar a2 = b + c;\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224524544	1576224524545	1	javascript
121	Named function expressions should not be used	NamedFunctionExpression	NamedFunctionExpression	javascript	<p>While named function expressions might be useful for debugging purposes, some browsers do not support them correctly (for example Internet Explorer\n8).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nf = function fun(){}; // Noncompliant;  named function expression\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfun = function(){}; // Compliant; function expression\n</pre>\n<h2>Exceptions</h2>\n<p>ECMAScript 6 generator functions are excluded from this rule. </p>\n<pre>\nfunction* f() {} // Compliant; generator function.\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	15min	\N	cross-browser,user-experience	0	HTML	1576224524549	1576224524550	2	javascript
122	Selections should be stored	S2762	S2762	javascript	<p>jQuery doesn't cache elements for you. If you've made a selection that you might need to make again, you should save the selection in a variable\nrather than making the selection repeatedly.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 2</p>\n<pre>\n$( "p" ).hide();\n$( "p" ).show();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar paragraph = $( "p" );\n\nparagraph.hide();\nparagraph.show();\n</pre>\n<h2>Exceptions</h2>\n<p>Stored selections are not updated when the DOM changes. Since variables may need to updated this rule ignores selections that are repeated during\nan assignment.</p>\n<pre>\nvar paragraph = $("p");\n\n// ...\n\nparagraph = $("p");\n</pre>	2	\N	READY	js	LINEAR_OFFSET	1min	2min	number of times selection is re-made.	jquery,performance,user-experience	0	HTML	1576224524551	1576224524553	1	javascript
123	Array indexes should be numeric	S3579	S3579	javascript	<p>Associative arrays allow you to store values in an array with either numeric or named indexes. But creating and populating an object is just as\neasy as an array, and more reliable if you need named members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet arr = [];\narr[0] = 'a';\narr['name'] = 'bob';  // Noncompliant\narr[1] = 'foo';\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet obj = {\n  name: 'bob',\n  arr: ['a', 'foo']\n};\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	bad-practice	0	HTML	1576224524558	1576224524559	1	javascript
124	"super()" should be invoked appropriately	S3854	S3854	javascript	<p>There are situations where <code>super()</code> must be invoked and situations where <code>super()</code> cannot be invoked.</p>\n<p>The basic rule is: a constructor in a non-derived class cannot invoke <code>super()</code>; a constructor in a derived class must invoke\n<code>super()</code>.</p>\n<p>Furthermore:</p>\n<p>- <code>super()</code> must be invoked before the <code>this</code> and <code>super</code> keywords can be used.</p>\n<p>- <code>super()</code> must be invoked with the same number of arguments as the base class' constructor.</p>\n<p>- <code>super()</code> can only be invoked in a constructor - not in any other method.</p>\n<p>- <code>super()</code> cannot be invoked multiple times in the same constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Animal {\n  constructor() {\n    super();         // Noncompliant, super() cannot be invoked in a base class\n  }\n\n  doSomething() {\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    this.name = name;\n    super.doSomething();\n    super();         // Noncompliant, super() must be invoked before "this" or "super" is used\n  }\n\n  doSomething() {\n    super();         // Noncompliant, super() cannot be invoked outside of a constructor\n  }\n}\n\nclass Labrador extends Dog {\n  constructor(name) {\n    super();         // Noncompliant, super() must be invoked with one argument\n  }\n}\n\nclass GermanShepherd extends Dog {\n  constructor(name) {\n  }                  // Noncompliant, super() must be invoked in constructor of derived class\n}\n\nclass FilaBrasileiro extends Dog {\n  constructor(name) {\n    super(name);\n    super(name);    // Noncompliant, super() can only be invoked once\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Animal {\n  constructor() {\n  }\n\n  doSomething() {\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    super();\n    this.name = name;\n    super.doSomething();\n  }\n\n  doSomething() {\n  }\n}\n\nclass Labrador extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n\nclass GermanShepherd extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n\nclass FilaBrasileiro extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n</pre>\n<h2>Known Limitations</h2>\n<ul>\n  <li>False negatives: some issues are not raised if the base class is not defined in the same file as the current class.</li>\n</ul>	3	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224524560	1576224524603	2	javascript
125	The output of functions that don't return anything should not be used	S3699	S3699	javascript	<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its\n"result" to a variable is probably a bug because such functions return <code>undefined</code>, which is probably not what was intended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\n\na = foo();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n}\n\nfoo();\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224524648	1576224524650	2	javascript
126	Multiline string literals should not be used	MultilineStringLiterals	MultilineStringLiterals	javascript	<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the\nbeginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myString = 'A rather long string of English text, an error message \\\n                actually that just keeps going and going -- an error \\\n                message to make the Energizer bunny blush (right through \\\n                those Schwarzenegger shades)! Where was I? Oh yes, \\\n                you\\'ve got an error and all the extraneous whitespace is \\\n                just gravy.  Have a nice day.';  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myString = 'A rather long string of English text, an error message ' +\n    'actually that just keeps going and going -- an error ' +\n    'message to make the Energizer bunny blush (right through ' +\n    'those Schwarzenegger shades)! Where was I? Oh yes, ' +\n    'you\\'ve got an error and all the extraneous whitespace is ' +\n    'just gravy.  Have a nice day.';\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	bad-practice	0	HTML	1576224524652	1576224524653	1	javascript
127	Variables should be defined in the blocks where they are used	S2392	S2392	javascript	<p>A variable that is declared at function scope, but only used inside a single block should be declared in that block, and variables that are\ndeclared inside a block but used outside of it (which is possible with a <code>var</code>-style declaration) should be declared outside the block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething(a, b) {\n  var i;  // Noncompliant; should be declared in if-block\n  if (a &gt; b) {\n    i = a;\n    console.log(i);\n    var x = a - b;  // Noncompliant; should be declared outside if-block\n  }\n\n  if (a &gt; 4) {\n   console.log(x);\n  }\n\n  return a+b;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(a, b) {\n  var x = a - b;\n\n  if (a &gt; b) {\n    var i = a;\n    console.log(i);\n  }\n\n  if (a &gt; 4) {\n   console.log(x);\n  }\n\n  return a+b;\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	pitfall	0	HTML	1576224524655	1576224524656	1	javascript
128	Trailing commas should not be used	TrailingComma	TrailingComma	javascript	<p>Most browsers parse and discard a meaningless, trailing comma. Unfortunately, that's not the case for Internet Explorer below version 9, which\nthrows a meaningless error. Therefore trailing commas should be eliminated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar settings = {\n    'foo'  : oof,\n    'bar' : rab,    // Noncompliant - trailing comma\n};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar settings = {\n    'foo'  : oof,\n    'bar' : rab\n};\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	1min	\N	cross-browser	0	HTML	1576224524658	1576224524660	2	javascript
156	Function constructors should not be used	S3523	S3523	javascript	<p>In addition to being obtuse from a syntax perspective, function constructors are also dangerous: their execution evaluates the constructor's string\narguments similar to the way <code>eval</code> works, which could expose your program to random, unintended code which can be both slow and a security\nrisk.</p>\n<p>In general it is better to avoid it altogether, particularly when used to parse JSON data. You should use ECMAScript 5's built-in JSON functions or\na dedicated library.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar obj =  new Function("return " + data)();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar obj = JSON.parse(data);\n</pre>\n<h2>Exceptions</h2>\n<p>Function calls where the argument is a string literal (e.g. <code>(Function('return this'))()</code>) are ignored. </p>	3	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224524913	1576224524916	3	javascript
157	Strings and non-strings should not be added	S3402	S3402	javascript	<p>Use a <code>+</code> with two numbers and you'll get addition. But use it with a string and anything else, and you'll get concatenation. This could\nbe confusing, specially if it's not obvious that one of the operands is a string. It is recommended to explicitly convert the non-string component to\nmake it easier to understand to future maintainers.</p>\n<p>This rule raises an issue when <code>+</code> is used with a string and a non-string.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 5 + 8;  // okay\nvar z = "8"\nvar y = 5 + z;  // Noncompliant; yields string "58"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = 5 + 8;\nvar z = "8";\nvar y = 5 + Number(z);\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	15min	\N	confusing	0	HTML	1576224524920	1576224524924	1	javascript
158	Unused local variables and functions should be removed	UnusedVariable	UnusedVariable	javascript	<p>If a local variable or a local function is declared but not used, it is dead code and should be removed. Doing so will improve maintainability\nbecause developers will not wonder what the variable or function is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  var seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  return hours * 60;\n}\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	unused	0	HTML	1576224524928	1576224524932	1	javascript
132	Class methods should be used instead of "prototype" assignments	S3525	S3525	javascript	<p>Originally JavaScript didn't support <code>class</code>es, and class-like behavior had to be kludged using things like <code>prototype</code>\nassignments for "class" functions. Fortunately, ECMAScript 2015 added classes, so any lingering <code>prototype</code> uses should be converted to\ntrue <code>class</code>es. The new syntax is more expressive and clearer, especially to those with experience in other languages.</p>\n<p>Specifically, with ES2015, you should simply declare a <code>class</code> and define its methods inside the class declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction MyNonClass(initializerArgs = []) {\n  this._values = [...initializerArgs];\n}\n\nMyNonClass.prototype.doSomething = function () {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  constructor(initializerArgs = []) {\n    this._values = [...initializerArgs];\n  }\n\n  doSomething() {\n    //...\n  }\n}\n</pre>	3	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	es2015	0	HTML	1576224524668	1576224524670	1	javascript
133	Functions should always return the same type	S3800	S3800	javascript	<p>Unlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can\nreturn different types of values, which can be very confusing to the user and significantly harder to maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(a) {  // Noncompliant\n  if (a === 1) {\n    return true;\n  }\n  return 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo(a) {\n  if (a === 1) {\n    return true;\n  }\n  return false;\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	20min	\N	confusing	0	HTML	1576224524672	1576224524673	1	javascript
134	Element type selectors should not be used with class selectors	S2714	S2714	javascript	<p>Using element type in class selectors is slower than using only the class selector.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar $products = $("div.products");    // Noncompliant - slow\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar $products = $(".products");    // Compliant - fast\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	jquery,performance,user-experience	0	HTML	1576224524675	1576224524676	1	javascript
135	All branches in a conditional structure should not have exactly the same implementation	S3923	S3923	javascript	<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nlet a = (b == 0) ? getValue() : getValue();   // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224524678	1576224524679	2	javascript
136	JQuery cache variables should comply with a convention name	S2713	S2713	javascript	<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all variables names that are used to store/cache jQuery\nobjects match a provided regular expression.</p>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	convention,jquery	0	HTML	1576224524681	1576224524682	1	javascript
137	Universal selectors should not be used	S2716	S2716	javascript	<p>Element selections that could be matched anywhere in the document can be very slow. That's why use of the universal selector, <code>*</code>,\nshould be limited; it explicitly specifies that the match could be anywhere.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$( ".buttons &gt; *" );  // Noncompliant; extremely expensive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$( ".buttons" ).children(); // Compliant\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	jquery,performance,user-experience	0	HTML	1576224524685	1576224524687	1	javascript
138	Objects should not be created to be dropped immediately without being used	ConstructorFunctionsForSideEffects	ConstructorFunctionsForSideEffects	javascript	<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could\nlead to an unexpected behavior in production.</p>\n<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate method and called\ndirectly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew MyConstructor(); // Non-Compliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar something = new MyConstructor();  // Compliant\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224524688	1576224524690	2	javascript
139	"find" should be used to select the children of an element known by id	S2715	S2715	javascript	<p>The use of <code>find</code> allows <code>document.getElementById()</code> to be used for the top-level selection, and saves the jQuery Sizzle\nengine for where it's really needed. That makes the query faster, and your application more responsive.</p>\n<p>From the jQuery documentation:</p>\n<blockquote>\n  <p>Beginning your selector with an ID is always best.</p>\n  <p>The <code>.find()</code> approach is faster because the first selection is handled without going through the Sizzle selector engine – ID-only\n  selections are handled using <code>document.getElementById()</code>, which is extremely fast because it is native to the browser.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar $productIds = $("#products div.id"); // Noncompliant - a nested query for Sizzle selector engine\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar $productIds = $("#products").find("div.id"); // Compliant - #products is already selected by document.getElementById() so only div.id needs to go through Sizzle selector engine\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	jquery,performance,user-experience	0	HTML	1576224524692	1576224524693	1	javascript
140	Statements should be on separate lines	OneStatementPerLine	OneStatementPerLine	javascript	<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfoo(); bar(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfoo();\nbar();\n</pre>\n<h2>Exceptions</h2>\n<p>Anonymous functions containing a single statement are ignored. Control flow statements with a single nested statement are ignored as well.</p>\n<pre>\nonEvent(function() { doSomething(); });               // Compliant\nonEvent(function(p) { doSomething(); return p % 2; }); // Noncompliant\n\nif (condition) doSomething();                         // Compliant\nif (condition) { doSomething(); }                     // Compliant\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	1min	\N	style	0	HTML	1576224524694	1576224524695	1	javascript
141	"delete" should be used only with object properties	S3001	S3001	javascript	<p>The semantics of the <code>delete</code> operator are a bit tricky, and it can only be reliably used to remove properties from objects. Pass\nanything else to it, and you may or may not get the desired result.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x  = 1;\ndelete x;       // Noncompliant\n\nfunction foo(){\n..\n}\n\ndelete foo;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar obj = {\n  x:1,\n  foo: function(){\n  ...\n  }\n};\ndelete obj.x;\ndelete obj.foo;\n\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224524696	1576224524696	2	javascript
142	"defaults" should be a function when objects or arrays are used	S2550	S2550	javascript	<p>When using the Backbone.js framework with model <code>defaults</code> that contain arrays or objects, <code>defaults</code> should be defined as a\nfunction rather than an object. This is because objects and arrays are passed by reference in JavaScript. So a <code>defaults</code> object that\ncontains arrays or objects is going to set the default value of every instance to point to the same shared object or array.</p>\n<p>Use a function instead and a fresh copy of the object or array will be peeled off for each instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar Person = Backbone.Model.extend({\n    defaults: {  // Noncompliant; every instance of Person will share the same instance of favoriteColors\n        favoriteColors: ["blue","purple","raspberry"]\n    }\n});\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar Person = Backbone.Model.extend({\n    defaults: function() {\n      return {\n        favoriteColors: ["blue","purple","raspberry"]\n      };\n    }\n});\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	backbone	0	HTML	1576224524697	1576224524698	2	javascript
143	Arithmetic operators should only have numbers as operands	S3760	S3760	javascript	<p>Expressions with arithmetic (<code>/, *, %, ++, --, -, -=, *=, /=, %=, +=, +</code>), unary (<code>-</code>), or comparison operators (<code>&gt;,\n&lt;, &gt;=, &lt;=</code>) where one, or both, of the operands is a String, Boolean or Date value rely on implicit conversions. Both the\nmaintainability and reliability levels of such a piece of code are questionable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstr = "80";\nquarter = str / 4; // Noncompliant\n\nif (str &lt; 10) { // Noncompliant\n   // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr = "80";\nparsedStr = parseInt(str);\nquarter = parsedStr / 4;\n\nif (parsedStr &lt; 10) {\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Expressions using the binary <code>+</code> operator with at least one <code>String</code> operand are ignored because the <code>+</code>\n  operator will perform a concatenation in that case. </li>\n  <li> Comparisons where both operands are strings are ignored because a lexicographical comparison is performed in that case. </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	confusing	0	HTML	1576224524699	1576224524700	1	javascript
144	Functions should not be empty	S1186	S1186	javascript	<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\n\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\n\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>	3	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224524700	1576224524701	1	javascript
145	Loop counters should not be assigned to from within the loop body	S2310	S2310	javascript	<p>Loop counters should not be modified in the body of the loop. However other loop control variables representing logical values may be modified in\nthe loop, for example a flag to indicate that something has been completed, which is then tested in the for statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar names = [ "Jack", "Jim", "", "John" ];\nfor (var i = 0; i &lt; names.length; i++) {\n  if (!names[i]) {\n    i = names.length;                                 // Non-Compliant\n  } else {\n    console.log(names[i]);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar names = [ "Jack", "Jim", "", "John" ];\nfor (var name of names) {\n  if (!name) {\n    break;                                 // Compliant\n  } else {\n    console.log(name);\n  }\n}\n</pre>	3	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224524702	1576224524702	1	javascript
146	Comparison operators should not be used with strings	S3003	S3003	javascript	<p>The use of comparison operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code>) with strings is not likely to yield\nthe expected results. Make sure the intention was to compare strings and not numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar appleNumber = "123";\nvar orangeNumber = "45";\nif (appleNumber &lt; orangeNumber) {  // Noncompliant, this condition is true\n  alert("There are more oranges");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar appleNumber = "123";\nvar orangeNumber = "45";\nif (Number(appleNumber) &lt; Number(orangeNumber)) {\n  alert("There are more oranges");\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224524703	1576224524704	1	javascript
147	Expressions should not be too complex	S1067	S1067	javascript	<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>	3	\N	READY	js	LINEAR_OFFSET	1min	5min	per complexity point above the threshold	brain-overload	0	HTML	1576224524705	1576224524706	1	javascript
148	Unary operators "+" and "-" should not be used with objects	S3002	S3002	javascript	<p>The unary operators <code>+</code> and <code>-</code> can be used to convert some value types to numeric values. But not every value can be\nconverted to a <code>Number</code> type; use it with an object, and result will be <code>NaN</code> (Not A Number). This can be confusing to\nmaintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar obj = {x : 1};\ndoSomethingWithNumber(+obj);    // Noncompliant\n\nfunction foo(){\n  return 1;\n}\ndoSomethingWithNumber(-foo);    // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar obj = {x : 1};\ndoSomethingWithNumber(+obj.x);\n\nfunction foo(){\n  return 1;\n}\ndoSomethingWithNumber(-foo());\n\nvar str = '42';\ndoSomethingWithNumber(+str);\n</pre>\n<h2>Exceptions</h2>\n<p>Unary <code>+</code> and <code>-</code> can be used with objects corresponding to primitive types, and <code>+</code> can be used with\n<code>Date</code>.</p>\n<pre>\nvar b = new Boolean(true);\ndoSomethingWithNumber(-b);  // Compliant\nvar timestamp = +new Date();  // Compliant\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	15min	\N	confusing	0	HTML	1576224524709	1576224524710	1	javascript
149	Array constructors should not be used	ArrayAndObjectConstructors	ArrayAndObjectConstructors	javascript	<p>Array literals should always be preferred to Array constructors.</p>\n<p>Array constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be\nequal to the number of arguments. However, using a single argument will have one of three consequences:</p>\n<ul>\n  <li> If the argument is a number and it is a natural number the length will be equal to the value of the argument. </li>\n  <li> If the argument is a number, but not a natural number an exception will be thrown. </li>\n  <li> Otherwise the array will have one element with the argument as its value. </li>\n</ul>\n<p>For these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid\nthese kinds of weird cases, always use the more readable array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a1 = new Array(x1, x2, x3);  // Noncompliant. Results in 3-element array.\nvar a2 = new Array(x1); // Noncompliant and variable in results\nvar a3 = new Array();  // Noncompliant. Results in 0-element array.\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar a1 = [x1, x2, x3];\nvar a2 = [x1];\nvar a3 = [];\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224524711	1576224524755	1	javascript
150	Functions should not have too many parameters	ExcessiveParameterList	ExcessiveParameterList	javascript	<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\nfunction doSomething(param1, param2, param3, param4, param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(param1, param2, param3, param4) {\n...\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	20min	\N	brain-overload	0	HTML	1576224524801	1576224524803	1	javascript
151	Setters should not return values	S2432	S2432	javascript	<p>Functions declared with the <code>set</code> keyword will automatically return the values they were passed. Thus any value explicitly returned from\na setter will be ignored, and explicitly returning a value is an error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar person = {\n  // ...\n  set name(name) {\n    this.name = name;\n    return 42;  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar person = {\n  // ...\n  set name(name) {\n    this.name = name;\n  }\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224524808	1576224524809	2	javascript
152	Braces and parentheses should be used consistently with arrow functions	S3524	S3524	javascript	<p>Shared coding conventions allow teams to collaborate effectively. This rule raises an issue when the use of parentheses with an arrow function does\nnot conform to the configured requirements.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the configured defaults forbidding parentheses</p>\n<pre>\nvar foo = (a) =&gt; { /* ... */ };  // Noncompliant; remove parens from arg\nvar bar = (a, b) =&gt; { return 0; };  // Noncompliant; remove curly braces from body\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar foo = a =&gt; { /* ... */ };\nvar bar = (a, b) =&gt; 0;\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	convention,es2015	0	HTML	1576224524812	1576224524813	1	javascript
153	"continue" should not be used	ContinueStatement	ContinueStatement	javascript	<p><code>continue</code> is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured\ncontrol flow statements such as <code>if</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  for (i = 0; i &lt; 10; i++) {\n    if (i == 5) {\n      continue;  /* Noncompliant */\n    }\n    alert("i = " + i);\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  for (i = 0; i &lt; 10; i++) {\n    if (i != 5) {  /* Compliant */\n      alert("i = " + i);\n    }\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.5 - The continue statement shall not be used. </li>\n</ul>	1	\N	READY	js	CONSTANT_ISSUE	\N	1h	\N	bad-practice,misra	0	HTML	1576224524818	1576224524819	1	javascript
154	Strict equality operators should not be used with dissimilar types	S3403	S3403	javascript	<p>Comparing dissimilar types using the strict equality operators <code>===</code> and <code>!==</code> will always return the same value,\nrespectively <code>false</code> and <code>true</code>, because no type conversion is done before the comparison. Thus, such comparisons can only be\nbugs.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = 8;\nvar b = "8";\n\nif (a === b) {  // Noncompliant; always false\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar a = 8;\nvar b = "8";\n\nif (a == b) {\n  // ...\n}\n</pre>\n<p>or</p>\n<pre>\nvar a = 8;\nvar b = "8";\n\nif (a === Number(b)) {\n  // ...\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224524821	1576224524822	2	javascript
155	Related "if/else if" statements and "cases" in a "switch" should not have the same condition	S1862	S1862	javascript	<p>A <code>switch</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to <code>true</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>\n<p>For a <code>switch</code>, if the first case ends with a <code>break</code>, the second case will never be executed, rendering it dead code. Worse\nthere is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.</p>\n<p>On the other hand, if the first case does not end with a <code>break</code>, both cases will be executed, but future maintainers may not notice\nthat.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n\n\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  case 1:  // Noncompliant\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n\n\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	cert,pitfall,unused	0	HTML	1576224524823	1576224524867	2	javascript
159	Control structures should use curly braces	CurlyBraces	CurlyBraces	javascript	<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>	3	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	cert,misra,pitfall	0	HTML	1576224524936	1576224524980	1	javascript
160	"Array.reverse" should not be used misleadingly	S4043	S4043	javascript	<p>Many of JavaScript's <code>Array</code> methods return an altered version of the array while leaving the source array intact.\n<code>Array.reverse()</code> is not one of those. Instead, it alters the source array <em>in addition to</em> returning the altered version, which is\nlikely not what was intended. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar b = a.reverse(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar b = [...a].reverse();  // de-structure and create a new array, so reverse doesn't impact 'a'\n\na.reverse();\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224525024	1576224525026	2	javascript
161	Cross-document messaging domains should be carefully restricted	S2819	S2819	javascript	<p>HTML5 adds the ability to send messages to documents served from other domains. According to the specification:</p>\n<blockquote>\n  Authors should not use the wildcard keyword (\n  <code>*</code>) in the\n  <code>targetOrigin</code> argument in messages that contain any confidential information, as otherwise there is no way to guarantee that the message\n  is only delivered to the recipient to which it was intended.\n</blockquote>\n<p>To mitigate the risk of sending sensitive information to a document served from a hostile or unknown domain, this rule raises an issue each time\n<code>Window.postMessage</code> is used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myWindow = document.getElementById('myIFrame').contentWindow;\nmyWindow.postMessage(message, "*"); // Noncompliant; how do you know what you loaded in 'myIFrame' is still there?\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting\n  (XSS) </li>\n</ul>	3	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	html5,owasp-a3	0	HTML	1576224525028	1576224525029	3	javascript
180	Track lack of copyright and license headers	S1451	S1451	javascript	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>	4	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224525377	1576224525380	1	javascript
181	Function declarations should not be made within blocks	FunctionDeclarationsWithinBlocks	FunctionDeclarationsWithinBlocks	javascript	<p>While most script engines support function declarations within blocks, it is not part of ECMAScript 5 and below, and from browser to browser the\nimplementations are inconsistent with each other. ECMAScript 5 and below only allow function declarations in the root statement list of a script or\nfunction. If you are targeting browsers that don't support ECMAScript 6, use a variable initialized with a function expression to define a function\nwithin a block :</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x) {\n  function foo() {}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x) {\n  var foo = function() {}\n}\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	cross-browser,user-experience	0	HTML	1576224525392	1576224525395	2	javascript
182	Variables should not be shadowed	VariableShadowing	VariableShadowing	javascript	<p>Overriding a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of code.\nFurther, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n  let x = bar(1);\n  if (x &gt; 0) {\n      let x = bar(2); // Noncompliant\n      console.log(x);\n  } else {\n     console.log("Wrong Value");\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n  let x = bar(1);\n  if (x &gt; 0) {\n      let y = bar(2);\n      console.log(y);\n  } else {\n     console.log("Wrong Value");\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 5.2 - Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that\n  identifier </li>\n  <li> MISRA C++:2008, 2-10-2 - Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope </li>\n  <li> MISRA C:2012, 5.3 - An identifier declared in an inner scope shall not hide an identifier declared in an outer scope </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/VwE">CERT, DCL01-C.</a> - Do not reuse variable names in subscopes </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/cwAhAQ">CERT, DCL01-CPP.</a> - Do not reuse variable names in subscopes </li>\n</ul>	3	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	cert,misra,suspicious	0	HTML	1576224525400	1576224525445	1	javascript
162	Wrapper objects should not be used for primitive types	PrimitiveWrappers	PrimitiveWrappers	javascript	<p>The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. If you use a wrapper object constructor for type conversion,\njust remove the <code>new</code> keyword, and you'll get a primitive value automatically. If you use a wrapper object as a way to add properties to a\nprimitive, you should re-think the design. Such uses are considered bad practice, and should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet x = new Number("0");\nif (x) {\n  alert('hi');  // Shows 'hi'.\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet x = Number("0");\nif (x) {\n  alert('hi');\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Cases when argument of primitive type constructor is a literal of the same type are ignored, except <code>new Boolean(false)</code>.</p>\n<pre>\nlet booleanObject = new Boolean(true);\nlet numberObject = new Number(0);\nlet stringObject = new String('');\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	1min	\N	pitfall	0	HTML	1576224525031	1576224525032	1	javascript
163	Arithmetic operations should not result in "NaN"	S3757	S3757	javascript	<p>The result of an expression with an arithmetic operator <code>/, *, %, ++, --, -, +=, -=, *=, /=, %=, +</code> or unary operator <code>+, -</code>\nwhen at least one operand is <code>Object</code> or <code>Undefined</code> will be always a <code>NaN</code> (Not a Number).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = [1, 2];\nvar y = x / 4;  //Noncompliant\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> <code>Date</code> operands: they are implicitly converted to numbers. </li>\n  <li> The binary <code>+</code> operator with <code>Object</code> operand (concatenation). </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224525034	1576224525035	1	javascript
164	Statements should end with semicolons	Semicolon	Semicolon	javascript	<p>In JavaScript, the semicolon (<code>;</code>) is optional as a statement separator, but omitting semicolons can be confusing, and lead to\nunexpected results because a semicolon is implicitly inserted at the end of each line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction fun() {\n  return  // Noncompliant. ';' implicitly inserted at end of line\n       5   // Noncompliant. ';' implicitly inserted at end of line\n}\nprint(fun());  // prints "undefined", not "5"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction fun() {\n  return 5;\n}\nprint(fun());\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224525037	1576224525039	1	javascript
165	Dead stores should be removed	S1854	S1854	javascript	<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction or when an object property is\nassigned a value that is not subsequently used. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious\nerror in the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1; i &lt; b; i++) {\n    x = x * a;  //Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1; i &lt; b; i++) {\n    x = x * a;\n  }\n  return x;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>true</code>, <code>false</code>, <code>""</code>, <code>[]</code> and\n<code>{}</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C.</a> - Detect and remove unused values </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/S4IyAQ">CERT, MSC13-CPP.</a> - Detect and remove unused values </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	15min	\N	cert,cwe,unused	0	HTML	1576224525041	1576224525084	1	javascript
166	Destructuring syntax should be used for assignments	S3514	S3514	javascript	<p>ECMAScript 2015 introduced the ability to extract and assign multiple data points from an object or array simultaneously. This is called\n"destructuring", and it allows you to condense boilerplate code so you can concentrate on logic. </p>\n<p>This rule raises an issue when multiple pieces of data are extracted out of the same object or array and assigned to variables.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo (obj1, obj2, array) {\n  var a = obj1.a;  // Noncompliant\n  var b = obj1.b;\n\n  var name = obj2.name;  // ignored; there's only one extraction-and-assignment\n\n  var zero = array[0];  // Noncompliant\n  var one = array[1];\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo (obj1, obj2, array) {\n  var {a, b} = obj1;\n\n  var {name} = obj2;  // this syntax works because var name and property name are the same\n\n  var [zero, one] = array;\n}\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	clumsy,es2015	0	HTML	1576224525131	1576224525134	1	javascript
167	The "changed" property should not be manipulated directly	S2549	S2549	javascript	<p>According to the Backbone.js docs</p>\n<blockquote>\n  The\n  <strong>changed</strong> property is the internal hash containing all the attributes that have changed since the last set. Please do not update\n  <strong>changed</strong> directly since its state is internally maintained by set. A copy of\n  <strong>changed</strong> can be acquired from changedAttributes.\n</blockquote>\n<p>The <code>changed</code> property is involved in decisions about whether or not a collection should be resorted when it is updated. If you modify\nit manually, you can break the resorting of the collection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyModel.changed = { myProperty: 1 }; // Non-compliant\n</pre>	3	\N	READY	js	CONSTANT_ISSUE	\N	30min	\N	backbone	0	HTML	1576224525138	1576224525141	2	javascript
168	HTML-style comments should not be used	HtmlComments	HtmlComments	javascript	<p>HTML-style comments are not part of EcmaScript specification, and should not be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;!-- Noncompliant --&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Compliant\n/* Compliant */\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	bad-practice	0	HTML	1576224525146	1576224525148	1	javascript
169	Non-existent properties should not be read	S3759	S3759	javascript	<p>Reading a non-existent property on an object always returns <code>undefined</code>. Doing so is usually an error; either in the name of the\nproperty or the type of the variable being accessed.</p>\n<p>If an attempt is made to access properties of a primitive, the primitive is automatically encased in a primitive-wrapper object for the operation.\nBut being "promoted" to an object doesn't mean that the primitive will actually have properties to access. The wrapper object still won't have the\nnon-existent property and <code>undefined</code> will be returned instead. </p>\n<p>This rule raises an issue when an attempt is made to access properties of a primitive. Thus this rule should only be activated when you don't use\nmonkey patching for standard objects, like <code>Number</code>, <code>Boolean</code> and <code>String</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = 42;\ny = x.length;   // Noncompliant, Number type doesn't have "length" property\n</pre>\n<h2>Exceptions</h2>\n<p>The Ember framework introduces a few extensions to <code>String</code>. Since it is a widely used package, the following <code>String</code>\nproperties will not trigger this rule even though they are not built-in:</p>\n<ul>\n  <li> <code>camelize</code> </li>\n  <li> <code>capitalize</code> </li>\n  <li> <code>classify</code> </li>\n  <li> <code>dasherize</code> </li>\n  <li> <code>decamelize</code> </li>\n  <li> <code>fmt</code> </li>\n  <li> <code>loc</code> </li>\n  <li> <code>underscore</code> </li>\n  <li> <code>w</code> </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224525152	1576224525197	2	javascript
170	Variables should be declared explicitly	S2703	S2703	javascript	<p>JavaScript variable scope can be particularly difficult to understand and get right. The situation gets even worse when you consider the\n<em>accidental</em> creation of global variables, which is what happens when you declare a variable inside a function or the <code>for</code> clause\nof a for-loop without using the <code>let</code>, <code>const</code> or <code>var</code> keywords. </p>\n<p><code>let</code> and <code>const</code> were introduced in ECMAScript 2015, and are now the preferred keywords for variable declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction f(){\n  i = 1;         // Noncompliant; i is global\n\n  for (j = 0; j &lt; array.length; j++) {  // Noncompliant; j is global now too\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction f(){\n  var i = 1;\n\n  for (let j = 0; j &lt; array.length; j++) {\n    // ...\n  }\n}\n</pre>	4	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	pitfall	0	HTML	1576224525245	1576224525246	1	javascript
171	Values not convertible to numbers should not be used in numeric comparisons	S3758	S3758	javascript	<p>In a Zen-like manner, <code>NaN</code> isn't equal to anything, even itself. So comparisons (<code>&gt;, &lt;, &gt;=, &lt;=</code>) where one\noperand is <code>NaN</code> or evaluates to <code>NaN</code> always return <code>false</code>. Specifically, <code>undefined</code> and objects that\ncannot be converted to numbers evaluate to <code>NaN</code> when used in numerical comparisons.</p>\n<p>This rule raises an issue when there is at least one path through the code where one of the operands to a comparison is <code>NaN</code>,\n<code>undefined</code> or an <code>Object</code> which cannot be converted to a number.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x;  // x is currently "undefined"\nif (someCondition()) {\n  x = 42;\n}\n\nif (42 &gt; x) {  // Noncompliant; "x" might still be "undefined"\n  doSomething();\n}\n\nvar obj = {prop: 42};\nif (obj &gt; 24) { // Noncompliant\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x;\nif (someCondition()) {\n  x = 42;\n} else {\n  x = foo();\n}\n\nif (42 &gt; x) {\n  doSomething();\n}\n\nvar obj = {prop: 42};\nif (obj.prop &gt; 24) {\n  doSomething();\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224525249	1576224525250	1	javascript
172	"===" and "!==" should be used instead of "==" and "!="	EqEqEq	EqEqEq	javascript	<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For\nexample, it evaluates <code>' \\t\\r\\n' == 0</code> as <code>true</code>.</p>\n<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (var == 'howdy') {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (var === 'howdy') {...}\n</pre>\n<h2>Exceptions</h2>\n<p>Even if testing the equality of a variable against null doesn't do exactly what most JavaScript developers believe, usage of <code>==</code> or\n<code>!=</code> is tolerated in such context. In the following case, if <code>foo</code> hasn't been initialized, its default value is not\n<code>null</code> but <code>undefined</code>. Nevertheless <code>undefined == null</code>, so JavaScript developers get the expected behavior.</p>\n<pre>\nif(foo == null) {...}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224525252	1576224525254	1	javascript
173	Function returns should not be invariant	S3516	S3516	javascript	<p>When a function is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is likely a mistake.</p>\n<p>This rule raises an issue when a function contains several <code>return</code> statements that all return the same value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(a) {  // Noncompliant\n  let b = 12;\n  if (a) {\n    return b;\n  }\n  return b;\n}\n</pre>	4	\N	READY	js	LINEAR	2min	\N	Per number of return statements	\N	0	HTML	1576224525256	1576224525257	1	javascript
174	The base should be provided to "parseInt"	S2427	S2427	javascript	<p>The <code>parseInt</code> function has two versions, one that takes a base value as a second argument, and one that does not. Unfortunately using\nthe single-arg version can result in unexpected results on older browsers. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nparseInt("010");  // Noncompliant; pre-2013 browsers may return 8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nparseInt("010", 10);\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	user-experience	0	HTML	1576224525260	1576224525261	2	javascript
175	Nested blocks of code should not be left empty	EmptyBlock	EmptyBlock	javascript	<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i &lt; length; i++) {}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty. Moreover <code>catch</code> blocks are ignored.</p>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224525263	1576224525265	1	javascript
176	Only "while", "do" and "for" statements should be labelled	LabelPlacement	LabelPlacement	javascript	<p>Any statement or block of statements can be identified by a label, but those labels should be used only on <code>while</code>,\n<code>do-while</code> and <code>for</code> statements. Using labels in any other context leads to unstructured, confusing code. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyLabel:if (i % 2 == 0) {  // Noncompliant\n  if (i == 12) {\n    print("12");\n    break myLabel;\n  }\n  print("Odd number, but not 12");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyLabel:for (i = 0; i &lt; 10; i++) {   // Compliant\n  print("Loop");\n  break myLabel;\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	20min	\N	pitfall	0	HTML	1576224525267	1576224525269	1	javascript
177	"switch" statements should not contain non-case labels	S1219	S1219	javascript	<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Case 1, the code is syntactically correct but the behavior is not the expected one</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // instead of "case WEDNESDAY"\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2, the code is correct and behaves as expected but is hardly readable </p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(i = 0 ; i &lt; X ; i++) {\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Case 1</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled "for" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n</ul>	4	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	misra,suspicious	0	HTML	1576224525271	1576224525317	1	javascript
178	Octal values should not be used	OctalNumber	OctalNumber	javascript	<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myNumber = 8;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>\n  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than "\\0") shall not be used </li>\n  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/_QC7AQ">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a\n  decimal value </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/hYClBg">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>	4	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	cert,misra,pitfall	0	HTML	1576224525362	1576224525365	1	javascript
179	Unchanged variables should be marked "const"	S3353	S3353	javascript	<p>Marking a variable that is unchanged after initialization <code>const</code> is an indication to future maintainers that "no this isn't updated,\nand it's not supposed to be". <code>const</code> should be used in these situations in the interests of code clarity.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction seek(input) {\n  let target = 32;  // Noncompliant\n  for (let i of input) {\n    if (i == target) {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction seek(input) {\n  const target = 32;\n  for (let i of input) {\n    if (i == target) {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>	3	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	es2015	0	HTML	1576224525370	1576224525373	1	javascript
205	"for...in" loops should filter properties before acting on them	ForIn	ForIn	javascript	<p>The <code>for...in</code> statement allows you to loop through the names of all of the properties of an object. The list of properties includes all\nthose properties that were inherited through the prototype chain. This has the side effect of serving up functions when the interest is in data\nproperties. Programs that don't take this into account can fail.</p>\n<p>Therefore, the body of every <code>for...in</code> statement should be wrapped in an <code>if</code> statement that filters which properties are\nacted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (name in object) {\n    doSomething(name);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (name in object) {\n  if (object.hasOwnProperty(name)) {\n    doSomething(name);\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Loops used to clone objects are ignored.</p>\n<pre>\nfor (prop in obj) {\n  a[prop] = obj[prop];  // Compliant by exception\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224525986	1576224525988	2	javascript
206	"future reserved words" should not be used as identifiers	FutureReservedWords	FutureReservedWords	javascript	<p>The following words may be used as keywords in future evolutions of the language, so using them as identifiers should be avoided to allow an easier\nadoption of those potential future versions:</p>\n<ul>\n  <li> <code>await</code> </li>\n  <li> <code>class</code> </li>\n  <li> <code>const</code> </li>\n  <li> <code>enum</code> </li>\n  <li> <code>export</code> </li>\n  <li> <code>extends</code> </li>\n  <li> <code>implements</code> </li>\n  <li> <code>import</code> </li>\n  <li> <code>interface</code> </li>\n  <li> <code>let</code> </li>\n  <li> <code>package</code> </li>\n  <li> <code>private</code> </li>\n  <li> <code>protected</code> </li>\n  <li> <code>public</code> </li>\n  <li> <code>static</code> </li>\n  <li> <code>super</code> </li>\n  <li> <code>yield</code> </li>\n</ul>\n<p>Use of these words as identifiers would produce an error in JavaScript <code>strict</code> mode code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar package = document.getElementsByName("foo"); // Noncompliant\nvar someData = { package: true };                 // Compliant, as it is not used as an identifier here\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar elements = document.getElementsByName("foo"); // Compliant\n</pre>	4	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	lock-in,pitfall	0	HTML	1576224525992	1576224526036	1	javascript
183	"arguments" should not be accessed directly	S3513	S3513	javascript	<p>The magic of JavaScript is that you can pass arguments to functions that don't declare parameters, and on the other side, you can use those\npassed-in arguments inside the no-args <code>function</code>. </p>\n<p>But just because you can, that does't mean you should. The expectation and use of arguments inside functions that don't explicitly declare them is\nconfusing to callers. No one should ever have to read and fully understand a function to be able to use it competently. </p>\n<p>If you don't want to name arguments explicitly, use the <code>...</code> syntax to specify that an a variable number of arguments is expected. Then\ninside the function, you'll be dealing with a first-class array, rather than an array-like structure.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction concatenate() {\n  let args = Array.prototype.slice.call(arguments);  // Noncompliant\n  return args.join(', ');\n}\n\nfunction doSomething(isTrue) {\n  var args = Array.prototype.slice.call(arguments, 1); // Noncompliant\n  if (!isTrue) {\n    for (var arg of args) {\n      ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction concatenate(...args) {\n  return args.join(', ');\n}\n\nfunction doSomething(isTrue, ...values) {\n  if (!isTrue) {\n    for (var value of values) {\n      ...\n    }\n  }\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	api-design,es2015	0	HTML	1576224525491	1576224525538	1	javascript
184	Built-in objects should not be overridden	S2424	S2424	javascript	<p>Overriding an object changes its behavior and could potentially impact all code using that object. Overriding standard, built-in objects could\ntherefore have broad, potentially catastrophic effects on previously-working code.</p>\n<p>This rule detects overrides of the following native objects:</p>\n<ul>\n  <li> Fundamental objects - Object, Function, Boolean, Symbol, Error, EvalError, InternalError, RangeError, ReferenceError, SyntaxError, TypeError,\n  URIError </li>\n  <li> Numbers and dates - Number, Math, Date </li>\n  <li> Text processing - String, RegExp </li>\n  <li> Indexed collections - Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Unit16Array, Int32Array, Uint32Array, Float32Array,\n  Float64Array </li>\n  <li> Keyed collections - Map, Set, WeakMap, WeakSet </li>\n  <li> Structured data - ArrayBuffer, DataView, JSON </li>\n  <li> Control abstraction objects - Promise </li>\n  <li> Reflection - Reflect, Proxy </li>\n  <li> Internationalization - Intl </li>\n  <li> Non-standard objects - Generator, Iterator, ParallelArray, StopIteration </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	20min	\N	confusing	0	HTML	1576224525590	1576224525593	2	javascript
185	Debugger statements should not be used	DebuggerStatement	DebuggerStatement	javascript	<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint\nin the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to\nattacks in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write("loop index is " + i);\n  // Wait for user to resume.\n  debugger;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write("loop index is " + i);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>\n</ul>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	cwe,user-experience	0	HTML	1576224525597	1576224525600	3	javascript
186	Short-circuit logic should be used to prevent null pointer dereferences in conditionals	S1697	S1697	javascript	<p>When either the equality operator in a test for <code>null</code> or <code>undefined</code>, or the logical operator that follows it is reversed,\nthe code has the appearance of safely null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is\nnull-tested and then dereferenced only if it is <code>null</code>/<code>undefined</code>, leading to a guaranteed <code>TypeError</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (str == null &amp;&amp; str.length == 0) {\n  console.log("String is empty");\n}\n\nif (str == undefined &amp;&amp; str.length == 0) {\n  console.log("String is empty");\n}\n\nif (str != null || str.length &gt; 0) {\n  console.log("String is not empty");\n}\n\nif (str != undefined || str.length &gt; 0) {\n  console.log("String is not empty");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (str != null &amp;&amp; str.length == 0) {\n  console.log("String is empty");\n}\n\nif (str != undefined &amp;&amp; str.length == 0) {\n  console.log("String is empty");\n}\n\nif (str == null || str.length &gt; 0) {\n  console.log("String is not empty");\n}\n\nif (str == undefined || str.length &gt; 0) {\n  console.log("String is not empty");\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:javascript:S2259} instead.</p>	2	\N	DEPRECATED	js	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224525605	1576224525653	2	javascript
187	Ternary operators should not be nested	S3358	S3358	javascript	<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?"Mr. ":p.isMarried()?"Mrs. ":"Miss " + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?"Mrs. ":"Miss ";\n  return p.gender==Person.MALE?"Mr. ": honorific + p.getLastName();\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	confusing	0	HTML	1576224525699	1576224525702	1	javascript
188	Template strings should be used instead of concatenation	S3512	S3512	javascript	<p>ECMAScript 2015 added the ability to use template literals instead of concatenation. Since their use is clearer and more concise, they are\npreferred in environments that support ECMAScript 2015.</p>\n<p>This rule raises an issue when a string is created from the result of two or more concatenations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction sayHello(name) {\n  console.log("hello " + name);  // ignored\n}\n\nfunction madLib(verb, noun) {\n  console.log("I really " + verb + " one or two " + noun);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction sayHello(name) {\n  console.log(`hello ${name}`);  // no issue raised before, but this is better\n}\n\nfunction madLib(verb, noun) {\n  console.log(`I really ${verb} one or two ${noun}`);\n}\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	clumsy,es2015	0	HTML	1576224525706	1576224525710	1	javascript
189	Tabulation characters should not be used	TabCharacter	TabCharacter	javascript	<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>	1	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224525715	1576224525718	1	javascript
190	Non-existent variables should not be referenced	S3827	S3827	javascript	<p>When a non-existent variable is referenced a <code>ReferenceError</code> is raised.</p>\n<p>Due to the dynamic nature of JavaScript this can happen in a number of scenarios:</p>\n<ul>\n  <li> When typo was made in a symbol's name. </li>\n  <li> When using variable declared with <code>let</code> or <code>const</code> before declaration (unlike <code>var</code>-declarations, they are not\n  hoisted to the top of the scope). </li>\n  <li> Due to confusion with scopes of <code>let</code>- and <code>const</code>-declarations (they have block scope, unlike\n  <code>var</code>-declarations, having function scope). </li>\n  <li> When accessing a property in the wrong scope (e.g. forgetting to specify <code>this.</code>). </li>\n</ul>\n<p>This rule does not raise issues on global variables which are defined with <code>sonar.javascript.globals</code> and\n<code>sonar.javascript.environments</code> properties.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar john = {\n  firstName: "john",\n  show: function() { console.log(firstName); } // Noncompliant: firstName is not defined\n}\njohn.show();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar john = {\n  firstName: "john",\n  show: function() { console.log(this.firstName); }\n}\njohn.show();\n</pre>	4	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224525723	1576224525726	2	javascript
191	"yield" expressions should not be used outside generators	S3828	S3828	javascript	<p>The <code>yield</code> keyword is used in a generator function to return an <code>IteratorResult</code> to the caller. It has no other purpose, and\nif found outside such a function will raise a <code>ReferenceError</code> because it is then treated as an identifier.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n  for (var i = 0; i &lt; 5; i++) {\n    yield i * 2;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction * foo() {\n  for (var i = 0; i &lt; 5; i++) {\n    yield i * 2;\n  }\n}\n</pre>	4	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	es2015	0	HTML	1576224525731	1576224525734	2	javascript
192	Arguments to built-in functions should match documented types	S3782	S3782	javascript	<p>The types of the arguments to built-in functions are specified in the JavaScript language specifications. Calls to these functions should conform\nto the documented types, otherwise the result will most likely not be what was expected (e.g.: the call would always return <code>false</code>).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst isTooSmall = Math.abs(x &lt; 0.0042);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst isTooSmall = Math.abs(x) &lt; 0.0042;\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224525738	1576224525740	1	javascript
193	Function and method names should comply with a naming convention	S100	S100	javascript	<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nfunction DoSomething(){...}  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(){...}\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224525743	1576224525744	1	javascript
194	Single quotes should be used for string literals	SingleQuote	SingleQuote	javascript	<p>For consistency single-quotes (') are preferred to double-quotes ("). This is helpful when creating strings that include HTML. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar firstParameter = "something";\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar firstParameter = 'something';\n</pre>\n<h2>Exceptions</h2>\n<p>JSX code and strings that contain quotes are ignored.</p>\n<pre>\nlet heSaid = "Then he said 'What?'."  // ignored\nlet sheSaid = '"Whatever!" she replied.'  // ignored\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224525749	1576224525750	1	javascript
195	"indexOf" checks should not be for positive numbers	S2692	S2692	javascript	<p>Most checks against an <code>indexOf</code> call against a string or array compare it with -1 because 0 is a valid index. Any checks which look for\nvalues &gt;0 ignore the first element, which is likely a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar color = "blue";\nvar name = "ishmael";\nvar number = 123;\n\nvar arr = [color, name];\n\nif (arr.indexOf("blue") &gt; 0) { // Noncompliant\n  // ...\n}\nif (arr[0].indexOf("ish") &gt; 0 { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar color = "blue";\nvar name = "ishmael";\nvar number = 123;\n\nvar arr = [color, name];\n\nif (arr.indexOf("blue") &gt;= 0) {\n  // ...\n}\nif (arr[0].indexOf("ish") &gt; -1) {\n  // ...\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	suspicious	0	HTML	1576224525751	1576224525752	1	javascript
196	Unused function parameters should be removed	UnusedFunctionArgument	UnusedFunctionArgument	javascript	<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething(a, b) { // "a" is unused\n  return compute(b);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(b) {\n  return compute(b);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When writing function callbacks, some arguments might be required as part of the function signature, but not actually needed by the callback code.\nFor instance, JQuery has the 'each' helper to iterate over arrays or objects, but using the counter 'i' should remain optional:</p>\n<pre>\n$(["first", "last"]).each(function (i, value) {\n  computeSomethingWithValue(value);\n});\n</pre>\n<p>So only unused arguments listed at the end of the argument list will be flagged with issues because they could be omitted from the function\nsignature. Unused arguments which are followed by an argument that <em>is</em> used will be ignored.</p>\n<p>Examples :</p>\n<pre>\nvar myFirsCallBackFunction = function (p1, p2, p3, p4) {  // p2 is ignored, but p4 is reported\n                                              return p1 + p3; }\n\nvar mySecondCallBackFunction = function (p1, p2, p3, p4) {  // p1, p2 and p3 are ignored\n                                              return p4; }\n\nvar myThirdCallBackFunction = function (p1, p2, p3, p4) {  // p1 is ignored but p3 and p4 are reported\n                                              return p2; }\n</pre>\n<p>Further, when <code>arguments</code> is used in the function body, no parameter is reported as unused. </p>\n<pre>\nfunction doSomething(a, b, c) {\n  compute(arguments);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>\n  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	cert,misra,unused	0	HTML	1576224525754	1576224525796	1	javascript
197	Template literal placeholder syntax should not be used in regular strings	S3786	S3786	javascript	<p>Template strings allow developers to embed variables or expressions in strings using template literals, instead of string concatenation. This is\ndone by using expressions like <code>${variable} </code> in a string between two back-ticks (<code>`</code>). However, when used in a regular string\nliteral (between double or single quotes) the template will not be evaluated and will be used as a literal, which is probably not what was\nintended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconsole.log("Today is ${date}"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconsole.log(`Today is ${date}`);\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	1min	\N	\N	0	HTML	1576224525842	1576224525845	2	javascript
198	Code should not be dynamically injected and executed	Eval	Eval	javascript	<p>The <code>eval</code> function is a way to run arbitrary code at run-time. Dynamically evaluating code is slow and a potential security issue when\nthe arguments haven't been properly validated.</p>\n<p>In general it is better to avoid it altogether, particularly when there are safer alternatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar value = eval('obj.' + propName); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar value = obj[propName];\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise an issue when the argument of the <code>eval</code> call is a literal string as it is reasonably safe.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/95.html">MITRE CWE-95</a> - CWE-95: Improper Neutralization of Directives in Dynamically\n  Evaluated Code ('Eval Injection') </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting\n  (XSS) </li>\n</ul>	3	\N	READY	js	CONSTANT_ISSUE	\N	30min	\N	cwe,owasp-a3	0	HTML	1576224525850	1576224525853	3	javascript
199	"in" should not be used with primitive types	S3785	S3785	javascript	<p>The <code>in</code> operator tests whether the specified property is in the specified object.</p>\n<p>If the right operand is a of primitive type (i.e., not an object) the <code>in</code> operator raises a <code>TypeError</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = "Foo";\n"length" in x; // Noncompliant: TypeError\n0 in x;        // Noncompliant: TypeError\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = new String("Foo");\n"length" in x;    // true\n0 in x;           // true\n"foobar" in x;    // false\n</pre>	3	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224525858	1576224525860	2	javascript
200	Boolean literals should not be redundant	S1125	S1125	javascript	<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanVariable == true) { /* ... */ }\nif (booleanVariable != true) { /* ... */ }\nif (booleanVariable || false) { /* ... */ }\ndoSomething(!false);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanVariable) { /* ... */ }\nif (!booleanVariable) { /* ... */ }\nif (booleanVariable) { /* ... */ }\ndoSomething(true);\n</pre>\n<h2>Exceptions</h2>\n<p>The use of literal booleans in comparisons which use identity operators (<code>===</code> and <code>!==</code>) are ignored.</p>\n\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>	1	\N	DEPRECATED	js	CONSTANT_ISSUE	\N	2min	\N	clumsy	0	HTML	1576224525865	1576224525867	1	javascript
201	Local Variables should not be declared and then immediately returned or thrown	S1488	S1488	javascript	<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction computeDurationInMilliseconds() {\n  var duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	clumsy	0	HTML	1576224525871	1576224525874	1	javascript
202	Untrusted content should not be included	S2611	S2611	javascript	<p>Including content in your site from an untrusted source can expose your users to attackers and even compromise your own site. For that reason, this\nrule raises an issue for each non-relative URL.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction include(url) {\n  var s = document.createElement("script");\n  s.setAttribute("type", "text/javascript");\n  s.setAttribute("src", url);\n  document.body.appendChild(s);\n}\ninclude("http://hackers.com/steal.js")  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/829">MITRE, CWE-829</a> - Inclusion of Functionality from Untrusted Control Sphere </li>\n  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Risky Resource Management </li>\n</ul>	3	\N	READY	js	CONSTANT_ISSUE	\N	15min	\N	cwe,sans-top25-risky	0	HTML	1576224525879	1576224525882	3	javascript
203	Identical expressions should not be used on both sides of a binary operator	S1764	S1764	javascript	<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nvar j = 5 / 5; //always 1\nvar k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing one variable against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </p>\n<p>Moreover comma operator <code>,</code> and <code>instanceof</code> operator are ignored as there are use-cases when there usage is valid.</p>\n<pre>\nif(f !== f) { // test for NaN value\n  console.log("f is NaN");\n}\n\nvar i = 1 &lt;&lt; 1; // Compliant\nvar j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> {rule:javascript:S1656} - Implements a check on <code>=</code>. </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	cert	0	HTML	1576224525889	1576224525933	2	javascript
204	Return of boolean expressions should not be wrapped into an "if-then-else" statement	S1126	S1126	javascript	<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified. </p>\n<p>Note that if the result of the expression is not a boolean but for instance an integer, then double negation should be used for proper\nconversion.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>\n<p>or </p>\n<pre>\nreturn !!expression;\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	clumsy	0	HTML	1576224525979	1576224525982	1	javascript
207	Assignments should not be made from within sub-expressions	AssignmentWithinCondition	AssignmentWithinCondition	javascript	<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ((str = cont.substring(pos1, pos2)) != '') {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr = cont.substring(pos1, pos2);\nif (str != '') {\n  //...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>\n<pre>\nwhile ((line = nextLine()) != null) {...}  // Compliant\n\nwhile (line = nextLine()) {...}  // Compliant\n\nif (line = nextLine()) {...}  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>\n  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>\n  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/nYFtAg">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/1gCTAw">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/KQvhAg">CERT, EXP19-CPP.</a> - Do not perform assignments in conditional expressions\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/KYIyAQ">CERT, MSC02-CPP.</a> - Avoid errors of omission </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,misra,suspicious	0	HTML	1576224526080	1576224526123	1	javascript
228	Function parameters with default values should be last	S1788	S1788	javascript	<p>The ability to define default values for function parameters can make a function easier to use. Default parameter values allow callers to specify\nas many or as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code.</p>\n<p>But all function parameters with default values should be declared after the function parameters without default values. Otherwise, it makes it\nimpossible for callers to take advantage of defaults; they must re-specify the defaulted values or pass <code>undefined</code> in order to "get to"\nthe non-default parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction multiply(a = 1, b) {  // Noncompliant\n  return a*b;\n}\n\nvar x = multiply(42);  // returns NaN as b is undefined\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction multiply(b, a = 1) {\n  return a*b;\n}\n\nvar x = multiply(42);  // returns 42 as expected\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	20min	\N	es2015	0	HTML	1576224526661	1576224526664	1	javascript
229	Trailing commas should be used	S3723	S3723	javascript	<p>Modern browsers ignore unneeded, trailing commas, so there are no negatives to having them unless you're supporting an IE 8 application. Since they\nmake adding new properties simpler, their use is preferred. This rule raises an issue when the last item in an object declaration or array declaration\ndoes not end with a trailing comma and does not lie on the same line as the closing curly brace or bracket.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar joe = {\n  fname: "Joe",\n  lname: "Smith"      // Noncompliant\n};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar joe = {\n  fname: "Joe",\n  lname: "Smith",    // OK\n};\n\nvar joe = {\n  fname: "Joe",\n  lname: "Smith"};   // OK\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224526669	1576224526672	1	javascript
230	"strict" mode should be used with caution	StrictMode	StrictMode	javascript	<p>Even though it may be a good practice to enforce JavaScript strict mode, doing so could result in unexpected behaviors on browsers that do not\nsupport it yet. Using this feature should therefore be done with caution and with full knowledge of the potential consequences on browsers that do not\nsupport it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction strict() {\n  'use strict';\n}\n</pre>	3	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	cross-browser,user-experience	0	HTML	1576224526676	1576224526679	1	javascript
208	Extra semicolons should be removed	S1116	S1116	javascript	<p>Extra semicolons (<code>;</code>) are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n  <li> There was a misunderstanding about where semicolons are required or useful. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 1;; // Noncompliant\n\nfunction foo() {\n};  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = 1;\n\nfunction foo() {\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. </li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/7gCTAw">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,\n  or while condition </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/i4FtAg">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,\n  or while statement </li>\n</ul>	1	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	cert,misra,unused	0	HTML	1576224526168	1576224526212	1	javascript
209	Results of "in" and "instanceof" should be negated rather than operands	S3812	S3812	javascript	<p>Mixing up the order of operations will almost always yield unexpected results. For instance, consider the outcome of absentmindedly kissing the dog\nand patting your spouse on the head. </p>\n<p>Similarly, mis-applied negation will also yield bad results. For instance consider the difference between <code>\\!key in dict</code> and\n<code>\\!(key in dict)</code>. The first looks for a boolean value (<code>!key</code>) in <code>dict</code>, and the other looks for a string and\ninverts the result. <code>\\!obj instanceof SomeClass</code> has the same problem.</p>\n<p>This rule raises an issue when the left operand of an <code>in</code> or <code>instanceof</code> operator is negated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (!"prop" in myObj) {  // Noncompliant;  "in" operator is checking property "false"\n  doTheThing();  // this block will be never executed\n}\n\nif (!foo instanceof MyClass) {  // Noncompliant; "!foo" returns a boolean, which is not an instance of anything\n  doTheOtherThing();  // this block is never executed\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (!("prop" in myObj)) {\n  doTheThing();\n}\n\nif (!(foo instanceof MyClass)) {\n  doTheOtherThing();\n}\n</pre>	3	\N	READY	js	CONSTANT_ISSUE	\N	1min	\N	\N	0	HTML	1576224526260	1576224526263	2	javascript
210	Function argument names should be unique	DuplicateFunctionArgument	DuplicateFunctionArgument	javascript	<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument\nhides all the previous arguments with the same name (those previous arguments remain available through arguments[i], so they're not completely\ninaccessible).</p>\n<p>This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone. Furthermore, in strict mode, declaring\narguments with the same name produces an error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction compute(a, a, c) { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction compute(a, b, c) { // Compliant\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224526269	1576224526273	2	javascript
211	Wildcard imports should not be used	S2208	S2208	javascript	<p>On the principle that clearer code is better code, you should explicitly <code>import</code> the things you want to use in a module. Using\n<code>import *</code> imports everything in the module, and runs the risk of confusing maintainers. Similarly, <code>export * from "module";</code>\nimports and then re-exports everything in the module, and runs the risk of confusing not just maintainers but also users of the module.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport * as Imported from "aModule";  // Noncompliant\n</pre>	3	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	es2015,pitfall	0	HTML	1576224526277	1576224526280	1	javascript
212	Labels should not be used	S1119	S1119	javascript	<p>Labels are not commonly used, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to follow,\nwhich reduces the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyLabel: {\n  let x = doSomething();\n  if (x &gt; 0) {\n    break myLabel;\n  }\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet x = doSomething();\nif (x &lt;= 0) {\n  doSomethingElse();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Labeled loops are ignored.</p>	2	\N	READY	js	CONSTANT_ISSUE	\N	30min	\N	confusing	0	HTML	1576224526284	1576224526287	1	javascript
213	Collapsible "if" statements should be merged	CollapsibleIfStatements	CollapsibleIfStatements	javascript	<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x != undefined) {\n  if (x === 2) {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x != undefined &amp;&amp; x === 2) {\n  // ...\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224526291	1576224526292	1	javascript
214	Function call arguments should not start on new lines	S1472	S1472	javascript	<p>Because semicolons at the ends of statements are optional, starting function call arguments on a separate line makes the code confusing. It could\nlead to errors and most likely <em>will</em> lead to questions for maintainers.</p>\n<p>What was the initial intent of the developer?</p>\n<ol>\n  <li> Define a function and then execute some unrelated code inside a closure ? </li>\n  <li> Pass the second function as a parameter to the first one ? </li>\n</ol>\n<p>The first option will be the one chosen by the JavaScript interpreter.</p>\n<p>By extension, and to improve readability, any kind of function call argument should not start on new line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar fn = function () {\n  //...\n}\n\n(function () { // Noncompliant\n  //...\n})();\n</pre>\n<h2>Compliant Solution</h2>\n<p>Either</p>\n<pre>\n// define a function\nvar fn = function () {\n  //...\n}; // &lt;-- semicolon added\n\n// then execute some code inside a closure\n(function () {\n  //...\n})();\n</pre>\n<p>Or </p>\n<pre>\nvar fn = function () {\n  //...\n}(function () { // &lt;-- start function call arguments on same line\n  //...\n})();\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224526296	1576224526299	1	javascript
215	Multiline blocks should be enclosed in curly braces	S2681	S2681	javascript	<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	cert,cwe	0	HTML	1576224526309	1576224526352	2	javascript
216	Generators should "yield" something	S3531	S3531	javascript	<p>A generator without a <code>yield</code> statement is at best confusing, and at worst a bug in your code, since the iterator produced by your code\nwill always be empty. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction* myGen(a, b) {  // Noncompliant\n  let answer = 0;\n  answer += a * b;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction* myGen(a, b) {\n  let answer = 0;\n  while (answer &lt; 42) {\n    answer += a * b;\n    yield answer;\n  }\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	api-design,es2015	0	HTML	1576224526398	1576224526400	2	javascript
217	Object literal shorthand syntax should be used	S3498	S3498	javascript	<p>When an already-defined variable is given the same name within a new object, object-shorthand syntax is preferred as being more compact. Similarly,\nobject-shorthand is also preferred for the definition of functions in object literals.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet a = 1;\n\nlet myObj = {\n  a : a,  // Noncompliant\n  fun: function () {  // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet a = 1;\n\nlet myObj = {\n  a,\n  fun () {\n    //...\n  }\n}\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	1min	\N	convention,es2015	0	HTML	1576224526404	1576224526407	1	javascript
218	Two branches in a conditional structure should not have exactly the same implementation	S1871	S1871	javascript	<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<p>or </p>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doFirstThing();\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>	2	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	design,suspicious	0	HTML	1576224526411	1576224526457	1	javascript
219	"import" should be used to include external code	S3533	S3533	javascript	<p>Before ECMAScript 2015, module management had to be ad-hoc or provided by 3rd-party libraries such as Node.js, Webpack, or RequireJS. Fortunately,\nES2015, provides language-standard mechanisms for module management, <code>import</code> and <code>export</code>, and older usages should be\nconverted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// circle.js\nexports.area = function (r) {\n  return PI * r * r;\n};\n\n// foo.js\ndefine(["./cart", "./horse"], function(cart, horse) {  // Noncompliant\n  // ...\n});\n\n// bar.js\nconst circle = require('./circle.js');  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// circle.js\nlet area = function (r) {\n  return PI * r * r;\n}\nexport default area;\n\n// foo.js\nimport cart from "./cart.js";\nimport horse from "./horse.js";\n\n// bar.js\nimport circle from "./circle.js"\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	convention,es2015,obsolete	0	HTML	1576224526503	1576224526506	1	javascript
220	"arguments.caller" and "arguments.callee" should not be used	S2685	S2685	javascript	<p>Both <code>arguments.caller</code> and <code>arguments.callee</code> make quite a few optimizations impossible so they were deprecated in latest\nversions of JavaScript. In fact, EcmaScript 5 forbids the use of both in <code>strict</code> mode, according to the docs:</p>\n<blockquote>\n  Arguments objects for strict mode functions define non-configurable accessor properties named "caller" and "callee" which throw a TypeError\n  exception on access.\n</blockquote>\n<p>The same restriction applies to the function's <code>caller</code> and <code>arguments</code> properties in <code>strict</code> mode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction whoCalled() {\n   if (arguments.caller == null)   //Noncompliant\n      console.log('I was called from the global scope.');\n   else\n      console.log(arguments.caller + ' called me!');  // Noncompliant\n\n  console.log(whoCalled.caller);  // Noncompliant\n  console.log(whoCalled.arguments);  // Noncompliant\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	30min	\N	obsolete	0	HTML	1576224526511	1576224526514	1	javascript
221	Return values from functions without side effects should not be ignored	S2201	S2201	javascript	<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected. </p>\n<p>To prevent generating any false-positives, this rule triggers an issues only on a predefined list of known objects &amp; functions. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n'hello'.lastIndexOf('e'); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet char = 'hello'.lastIndexOf('e');\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/eoAyAQ">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	cert,misra	0	HTML	1576224526519	1576224526522	2	javascript
222	Shorthand object properties should be grouped at the beginning or end of an object declaration	S3499	S3499	javascript	<p>Grouping all the shorthand declarations together in an object makes the declaration as a whole more readable. This rule accepts shorthand\ndeclarations grouped at either the beginning or end of an object.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet obj1 = {\n  foo,\n  a: 1,\n  color,  // Noncompliant\n  b: 2,\n  judyGarland  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet obj1 = {\n  foo,\n  color,\n  judyGarland,\n  a: 1,\n  b: 2\n}\n</pre>\n<p>or </p>\n<pre>\nlet obj1 = {\n  a: 1,\n  b: 2,\n  foo,\n  color,\n  judyGarland\n}\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	1min	\N	convention,es2015	0	HTML	1576224526526	1576224526529	1	javascript
223	Jump statements should not be used unconditionally	S1751	S1751	javascript	<p>Having an unconditional <code>break</code>, <code>return</code> or <code>throw</code> in a loop renders it useless; the loop will only execute once\nand the loop structure itself is simply wasted keystrokes.</p>\n<p>Having an unconditional <code>continue</code> in a loop is itself wasted keystrokes.</p>\n<p>For these reasons, unconditional jump statements should never be used except for the final <code>return</code> in a function or method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  console.log("i is " + i);\n  break;  // loop only executes once\n}\n\nfor (i = 0; i &lt; 10; i++) {\n  console.log("i is " + i);\n  continue;  // this is meaningless; the loop would continue anyway\n}\n\nfor (i = 0; i &lt; 10; i++) {\n  console.log("i is " + i);\n  return;  // loop only executes once\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  console.log("i is " + i);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code. </li>\n  <li> MISRA C++:2008, 0-1-1 - A <em>project</em> shall not contain <em>unreachable code</em>. </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code. </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	cert,misra,unused	0	HTML	1576224526534	1576224526581	1	javascript
224	"NaN" should not be used in comparisons	S2688	S2688	javascript	<p><code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results,\nbut probably not the ones you want. </p>\n<p>Instead, the best way to see whether a variable is equal to <code>NaN</code> is to use <code>Number.isNaN()</code>, since ES2015, or (perhaps\ncounter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = NaN;\n\nif (a === NaN) {  // Noncompliant; always false\n  console.log("a is not a number");  // this is dead code\n}\nif (a !== NaN) { // Noncompliant; always true\n  console.log("a is not NaN"); // this statement is not necessarily true\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (Number.isNaN(a)) {\n  console.log("a is not a number");\n}\nif (!Number.isNaN(a)) {\n  console.log("a is not NaN");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/7AEqAQ">CERT, NUM07-J.</a> - Do not attempt comparisons with NaN </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	cert	0	HTML	1576224526627	1576224526630	2	javascript
225	"for" loop increment clauses should modify the loops' counters	S1994	S1994	javascript	<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) {  // Noncompliant\n  // ...\n  i++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++, j++) {\n  // ...\n}\n</pre>\n<p>Or</p>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n  j++;\n}\n</pre>	3	\N	READY	js	CONSTANT_ISSUE	\N	20min	\N	confusing	0	HTML	1576224526635	1576224526638	1	javascript
226	Cognitive Complexity of functions should not be too high	S3776	S3776	javascript	<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>\n</ul>	3	\N	READY	js	LINEAR_OFFSET	1min	5min	per complexity point over the threshold	brain-overload	0	HTML	1576224526642	1576224526645	1	javascript
227	Comma operator should not be used	S878	S878	javascript	<p>The comma operator takes two expressions, executes them from left to right and returns the result of the second one. Use of this operator is\ngenerally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ni = a += 2, a + b;  // What's the value of i ?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na +=  2;\ni = a + b;\n</pre>\n<h2>Exceptions</h2>\n<p>Use of comma operator is tolerated in initialization and increment expressions of <code>for</code> loops.</p>\n<pre>\nfor(i = 0, j = 5; i &lt; 6; i++, j++) { ... }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.10 - The comma operator shall not be used. </li>\n  <li> MISRA C++:2008, 5-18-1 - The comma operator shall not be used. </li>\n  <li> MISRA C:2012, 12.3 - The comma operator should not be used </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	misra	0	HTML	1576224526654	1576224526657	1	javascript
252	Variables should not be self-assigned	S1656	S1656	javascript	<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction setName(name) {\n    name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction setName(name) {\n    this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	3min	\N	cert	0	HTML	1576224527090	1576224527091	2	javascript
253	Lines should not be too long	LineLength	LineLength	javascript	<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>	2	\N	READY	js	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224527093	1576224527094	1	javascript
254	JavaScript parser failure	ParsingError	ParsingError	javascript	<p>When the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the\nnumber of files that do not parse but also to easily find out why they do not parse.</p>	2	\N	READY	js	CONSTANT_ISSUE	\N	30min	\N	suspicious	0	HTML	1576224527099	1576224527100	1	javascript
255	Variables should be declared before they are used	VariableDeclarationAfterUsage	VariableDeclarationAfterUsage	javascript	<p>Variables declared with <code>var</code> have the special property that regardless of where they're declared in a function they "float" to the top\nof the function and are available for use even before they're declared. That makes scoping confusing, especially for new coders. To keep confusion to\na minimum, <code>var</code> declarations should happen before the variables they declare are used for the first time.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 1;\n\nfunction fun(){\n  alert(x); // Noncompliant as x is declared later in the same scope\n  if(something) {\n    var x = 42; // Declaration in function scope (not block scope!) shadows global variable\n  }\n}\n\nfun(); // Unexpectedly alerts "undefined" instead of "1"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = 1;\n\nfunction fun() {\n  print(x);\n  if (something) {\n    x = 42;\n  }\n}\n\nfun(); // Print "1"\n</pre>	4	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	pitfall	0	HTML	1576224527102	1576224527103	1	javascript
231	Property names should not be duplicated within a class or object literal	DuplicatePropertyName	DuplicatePropertyName	javascript	<p>JavaScript allows duplicate property names in classes and object literals, but only the last instance of a duplicated name determines the actual\nvalue that will be used for it. Therefore, changing values of other occurrences of a duplicated name will have no effect and may cause\nmisunderstandings and bugs.</p>\n<p>Defining a <code>class</code> with a duplicated <code>constructor</code> will generate an error.</p>\n<p>Before ECMAScript 2015, using duplicate names will generate an error in JavaScript strict mode code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar data = {\n  "key": "value",\n  "1": "value",\n  "key": "value", // Noncompliant - duplicate of "key"\n  'key': "value", // Noncompliant - duplicate of "key"\n  key: "value", // Noncompliant - duplicate of "key"\n  \\u006bey: "value", // Noncompliant - duplicate of "key"\n  "\\u006bey": "value", // Noncompliant - duplicate of "key"\n  "\\x6bey": "value", // Noncompliant - duplicate of "key"\n  1: "value" // Noncompliant - duplicate of "1"\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar data = {\n  "key": "value",\n  "1": "value",\n  "key2": "value",\n  'key3': "value",\n  key4: "value",\n  \\u006bey5: "value",\n  "\\u006bey6": "value",\n  "\\x6bey7": "value",\n  1b: "value"\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224526683	1576224526728	2	javascript
232	"new" operators should be used with functions	S2999	S2999	javascript	<p>The <code>new</code> keyword should only be used with objects that define a constructor function. Use it with anything else, and you'll get a\n<code>TypeError</code> because there won't be a constructor function for the <code>new</code> keyword to invoke.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = 1;\n\nvar obj1 = new someClass;    // Noncompliant;\nvar obj2 = new MyClass();    // Noncompliant if considerJSDoc parameter set to true. Compliant when considerJSDoc=false\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n * @constructor\n */\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = function(){\n  this.prop = 1;\n}\n\nvar obj1 = new someClass;  // Compliant\nvar obj2 = new MyClass();  // Compliant regardless of considerJSDoc value\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224526772	1576224526773	2	javascript
233	"=+" should not be used instead of "+="	S2757	S2757	javascript	<p>The use of operators pairs (<code>=+</code> or <code>=-</code>) where the reversed, single operator was meant (<code>+=</code> or <code>-=</code>)\nwill compile and run, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code> and <code>=-</code> are used without any space between the two operators and when there is at least\none whitespace after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet target =-5;\nlet num = 3;\n\ntarget =- num;  // Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; // Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet target = -5;\nlet num = 3;\n\ntarget = -num;  // Compliant; intent to assign inverse value of num is clear\ntarget += num;\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224526775	1576224526776	2	javascript
234	The global "this" object should not be used	S2990	S2990	javascript	<p>When the keyword <code>this</code> is used outside of an object, it refers to the global <code>this</code> object, which is the same thing as the\n<code>window</code> object in a standard web page. Such uses could be confusing to maintainers. Instead, simply drop the <code>this</code>, or replace\nit with <code>window</code>; it will have the same effect and be more readable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nthis.foo = 1;   // Noncompliant\nconsole.log(this.foo); // Noncompliant\n\nfunction MyObj() {\n  this.foo = 1; // Compliant\n}\n\nMyObj.func1 = function() {\n  if (this.foo == 1) { // Compliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfoo = 1;\nconsole.log(foo);\n\nfunction MyObj() {\n  this.foo = 1;\n}\n\nMyObj.func1 = function() {\n  if (this.foo == 1) {\n    // ...\n  }\n}\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	confusing	0	HTML	1576224526777	1576224526778	1	javascript
235	Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression	S881	S881	javascript	<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwE">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/fYAyAQ">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/yQC7AQ">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	cert,misra	0	HTML	1576224526779	1576224526825	1	javascript
236	A "while" loop should be used instead of a "for" loop	S1264	S1264	javascript	<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a\n<code>while</code> loop should be used instead to increase readability. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224526871	1576224526874	1	javascript
237	Jump statements should not occur in "finally" blocks	S1143	S1143	javascript	<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and <code>continue</code> from a <code>finally</code> block overwrites similar\nstatements from the suspended <code>try</code> and <code>catch</code> blocks.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) would force\ncontrol flow to leave a <code>finally</code> block. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n    try {\n        return 1; // We expect 1 to be returned\n    } catch(err) {\n        return 2; // Or 2 in cases of error\n    } finally {\n        return 3; // Noncompliant: 3 is returned before 1, or 2, which we did not expect\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    try {\n        return 1; // We expect 1 to be returned\n    } catch(err) {\n        return 2; // Or 2 in cases of error\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/584.html">MITRE, CWE-584</a> - Return Inside Finally Block </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/mIEbAQ">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	30min	\N	cert,cwe,error-handling	0	HTML	1576224526878	1576224526890	2	javascript
238	"delete" should not be used on arrays	S2870	S2870	javascript	<p>The <code>delete</code> operator can be used to remove a property from any object. Arrays are objects, so the <code>delete</code> operator can be\nused here too, but if it is, a hole will be left in the array because the indexes/keys won't be shifted to reflect the deletion. </p>\n<p>The proper method for removing an element at a certain index would be:</p>\n<ul>\n  <li> <code>Array.prototype.splice</code> - add/remove elements from the array </li>\n  <li> <code>Array.prototype.pop</code> - add/remove elements from the end of the array </li>\n  <li> <code>Array.prototype.shift</code> - add/remove elements from the beginning of the array </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\ndelete myArray[2];  // Noncompliant. myArray =&gt; ['a', 'b', undefined, 'd']\nconsole.log(myArray[2]); // expected value was 'd' but output is undefined\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\n// removes 1 element from index 2\nremoved = myArray.splice(2, 1);  // myArray =&gt; ['a', 'b', 'd']\nconsole.log(myArray[2]); // outputs 'd'\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224526939	1576224526942	1	javascript
239	Calls should not be made to non-callable values	S2873	S2873	javascript	<p>The fact that JavaScript is not a strongly typed language allows developers a lot of freedom, but that freedom can be dangerous if you go too far\nwith it. </p>\n<p>Specifically, it is syntactically acceptable to invoke any expression as though its value were a function. But a <code>TypeError</code> may be\nraised if you do.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfoo = 1;\nfoo();   // Noncompliant; TypeError\n\nfoo = undefined;\nfoo();  // Noncompliant; TypeError\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224526946	1576224526949	2	javascript
240	Useless "if(true) {...}" and "if(false){...}" blocks should be removed	S1145	S1145	javascript	<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. </li>\n  <li> Some value was left unset. </li>\n  <li> Some logic is not doing what the programmer thought it did. </li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {  // Noncompliant\n  doSomething();\n}\n...\nif (false) {  // Noncompliant\n  doSomethingElse();\n}\n\nif (!options || options === true) { doThirdThing(); }  // Noncompliant; always true\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething();\n\ndoThirdThing();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:javascript:S2583} instead.</p>	2	\N	DEPRECATED	js	CONSTANT_ISSUE	\N	2min	\N	cwe,misra	0	HTML	1576224526954	1576224527005	2	javascript
241	Functions should not be called both with and without "new"	S3686	S3686	javascript	<p>Constructor functions, which create new object instances, must only be called with <code>new</code>. Non-constructor functions must not. Mixing\nthese two usages could lead to unexpected results at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction getNum() {\n  return 5;\n}\n\nfunction Num(numeric, alphabetic) {\n  this.numeric = numeric;\n  this.alphabetic = alphabetic;\n}\n\nvar myFirstNum = getNum();\nvar my2ndNum = new getNum();  // Noncompliant. An empty object is returned, NOT 5\n\nvar myNumObj1 = new Num();\nvar myNumObj2 = Num();  // Noncompliant. undefined is returned, NOT an object\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224527048	1576224527050	1	javascript
242	Parameters should be passed in the correct order	S2234	S2234	javascript	<p>When the names of arguments in a function call match the names of the function parameters, it contributes to clearer, more readable code. However,\nwhen the names match, but are passed in a different order than the function parameters, it indicates a mistake in the parameter order which will\nlikely lead to unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction divide(divisor, dividend) {\n  return divisor/dividend;\n}\n\nfunction doTheThing() {\n  var divisor = 15;\n  var dividend = 5;\n\n  var result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction divide(divisor, dividend) {\n  return divisor/dividend;\n}\n\nfunction doTheThing() {\n  var divisor = 15;\n  var dividend = 5;\n\n  var result = divide(divisor, dividend);\n  //...\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224527052	1576224527053	1	javascript
243	Redundant pairs of parentheses should be removed	Parentheses	Parentheses	javascript	<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet x = (y / 2 + 1);   //Compliant even if those parenthesis are useless for the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	1min	\N	confusing	0	HTML	1576224527055	1576224527056	1	javascript
244	"switch" statements should have at least 3 "case" clauses	S1301	S1301	javascript	<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>\n  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>\n  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>\n</ul>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	bad-practice,misra	0	HTML	1576224527058	1576224527060	1	javascript
245	Files should not have too many lines	S104	S104	javascript	<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>	2	\N	READY	js	CONSTANT_ISSUE	\N	1h	\N	brain-overload	0	HTML	1576224527061	1576224527063	1	javascript
246	Local storage should not be used	S3271	S3271	javascript	<p>Session storage and local storage are HTML 5 features which allow developers to easily store megabytes of data client-side, as opposed to the 4Kb\ncookies can accommodate. While useful to speed applications up on the client side, it can be dangerous to store sensitive information this way because\nthe data is not encrypted by default and any script on the page may access it.</p>\n<p>This rule raises an issue when the <code>localStorage</code> and <code>sessionStorage</code> API's are used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlocalStorage.setItem("login", login); // Noncompliant\nsessionStorage.setItem("sessionId", sessionId); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://dl.packetstormsecurity.net/papers/attack/HTML5AttackVectors_RafayBaloch_UPDATED.pdf">Packet Storm Security</a> - HTML 5 Modern\n  Day Attack And Defence Vectors </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n</ul>	3	\N	READY	js	LINEAR_OFFSET	5min	1h	per additional use of the api	owasp-a6	0	HTML	1576224527068	1576224527070	3	javascript
247	Non-empty statements should change control flow or have at least one side-effect	S905	S905	javascript	<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does\nnot result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na == 1; // Noncompliant; was assignment intended?\nvar msg = "Hello, "\n  "World!"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/482">MITRE, CWE-482</a> - Comparing instead of Assigning </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.\n  </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	cert,cwe,misra,unused	0	HTML	1576224527073	1576224527075	2	javascript
248	Console logging should not be used	S2228	S2228	javascript	<p>Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you\nrun the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconsole.log(password_entered); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n</ul>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	owasp-a6,user-experience	0	HTML	1576224527077	1576224527078	3	javascript
249	Default export names and file names should match	S3317	S3317	javascript	<p>By convention, a file that exports only one class, function, or constant should be named for that class, function or constant. Anything else may\nconfuse maintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// file path: myclass.js  -- Noncompliant\nclass MyClass {\n  // ...\n}\nexport default MyClass;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// file path: MyClass.js\nclass MyClass {\n  // ...\n}\nexport default MyClass;\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	confusing,convention,es2015	0	HTML	1576224527080	1576224527081	1	javascript
250	"Symbol" should not be used as a constructor	S3834	S3834	javascript	<p><code>Symbol</code> is a primitive type introduced in ECMAScript2015. Its instances are mainly used as unique property keys.</p>\n<p>An instance can only be created by using <code>Symbol</code> as a function. Using <code>Symbol</code> with the <code>new</code> operator will raise\na <code>TypeError</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst sym = new Symbol("foo");   // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst sym = Symbol("foo");\n</pre>	3	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	es2015	0	HTML	1576224527084	1576224527085	2	javascript
251	Loops should not contain more than a single "break" or "continue" statement	TooManyBreakOrContinueInLoop	TooManyBreakOrContinueInLoop	javascript	<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 1; i &lt;= 10; i++) {  // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  alert("i = " + i);\n}\n</pre>	1	\N	READY	js	LINEAR	20min	\N	per extra ["break" or "continue"|"CONTINUE", "EXIT", "CHECK"] statement	brain-overload	0	HTML	1576224527087	1576224527088	1	javascript
256	"eval" and "arguments" should not be bound or assigned	BoundOrAssignedEvalOrArguments	BoundOrAssignedEvalOrArguments	javascript	<p><code>eval</code> is used to evaluate a string as JavaScript code, and <code>arguments</code> is used to access function arguments through indexed\nproperties. As a consequence, <code>eval</code> and <code>arguments</code> should not be bound or assigned, because doing so would overwrite the\noriginal definitions of those two reserved words. </p>\n<p>What's more, using either of those two names to assign or bind will generate an error in JavaScript strict mode code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\neval = 17; // Noncompliant\narguments++; // Noncompliant\n++eval; // Noncompliant\nvar obj = { set p(arguments) { } }; // Noncompliant\nvar eval; // Noncompliant\ntry { } catch (arguments) { } // Noncompliant\nfunction x(eval) { } // Noncompliant\nfunction arguments() { } // Noncompliant\nvar y = function eval() { }; // Noncompliant\nvar f = new Function("arguments", "return 17;"); // Noncompliant\n\nfunction fun() {\n  if (arguments.length == 0) { // Compliant\n    // do something\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nresult = 17;\nargs++;\n++result;\nvar obj = { set p(arg) { } };\nvar result;\ntry { } catch (args) { }\nfunction x(arg) { }\nfunction args() { }\nvar y = function fun() { };\nvar f = new Function("args", "return 17;");\n\nfunction fun() {\n  if (arguments.length == 0) {\n    // do something\n  }\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	pitfall	0	HTML	1576224527105	1576224527148	2	javascript
257	Internet Explorer's conditional comments should not be used	ConditionalComment	ConditionalComment	javascript	<p>Internet Explorer offers a way to change the JavaScript code at runtime using conditional comments (activated by a @cc_on statement found in a\ncomment). Using this preprocessing feature decreases readability and maintainability, and can hinder automated tools. What's more, it is specific to\nInternet Explorer and won't work for other browsers.</p>\n<p>Most of the time, using those conditional comments can be easily avoided with some refactoring - using modern cross-browsers JavaScript frameworks\nand libraries.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/*@cc_on\n  @if (@_jscript_version &gt;= 5.5)\n    document.write("You are using IE5.5 or newer");\n  @else\n    document.write("You are using IE5 or older");\n  @end\n  @*/\n</pre>	3	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	cross-browser	0	HTML	1576224527195	1576224527199	1	javascript
258	The names of model properties should not contain spaces	S2508	S2508	javascript	<p>When using the Backbone.js framework, the names of model attributes should not contain spaces. This is because the Events object accepts\nspace-delimited lists of events, so an attributes with spaces in the names could be misinterpreted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPerson = Backbone.Model.extend({\n        defaults: {\n            'first name': 'Bob',      // Noncompliant\n            'birth date': new Date()  // Noncompliant\n        },\n    });\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPerson = Backbone.Model.extend({\n        defaults: {\n            firstName: 'Bob',\n            birthDate: new Date()\n        },\n    });\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	backbone	0	HTML	1576224527204	1576224527208	2	javascript
315	Using possibly undefined loop variable	W0631	W0631	Pylint	Used when an loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527633	1576224527634	1	python
316	Task marker found	W0511	W0511	Pylint	Used when a warning note as FIXME or XXX is detected.	1	\N	READY	py	LINEAR	1h	\N	\N	\N	0	HTML	1576224527635	1576224527636	1	python
317	Possible unbalanced tuple unpacking	W0632	W0632	Pylint	Used when there is an unbalanced tuple unpacking in assignment.\n        <p>This rule was added in Pylint 1.1.0.</p>	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527637	1576224527638	1	python
318	Source line cannot be decoded using the specified source file encoding	W0512	W0512	Pylint	Used when a source line cannot be decoded using the specified source file encoding.\n        This message can't be emitted when using Python >= 3.0.\n        <p>This rule was added in Pylint 1.0.0.</p>	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527639	1576224527640	1	python
319	Attempting to unpack a non-sequence	W0633	W0633	Pylint	Used when something which is not a sequence is used in an unpack assignment.\n        <p>This rule was added in Pylint 1.1.0.</p>	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527641	1576224527642	1	python
320	Unused import from wildcard import	W0614	W0614	Pylint	Used when an imported module or variable is not used from a 'from X import *'style import.	1	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224527643	1576224527643	1	python
321	Missing docstring	C0111	C0111	Pylint	Used when a module, function, class or method has no docstring. Some special methods like __init__ doesn't necessary require a docstring.\n      <p>This rule is deprecated, use {rule:python:S1720} instead.</p>	1	\N	DEPRECATED	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527644	1576224527652	1	python
322	Empty docstring	C0112	C0112	Pylint	Used when a module, function, class or method has an empty docstring (it would be too easy ;).\n      <p>This rule is deprecated, use {rule:python:S1720} instead.</p>	1	\N	DEPRECATED	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527654	1576224527655	1	python
323	__init__ method is a generator	E0100	E0100	Pylint	Used when the special class method __init__ is turned\n               into a generator by a yield in its body.\n               <p>The __init__() method is required to return nothing. Python 2.7 and 3.x\n               raise a TypeError when __init__() is called and executes a yield\n               statement. Pylint reports this error without depending on the actual\n               invocation.</p>\n               <p>This rule is deprecated, use {rule:python:S2734} instead.</p>	2	\N	DEPRECATED	py	LINEAR	30min	\N	\N	\N	0	HTML	1576224527656	1576224527657	1	python
324	Implemented interface must be a class	E0221	E0221	Pylint	Used when a class claims to implement an interface which is not a class.	2	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527658	1576224527659	1	python
325	Explicit return in __init__	E0101	E0101	Pylint	Used when the special class method __init__ has an\n               explicit return value.\n               <p>The __init__() method is required to return\n               nothing. Python raises a TypeError when __init__() is\n               called and executes a return statement with a value other than\n               None. Pylint reports this error without depending on the actual\n               invocation.</p>\n               <p>This rule is deprecated, use {rule:python:S2734} instead.</p>	2	\N	DEPRECATED	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527660	1576224527661	1	python
326	Missing method from interface	E0222	E0222	Pylint	Used when a method declared in an interface is missing from a class implementing this interface.	2	\N	READY	py	LINEAR	30min	\N	\N	\N	0	HTML	1576224527662	1576224527662	1	python
327	Suspicious argument in lstrip/rstrip	E1310	E1310	Pylint	The argument to a str.{l,r}strip call contains a duplicate character.\n      <p>This rule was added in Pylint 0.28.0.</p>	1	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527664	1576224527664	1	python
259	Conditionally executed blocks should be reachable	S2583	S2583	javascript	<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never\nbe used in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = false;\nif (a) { // Noncompliant\n  doSomething(); // never executed\n}\n\nif (!a || b) { // Noncompliant; "!a" is always "true", "b" is never evaluated\n  doSomething();\n} else {\n  doSomethingElse(); // never executed\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	15min	\N	cert,cwe,misra,pitfall,unused	0	HTML	1576224527213	1576224527218	2	javascript
260	Loops should not be infinite	S2189	S2189	javascript	<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;;) {  // Noncompliant; end condition omitted\n  // ...\n}\n\nvar j = 0;\nwhile (true) { // Noncompliant; constant end condition\n  j++;\n}\n\nvar k;\nvar b = true;\nwhile (b) { // Noncompliant; constant end condition\n  k++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\nwhile (true) { // break will potentially allow leaving the loop\n  if (someCondition) {\n    break;\n  }\n}\n\nvar k;\nvar b = true;\nwhile (b) {\n  k++;\n  b = k &lt; 10;\n}\n\nouter:\nwhile(true) {\n  while(true) {\n    break outer;\n  }\n}\n\n</pre>\n\n<h2>Known Limitations</h2>\n<ul>\n    <li>False positives: when <code>yield</code> is used - <a\n            href="https://jira.sonarsource.com/browse/SONARJS-877">SONARJS-877</a>.</li>\n    <li>False positives: when an exception is raised by a function invoked within the loop.</li>\n    <li>False negatives: when a loop condition is based on an element of an array or object.</li>\n</ul>\n\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/PYHfAw">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>\n</ul>	4	\N	READY	js	CONSTANT_ISSUE	\N	15min	\N	cert	0	HTML	1576224527225	1576224527271	2	javascript
261	Track uses of "FIXME" tags	S1134	S1134	javascript	<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction divide(numerator, denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>	2	\N	READY	js	\N	\N	\N	\N	cwe	0	HTML	1576224527319	1576224527319	1	javascript
262	Callbacks of array methods should have return statements	S3796	S3796	javascript	<p>Arrays in JavaScript have several methods for filtering, mapping or folding that require a callback. Not having a return statement in such a\ncallback function is most likely a mistake.</p>\n<p>This rule applies for the following methods of an array:</p>\n<ul>\n  <li> <code>Array.from</code> </li>\n  <li> <code>Array.prototype.every</code> </li>\n  <li> <code>Array.prototype.filter</code> </li>\n  <li> <code>Array.prototype.find</code> </li>\n  <li> <code>Array.prototype.findIndex</code> </li>\n  <li> <code>Array.prototype.map</code> </li>\n  <li> <code>Array.prototype.reduce</code> </li>\n  <li> <code>Array.prototype.reduceRight</code> </li>\n  <li> <code>Array.prototype.some</code> </li>\n  <li> <code>Array.prototype.sort</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar merged = arr.reduce(function(a, b) {\n  a.concat(b);\n}); // Noncompliant: No return statement\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar merged = arr.reduce(function(a, b) {\n  return a.concat(b);\n});\n</pre>	4	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224527325	1576224527328	2	javascript
263	Track uses of "TODO" tags	S1135	S1135	javascript	<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething() {\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>	0	\N	READY	js	\N	\N	\N	\N	cwe	0	HTML	1576224527333	1576224527333	1	javascript
264	Destructuring patterns should not be empty	S3799	S3799	javascript	<p>Destructuring is a convenient way of extracting multiple values from data stored in (possibly nested) objects and arrays. However, it is possible\nto create an empty pattern that has no effect. When empty curly braces or brackets are used to the right of a property name most of the time the\nintent was to use a default value instead.</p>\n<p>This rule raises an issue when empty destructuring pattern is used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar {a: {}, b} = myObj; // Noncompliant\nfunction foo({first: [], second}) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar {a = {}, b} = myObj;\nfunction foo({first = [], second}) {\n  // ...\n}\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224527338	1576224527341	2	javascript
265	Files should contain an empty newline at the end	MissingNewlineAtEndOfFile	MissingNewlineAtEndOfFile	javascript	<p>Some tools work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>	1	\N	READY	js	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224527346	1576224527348	1	javascript
266	Boolean expressions should not be gratuitous	S2589	S2589	javascript	<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; "a" is always "true"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; "!a" is always "false"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/489">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	js	CONSTANT_ISSUE	\N	10min	\N	cert,cwe,misra,redundant	0	HTML	1576224527351	1576224527396	1	javascript
267	Variables and functions should not be declared in the global scope	S3798	S3798	javascript	<p>Any variable or function declared in the global scope implicitly becomes attached to the global object (the <code>window</code> object in a browser\nenvironment). To make it explicit this variable or function should be a property of <code>window</code>. When it is meant to be used just locally, it\nshould be declared with the <code>const</code> or <code>let</code> keywords (since ECMAScript 2015) or within an Immediately-Invoked Function\nExpression (IIFE).</p>\n<p>This rule should not be activated when modules are used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myVar = 42;       // Noncompliant\nfunction myFunc() { } // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwindow.myVar = 42;\nwindow.myFunc = function() { };\n</pre>\n<p>or</p>\n<pre>\nlet myVar = 42;\nlet myFunc = function() { }\n</pre>\n<p>or </p>\n<pre>\n// IIFE\n(function() {\n  var myVar = 42;\n  function myFunc() { }\n})();\n</pre>	2	\N	READY	js	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224527441	1576224527442	1	javascript
268	Branches should have sufficient coverage by tests	InsufficientBranchCoverage	\N	common-ts	An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.	2	\N	READY	ts	LINEAR	5min	\N	number of uncovered conditions	bad-practice	0	HTML	1576224527452	1576224527500	1	\N
269	Lines should have sufficient coverage by tests	InsufficientLineCoverage	\N	common-ts	An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.	2	\N	READY	ts	LINEAR	2min	\N	number of lines under the coverage threshold	bad-practice	0	HTML	1576224527507	1576224527509	1	\N
270	Source files should have a sufficient density of comment lines	InsufficientCommentDensity	\N	common-ts	An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.	2	\N	READY	ts	LINEAR	2min	\N	number of lines required to meet minimum density	convention	0	HTML	1576224527513	1576224527514	1	\N
271	Source files should not have any duplicated blocks	DuplicatedBlocks	\N	common-ts	An issue is created on a file as soon as there is at least one block of duplicated code on this file	2	\N	READY	ts	LINEAR_OFFSET	10min	10min	number of duplicate blocks	pitfall	0	HTML	1576224527519	1576224527520	1	\N
272	Skipped unit tests should be either removed or fixed	SkippedUnitTests	\N	common-ts	Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.	2	\N	READY	ts	LINEAR	10min	\N	number of skipped tests	pitfall	0	HTML	1576224527522	1576224527524	1	\N
273	Failed unit tests should be fixed	FailedUnitTests	\N	common-ts	Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.	2	\N	READY	ts	LINEAR	10min	\N	number of failed tests	\N	0	HTML	1576224527526	1576224527527	2	\N
274	Module imports itself	W0406	W0406	Pylint	Used when a module is importing itself.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527531	1576224527534	1	python
275	Unsupported format character	E9900	E1300	Pylint	Used when a unsupported format character is used in a format string.	2	\N	READY	py	LINEAR	3min	\N	\N	\N	0	HTML	1576224527537	1576224527538	1	python
276	Bad option value	E0012	E0012	Pylint	Used when a bad value for an inline option is encountered.\n               <p>The option exists but its value is not valid. The options can be\n               specified in the Pylint configuration file and can be overridden in\n               the Pylint command line.</p>	2	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224527540	1576224527540	1	python
277	Calling of not callable	E1102	E1102	Pylint	Used when an object being called has been inferred to a non callable object.	2	\N	READY	py	LINEAR	3min	\N	\N	\N	0	HTML	1576224527541	1576224527542	1	python
278	Missing required attribute	C0121	C0121	Pylint	Used when an attribute required for modules is missing.	1	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527544	1576224527545	1	python
279	Access of nonexistent member	E1101	E1101	Pylint	Used when a variable is accessed for an nonexistent member.	2	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527547	1576224527548	1	python
280	Unrecognized file option	E0011	E0011	Pylint	Used when an unknown inline option is encountered.\n               <p>Note that options can be specified in the\n               configuration file and can be overridden on the command line.</p>	2	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224527549	1576224527549	1	python
281	Accessing nonexistent member (type information incomplete)	E1103	E1103	Pylint	Used when a variable is accessed for an nonexistent member, but Pylint was not able to interpret all possible types of this variable.	2	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527551	1576224527552	1	python
282	__future__ import is not the first non docstring statement	W0410	W0410	Pylint	Python 2.5 and greater require __future__ import to be the first non docstring statement in the module.	1	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527554	1576224527555	1	python
283	Invalid mode for open	W1501	W1501	Pylint	Python supports: r, w, a modes with b, +, and U options.\n        See http://docs.python.org/2/library/functions.html#open\n        <p>This rule was added in Pylint 1.0.0.</p>	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527557	1576224527558	1	python
284	Syntax error	E0001	E0001	Pylint	Used when a syntax error is raised for a module.	2	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527560	1576224527562	1	python
285	Else clause on loop without a break statement	W0120	W0120	Pylint	Loops should only have an else clause if they can exit early with a break statement,\n        otherwise the statements under else should be on the same scope as the loop itself.\n        <p>This rule was added in Pylint 0.28.0.</p>	1	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527564	1576224527565	1	python
286	Use raise ErrorClass(args) instead of raise ErrorClass, args.	W0121	W0121	Pylint	Used when the alternate raise syntax 'raise foo, bar' is used instead of 'raise foo(bar)'.\n        This message can't be emitted when using Python >= 3.0.\n        <p>This rule was added in Pylint 1.0.0.</p>	1	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527568	1576224527570	1	python
287	Use of the exec statement	W0122	W0122	Pylint	Used when you use the "exec" statement, to discourage its usage. That doesn't mean you can not use it!\n               <p>This rule is deprecated, use {rule:python:ExecStatementUsage} instead.</p>	1	\N	DEPRECATED	py	LINEAR	30min	\N	\N	\N	0	HTML	1576224527572	1576224527573	1	python
288	Format detection error	F0321	F0321	Pylint	Used when an unexpected error occurred in bad format\n               detection. Please report the error if it occurs.	2	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224527574	1576224527574	1	python
289	Use of eval	W0123	W0123	Pylint	Used when you use the "eval" function, to discourage its usage.\n        Consider using `ast.literal_eval` for safely evaluating\n        strings containing Python expressions from untrusted sources.\n        <p>This rule was added in Pylint 1.2.0.</p>	1	\N	READY	py	LINEAR	30min	\N	\N	\N	0	HTML	1576224527576	1576224527577	1	python
290	Unable to check methods signature	F0202	F0202	Pylint	Used when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don't make sense of it.	2	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224527578	1576224527578	1	python
291	Wildcard import	W0401	W0401	Pylint	Used when `from module import *` is detected.	1	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224527580	1576224527580	1	python
292	Uses of a deprecated module	W0402	W0402	Pylint	Used a module marked as deprecated is imported.	1	\N	READY	py	LINEAR	1d	\N	\N	\N	0	HTML	1576224527583	1576224527585	1	python
293	Relative import	W0403	W0403	Pylint	Used when an import relative to the package directory is detected.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527587	1576224527589	1	python
294	Reimport	W0404	W0404	Pylint	Used when a module is reimported multiple times.	1	\N	READY	py	LINEAR	1min	\N	\N	\N	0	HTML	1576224527590	1576224527591	1	python
295	Black listed name	C0102	C0102	Pylint	Used when the name is listed in the black list\n               (unauthorized names).\n               <p>Pylint can be customized to help enforce coding\n               guidelines that discourage or forbid use of certain names for\n               variables, functions, etc. These names are specified with the\n               bad-names option. This message is raised whenever a name is in the\n               list of names defined with the bad-names option.</p>	1	\N	READY	py	LINEAR	1min	\N	\N	\N	0	HTML	1576224527592	1576224527593	1	python
296	Lambda may not be necessary	W0108	W0108	Pylint	Used when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda.	1	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527594	1576224527595	1	python
297	Invalid name	C0103	C0103	Pylint	Used when the name doesn't match the regular expression associated to its type (constant, variable, class...).\n      <p>This rule is deprecated, use {rule:python:S116}, {rule:python:S117}, {rule:python:S101},\n      {rule:python:S100}, {rule:python:S1542}, {rule:python:S1578} instead.</p>	1	\N	DEPRECATED	py	LINEAR	1min	\N	\N	\N	0	HTML	1576224527596	1576224527596	1	python
298	Duplicate key in dictionary	W0109	W0109	Pylint	Used when a dictionary expression binds the same key multiple times.	1	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527597	1576224527598	1	python
299	Logging format string ends in middle of conversion specifier	E1201	E1201	Pylint	Used when a logging statement format string terminates\n               before the end of a conversion specifier.	2	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527599	1576224527600	1	python
300	The first reversed() argument is not a sequence	E0111	E0111	Pylint	Used when the first argument to reversed() builtin isn't a sequence\n      (does not implement __reversed__, nor __getitem__ and __len__\n      <p>This rule was added in Pylint 1.2.0.</p>	1	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527602	1576224527602	1	python
301	Unsupported logging format character	E1200	E1200	Pylint	Used when an unsupported format character is used in a\n               logging statement format string.	2	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527604	1576224527605	1	python
302	Too many arguments for logging format string	E1205	E1205	Pylint	Used when a logging format string is given too few arguments.	2	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527606	1576224527606	1	python
303	Invalid object in __slots__, must contain only non empty strings	E0236	E0236	Pylint	Used when an invalid (non-string) object occurs in __slots__.\n        <p>This rule was added in Pylint 1.2.0.</p>	1	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527608	1576224527609	1	python
304	__exit__ must accept 3 arguments: type, value, traceback	E0235	E0235	Pylint	Used when the __exit__ special method, belonging to a context manager, does not accept 3 arguments (type, value, traceback).\n        <p>This rule was added in Pylint 1.1.0.</p>\n        <p>This rule is deprecated, use {rule:python:S2733} instead.</p>	1	\N	DEPRECATED	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527610	1576224527610	1	python
305	Invalid __slots__ object	E0238	E0238	Pylint	Used when an invalid __slots__ is found in class. Only a string, an iterable or a sequence is permitted.\n        <p>This rule was added in Pylint 1.2.0.</p>	1	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527612	1576224527612	1	python
306	Method could be a function	R0201	R0201	Pylint	Used when a method doesn't use its bound instance, and\n               so could be written as a function.\n               <p>If the class method does not reference any of the class\n               attributes it may be more clear to define the method as a static\n               function instead.</p>\n         <p>This rule is deprecated, use {rule:python:S2325} instead.</p>	1	\N	DEPRECATED	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527613	1576224527614	1	python
307	Not enough arguments for logging format string	E1206	E1206	Pylint	Used when a logging format string is given too many arguments.	2	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527616	1576224527617	1	python
308	__init__ method from base class is not called	W0231	W0231	Pylint	Used when an ancestor class method has an __init__ method which is not called by a derived class.	1	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527618	1576224527619	1	python
309	map/filter on lambda could be replaced by comprehension	W0110	W0110	Pylint	Used when a lambda is the first argument to "map" or "filter".\n        It could be clearer as a list comprehension or generator expression. This message can't be emitted when using Python >= 3.0.\n        <p>This rule was added in Pylint 0.27.0.</p>	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527620	1576224527621	1	python
310	Assert called on a 2-uple	W0199	W0199	Pylint	A call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is. Did you mean 'assert x,y'?	1	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527623	1576224527623	1	python
311	Class has no __init__ method	W0232	W0232	Pylint	Used when a class has no __init__ method, neither its parent classes.	1	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527625	1576224527625	1	python
312	Specify string format arguments as logging function parameters	W1201	W1201	Pylint	Used when a logging statement has a call form of\n               "logging.<loggingmethod>(format_string % (format_args...))". Such\n               calls should leave string interpolation to the logging method itself\n               and be written "logging.<loggingmethod>(format_string,\n               format_args...)" so that the program may avoid incurring the cost of\n               the interpolation in those cases in which no message will be\n               logged. For more, see http://www.python.org/dev/peps/pep-0282/.	1	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527626	1576224527627	1	python
313	__init__ method from a non direct base class is called	W0233	W0233	Pylint	Used when an __init__ method is called on a class which is not in the direct ancestors for the analysed class.	1	\N	READY	py	LINEAR	2h	\N	\N	\N	0	HTML	1576224527628	1576224527629	1	python
314	__iter__ returns non-iterator	W0234	W0234	Pylint	Used when an __iter__ method returns something which is not an iterable (i.e. has no `next` method).\n        <p>This rule was added in Pylint 1.1.0.</p>	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527630	1576224527631	1	python
431	Statement in finally block may swallow exception	W0150	W0150	Pylint	Used when a break or a return statement is found inside the finally clause of a try...finally block: the exceptions raised in the try clause will be silently swallowed instead of being re-raised.	1	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527851	1576224527852	1	python
432	Use of "property" on an old style class	W1001	W1001	Pylint	Used when Pylint detects the use of the builtin "property" on an old style class while this is relying on new style classes features.	1	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527853	1576224527853	1	python
433	Bad indentation	W0311	W0311	Pylint	Used when an unexpected number of indentation's tabulations or spaces has been found.	1	\N	READY	py	LINEAR	1min	\N	\N	\N	0	HTML	1576224527854	1576224527854	1	python
434	Anomalous backslash escape	W1401	W1401	Pylint	Used when a backslash is in a literal string but not as an escape.\n    <p>This rule was added in Pylint 0.26.0.</p>\n    <p>This rule is deprecated, use {rule:python:S1717} instead.</p>	1	\N	DEPRECATED	py	\N	\N	\N	\N	\N	0	HTML	1576224527855	1576224527855	1	python
435	Mixed tabs/spaces indentation	W0312	W0312	Pylint	Used when there are some mixed tabs and spaces in a\n               module.\n               <p>As indentation is part of Python's syntax,\n               inconsistencies in its usage are usually considered a\n               major issue.</p>	2	\N	READY	py	LINEAR	1min	\N	\N	\N	0	HTML	1576224527857	1576224527857	1	python
436	Exception doesn't inherit from standard "Exception" class	W0710	W0710	Pylint	Used when a custom exception class is raised but doesn't inherit from the builtin "Exception" class.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527858	1576224527858	1	python
437	Anomalous Unicode escape in byte string	W1402	W1402	Pylint	Used when an escape like u is encountered in a byte string where it has no effect.\n    <p>This rule was added in Pylint 0.26.0.</p>	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527859	1576224527860	1	python
438	Exception to catch is the result of a binary operation	W0711	W0711	Pylint	Used when the exception to catch is of the form "except A or B:". If intending to catch multiple, rewrite as "except (A, B):"	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527860	1576224527861	1	python
439	Implicit unpacking of exceptions is not supported in Python 3	W0712	W0712	Pylint	Python3 will not allow implicit unpacking of exceptions in except clauses.\n        See http://www.python.org/dev/peps/pep-3110/ This message\n        can't be emitted when using Python >= 3.0.\n        <p>This rule was added in Pylint 1.0.0.</p>	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527861	1576224529353	1	python
440	Old-style class defined	C1001	C1001	Pylint	<p>Used when a class is defined that does not inherit from another class and does not inherit explicitly from “object”.\n      This message can’t be emitted when using Python >= 3.0.</p>\n      <p>This rule was added in Pylint 1.0.0.</p>\n      <p>This rule is deprecated, use {rule:python:S1722} instead.</p>	1	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224529355	1576224529357	1	python
441	Assigning to function call which doesn't return	E1111	E1111	Pylint	Used when an assignment is done on a function call but the inferred function doesn't return anything.	2	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224529359	1576224529360	1	python
442	Raising only allowed for classes, instances or strings	E0702	E0702	Pylint	Used when something which is neither a class, an instance or a string is raised (i.e. a 'TypeError' will be raised).	2	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224529363	1576224529364	1	python
443	Bad except clauses order	E0701	E0701	Pylint	Used when except clauses are not in the correct order (from the more specific to the more generic). If you don't fix the order, some exceptions may not be catched by the most specific handler.	2	\N	READY	py	LINEAR	30min	\N	\N	\N	0	HTML	1576224529366	1576224529367	1	python
444	Ignoring entire file	I0013	I0013	Pylint	Used to inform that the file will not be checked.	0	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224529370	1576224529370	1	python
445	Locally enabling message	I0012	I0012	Pylint	Used when an inline option enables a message or a messages category.	0	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224529372	1576224529372	1	python
328	Return outside function	E0104	E0104	Pylint	Used when a "return" statement is found outside a function or method.\n      <p>This rule is deprecated, use {rule:python:S2711} instead.</p>	2	\N	DEPRECATED	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527665	1576224527666	1	python
329	Yield outside function	E0105	E0105	Pylint	Used when a "yield" statement is found outside a function or method.\n      <p>This rule is deprecated, use {rule:python:S2711} instead.</p>	2	\N	DEPRECATED	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527668	1576224527669	1	python
330	Non-ASCII characters found but no encoding specified (PEP 263)	E0501	E0501	Pylint	Used when some non-ASCII characters are detected but no\n      encoding is specified, as stated in the PEP 263.	2	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527670	1576224527670	1	python
331	Redefined function/class/method	E0102	E0102	Pylint	Used when a function / class / method is redefined.	2	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527671	1576224527672	1	python
332	Usage of 'break' or 'continue' outside of a loop	E0103	E0103	Pylint	Used when break or continue keywords are used outside a loop.\n      <p>This rule is deprecated, use {rule:python:S1716} instead.</p>	2	\N	DEPRECATED	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527674	1576224527674	1	python
333	Duplicate argument name in function definition	E0108	E0108	Pylint	Duplicate argument names in function definitions are syntax errors.\n        <p>This rule was added in Pylint 0.28.0.</p>	1	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527676	1576224527677	1	python
334	Missing argument to reversed()	E0109	E0109	Pylint	Used when reversed() builtin didn't receive an argument.	1	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527678	1576224527679	1	python
335	Return with argument inside generator	E0106	E0106	Pylint	Used when a "return" statement with an argument is found outside in a generator function or method (e.g. with some "yield" statements).\n      <p>This rule is deprecated, use {rule:python:S2712} instead.</p>	2	\N	DEPRECATED	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527680	1576224527681	1	python
336	Wrong encoding specified	E0502	E0502	Pylint	Used when a known encoding is specified but the file\n      doesn't seem to be actually in this encoding.	2	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527682	1576224527683	1	python
337	Use of a non-existent operator	E0107	E0107	Pylint	Used when you attempt to use the C-style pre-increment or pre-decrement operator -- and ++, which dont exist in Python.\n               <p>This rule is deprecated, use {rule:python:PreIncrementDecrement} instead.</p>	2	\N	DEPRECATED	py	LINEAR	3min	\N	\N	\N	0	HTML	1576224527684	1576224527685	1	python
338	Unknown encoding specified	E0503	E0503	Pylint	Used when an encoding is specified, but it's unknown to Python.	2	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527687	1576224527688	1	python
339	Arguments number discrepancy	W0221	W0221	Pylint	Used when a method has a different number of arguments than in the implemented interface or in an overridden method.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527689	1576224527690	1	python
340	Unreachable code	W0101	W0101	Pylint	Used when there is some code behind a "return" or "raise" statement, which will never be accessed.\n      <p>This rule is deprecated, use {rule:python:S1763} instead.</p>	1	\N	DEPRECATED	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527691	1576224527692	1	python
341	Signature discrepancy	W0222	W0222	Pylint	Used when a method signature is different than in the implemented interface or in an overridden method.	1	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527693	1576224527694	1	python
342	Dangerous default value as argument	W0102	W0102	Pylint	Used when a mutable value as list or dictionary is\n               detected in a default value for an argument.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527695	1576224527696	1	python
343	Abstract method is not overridden	W0223	W0223	Pylint	Used when an abstract method (i.e. raise NotImplementedError) is not overridden in concrete class.	1	\N	READY	py	LINEAR	1h	\N	\N	\N	0	HTML	1576224527697	1576224527698	1	python
344	Statement seems to have no effect	W0104	W0104	Pylint	Used when a statement doesn't have (or at least seems to) any effect.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527699	1576224527699	1	python
345	Redefining name from outer scope	W0621	W0621	Pylint	Used when a variable's name hides a name defined in the outer scope.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527700	1576224527701	1	python
346	String statement has no effect	W0105	W0105	Pylint	Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you're using those strings as documentation, instead of comments.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527702	1576224527703	1	python
347	Redefining built-in	W0622	W0622	Pylint	Used when a variable or function override a built-in.	1	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527704	1576224527704	1	python
348	Expression is assigned to nothing	W0106	W0106	Pylint	Used when an expression that is not a function call is assigned to nothing. Probably something else was intended.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527705	1576224527706	1	python
349	Redefining name in exception handler	W0623	W0623	Pylint	Used when an exception handler assigns the exception to an existing name.	1	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527707	1576224527708	1	python
350	Unnecessary pass statement	W0107	W0107	Pylint	Used when a "pass" statement that can be avoided is encountered.\n      <p>This rule is deprecated, use {rule:python:S2772} instead.</p>	1	\N	DEPRECATED	py	LINEAR	1min	\N	\N	\N	0	HTML	1576224527709	1576224527709	1	python
351	Operator not preceded by a space	C0322	C0322	Pylint	Used when one of the following operator (!= | <= | == | >= | < | > | = | \\+= |-= | \\*= | /= | %) is not preceded by a space.	1	\N	READY	py	LINEAR	1min	\N	\N	\N	0	HTML	1576224527710	1576224527711	1	python
352	Using the global statement	W0603	W0603	Pylint	Used when you use the "global" statement to update a global variable. Pylint just tries to discourage this usage. That doesn't mean you can not use it!	1	\N	READY	py	LINEAR	1h	\N	\N	\N	0	HTML	1576224527712	1576224527713	1	python
353	Class method should have "cls" as first argument	C0202	C0202	Pylint	Used when a class method has an attribute different than "cls" as first argument, to easily differentiate them from regular instance methods.	1	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527714	1576224527715	1	python
354	Operator not followed by a space	C0323	C0323	Pylint	Used when one of the following operator (!= | <= | == | >= | < | > | = | \\+= |-= | \\*= | /= | %) is not followed by a space.	1	\N	READY	py	LINEAR	1min	\N	\N	\N	0	HTML	1576224527716	1576224527717	1	python
355	Using the global statement at the module level	W0604	W0604	Pylint	Used when you use the "global" statement at the module level since it has no effect.	1	\N	READY	py	LINEAR	1min	\N	\N	\N	0	HTML	1576224527718	1576224527719	1	python
356	More than one statement on a single line	C0321	C0321	Pylint	<p>Used when more than one statement are found on the same line.</p>\n      <p>This rule is deprecated, use {rule:python:OneStatementPerLine} instead.</p>	1	\N	DEPRECATED	py	\N	\N	\N	\N	\N	0	HTML	1576224527720	1576224527720	1	python
357	Too few public methods	R0903	R0903	Pylint	Used when class has too few public methods, so be sure it's really worth it.	1	\N	READY	py	LINEAR	1h	\N	\N	\N	0	HTML	1576224527722	1576224527722	1	python
358	Method has no argument	E0211	E0211	Pylint	Used when a method which should have the bound instance as first argument has no argument defined.	2	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527724	1576224527724	1	python
359	Too many public methods	R0904	R0904	Pylint	Used when class has too many public methods, try to reduce this to get a more simple (and so easier to use) class.	1	\N	READY	py	LINEAR	2h	\N	\N	\N	0	HTML	1576224527725	1576224527726	1	python
360	Too many ancestors	R0901	R0901	Pylint	Used when class has too many parent classes, try to reduce this to get a more simple (and so easier to use) class.	1	\N	READY	py	LINEAR	3h	\N	\N	\N	0	HTML	1576224527727	1576224527728	1	python
361	Too many instance attributes	R0902	R0902	Pylint	Used when class has too many instance attributes, try to reduce this to get a more simple (and so easier to use) class.	1	\N	READY	py	LINEAR	2h	\N	\N	\N	0	HTML	1576224527729	1576224527730	1	python
362	Missing key in format string dictionary	E1304	E1304	Pylint	Used when a format string that uses named conversion specifiers is used with a dictionary that doesn't contain all the keys required by the format string.	2	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527734	1576224527735	1	python
363	Undefined name	E0611	E0611	Pylint	Used when a name cannot be found in a module.	2	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527736	1576224527737	1	python
364	Expected mapping for format string	E1303	E1303	Pylint	Used when a format string that uses named conversion specifiers is used with an argument that is not a mapping.	2	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527739	1576224527740	1	python
365	Mixing named and unnamed conversion specifiers in format string	E1302	E1302	Pylint	Used when a format string contains both named (e.g. '%(foo)d') and unnamed (e.g. '%d') conversion specifiers. This is also used when a named conversion specifier contains * for the minimum field width and/or precision.	2	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527741	1576224527742	1	python
366	Method should have "self" as first argument	E0213	E0213	Pylint	Used when a method has an attribute different the "self" as first argument. This is considered as an error since this is a so common convention that you shouldn't break it!	2	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527743	1576224527744	1	python
367	Format string ends in middle of conversion specifier	E1301	E1301	Pylint	Used when a format string terminates before the end of a conversion specifier.	2	\N	READY	py	LINEAR	3min	\N	\N	\N	0	HTML	1576224527745	1576224527746	1	python
368	Wrong number of spaces around an operator, bracket, or comma, or before a block opener colon	C0326	C0326	Pylint	<p>Used when a wrong number of spaces is used around an operator, bracket, or comma, or before a block opener colon.</p>\n        <p>This message belongs to the format checker.</p>\n        <p>In Pylint 1.1.0, this message replaced the older whitespace-related messages\n        {rule:Pylint:C0322}, {rule:Pylint:C0323}, and {rule:Pylint:C0324}, and now reports some additional situations.</p>	1	\N	READY	py	LINEAR	1min	\N	\N	\N	0	HTML	1576224527747	1576224527748	1	python
369	Metaclass method should have "mcs" as first argument	C0203	C0203	Pylint	Used when a metaclass method has an attribute different the "mcs" as first argument.	1	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527749	1576224527750	1	python
370	Comma not followed by a space	C0324	C0324	Pylint	Used when a comma (",") is not followed by a space.	1	\N	READY	py	LINEAR	1min	\N	\N	\N	0	HTML	1576224527751	1576224527752	1	python
371	Not enough arguments for format string	E1306	E1306	Pylint	Used when a format string that uses unnamed conversion specifiers is given too many arguments.	2	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527753	1576224527754	1	python
372	Too many arguments for format string	E1305	E1305	Pylint	Used when a format string that uses unnamed conversion specifiers is given too few arguments.	2	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527755	1576224527756	1	python
373	Metaclass class method first argument	C0204	C0204	Pylint	Used when a metaclass class method has a first argument named differently than the value specified\n      in valid-metaclass-classmethod-first-arg option (defaults to "mcs"),\n      recommended to easily differentiate them from regular instance methods.	1	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527757	1576224527757	1	python
374	Unnecessary parentheses	C0325	C0325	Pylint	<p>Used when a single item in parentheses follows an if, for, or other keyword.</p>\n      <p>This rule was added in Pylint 1.1.0.</p>\n      <p>This rule is deprecated, use {rule:python:S1110} instead.</p>	1	\N	DEPRECATED	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527759	1576224527759	1	python
375	Error while code parsing	F0010	F0010	Pylint	Used when an exception occurred while building the ASTNG representation which could be handled by ASTNG.	2	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224527760	1576224527760	1	python
376	Use of the <> operator	W0331	W0331	Pylint	Used when the deprecated "<>" operator is used instead of "!=".\n               <p>This rule is deprecated, use {rule:python:InequalityUsage} instead.</p>	1	\N	DEPRECATED	py	LINEAR	1min	\N	\N	\N	0	HTML	1576224527761	1576224527762	1	python
377	Format string dictionary key should be a string	W1300	W1300	Pylint	Used when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527763	1576224527763	1	python
378	Static method with "self" or "cls" as first argument	W0211	W0211	Pylint	Used when a static method has "self" or "cls" as first argument.	1	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527764	1576224527765	1	python
379	Use l as long integer identifier	W0332	W0332	Pylint	Used when a lower case "l" is used to mark a long integer. You should use an upper case "L" since the letter "l" looks too much like the digit "1".	1	\N	READY	py	LINEAR	1min	\N	\N	\N	0	HTML	1576224527766	1576224527767	1	python
380	Access to a protected member of a client class	W0212	W0212	Pylint	Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it's defined.	1	\N	READY	py	LINEAR	1h	\N	\N	\N	0	HTML	1576224527768	1576224527769	1	python
381	Use of the `` operator	W0333	W0333	Pylint	Used when the deprecated "``" (backtick) operator is used instead of the str() function.\n               <p>This rule is deprecated, use {rule:python:BackticksUsage} instead.</p>	1	\N	DEPRECATED	py	LINEAR	1min	\N	\N	\N	0	HTML	1576224527770	1576224527771	1	python
382	Unused key in format string dictionary	W1301	W1301	Pylint	Used when a format string that uses named conversion\n      specifiers is used with a dictionary that contains keys not required by the format string.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527772	1576224527773	1	python
383	Unused import	W0611	W0611	Pylint	Used when an imported module or variable is not used.	1	\N	READY	py	LINEAR	1min	\N	\N	\N	0	HTML	1576224527774	1576224527775	1	python
384	Unused variable	W0612	W0612	Pylint	Used when a variable is defined but not used.	1	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527776	1576224527776	1	python
385	Unused argument	W0613	W0613	Pylint	Used when a function or method argument is not used.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527777	1576224527778	1	python
386	Too many return statements	R0911	R0911	Pylint	Used when a function or method has too many return statement, making it hard to follow.\n      <p>This rule is deprecated, use {rule:python:S1142} instead.</p>	1	\N	DEPRECATED	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527779	1576224527779	1	python
387	Too many local variables	R0914	R0914	Pylint	Used when a function or method has too many local variables.	1	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527780	1576224527781	1	python
388	Too many statements	R0915	R0915	Pylint	Used when a function or method has too many statements. You should then split it in smaller functions / methods.	1	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224527782	1576224527782	1	python
389	Bad continuation	C0330	C0330	Pylint	<p>Used when continued lines are badly indented.</p>\n      <p>This rule was added in Pylint 1.2.1.</p>	1	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527784	1576224527785	1	python
390	Too many branches	R0912	R0912	Pylint	Used when a function or method has too many branches, making it hard to follow.\n               <p>This rule is deprecated, use {rule:python:FunctionComplexity} instead.</p>	1	\N	DEPRECATED	py	\N	\N	\N	\N	\N	0	HTML	1576224527786	1576224527786	1	python
391	Too many arguments	R0913	R0913	Pylint	Used when a function or method takes too many arguments.\n      <p>This rule is deprecated, use {rule:python:S107} instead.</p>	1	\N	DEPRECATED	py	LINEAR	30min	\N	\N	\N	0	HTML	1576224527787	1576224527787	1	python
392	Access to member before its definition	E0203	E0203	Pylint	Used when an instance member is accessed before it's actually assigned.	2	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527788	1576224527789	1	python
393	Method hidden by attribute of super class	E0202	E0202	Pylint	Used when a class defines a method which is hidden by an instance attribute from an ancestor class.	2	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527790	1576224527791	1	python
394	Undefined variable name in __all__	E0603	E0603	Pylint	Used when an undefined variable name is referenced in __all__.	1	\N	READY	py	LINEAR	3min	\N	\N	\N	0	HTML	1576224527792	1576224527792	1	python
395	Invalid object in __all__, must contain only strings	E0604	E0604	Pylint	Used when an invalid (non-string) object occurs in __all__.\n       <p>This rule was added in Pylint 0.27.0.</p>	1	\N	READY	py	LINEAR	3min	\N	\N	\N	0	HTML	1576224527793	1576224527794	1	python
396	Using variable before assignment	E0601	E0601	Pylint	Used when a local variable is accessed before it's assignment.	2	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527795	1576224527796	1	python
397	Undefined variable	E0602	E0602	Pylint	Used when an undefined variable is accessed.	2	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527797	1576224527797	1	python
398	Analysis failed	F0001	F0001	Pylint	Used when an error occurred preventing the analysis of a\n               module (unable to find it for instance).	2	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224527798	1576224527798	1	python
399	Internal Pylint error	F0002	F0002	Pylint	Used when an unexpected error occurred while building the ASTNG representation. This is usually accompanied by a traceback. Please report such errors!	2	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224527800	1576224527800	1	python
400	Ignored builtin module	F0003	F0003	Pylint	Used to indicate that the user asked to analyze a builtin module which has been skipped.	2	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224527801	1576224527801	1	python
401	Unexpected inferred value	F0004	F0004	Pylint	Used to indicate that some value of an unexpected type has been inferred.	2	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224527803	1576224527803	1	python
402	Unable to import module	F0401	F0401	Pylint	Used when Pylint has been unable to import a module.	2	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224527805	1576224527805	1	python
403	Attribute defined outside __init__	W0201	W0201	Pylint	Used when an instance attribute is defined outside the __init__ method.	1	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224527806	1576224527806	1	python
404	Global variable undefined at the module level	W0601	W0601	Pylint	Used when a variable is defined through the "global" statement but the variable is not defined in the module scope.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527807	1576224527808	1	python
405	Unassigned global variable	W0602	W0602	Pylint	Used when a variable is defined through the "global" statement but no assignment to this variable is done.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527809	1576224527810	1	python
406	Too few arguments	E1120	E1120	Pylint	Used when a function call passes too few arguments.	2	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527811	1576224527811	1	python
407	Abstract class not referenced	R0921	R0921	Pylint	Used when an abstract class is not used as ancestor anywhere.	1	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527812	1576224527813	1	python
408	No exception type(s) specified	W0702	W0702	Pylint	Used when an except clause doesn't specify exceptions\n               type to catch.\n               <p>Catching exceptions should be as precise as\n               possible. The type of exceptions that can be raised should be known in\n               advance. Using catch-all-constructs hides potential\n               errors (including syntax ones), defeats the purpose of\n               knowing the type of error that occurred, and prohibits the use of\n               tailored responses.</p>	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527814	1576224527815	1	python
409	Line too long	C0301	C0301	Pylint	Used when a line is longer than a given number of characters.\n      <p>This rule is deprecated, use {rule:python:LineLength} instead.</p>	1	\N	DEPRECATED	py	LINEAR	1min	\N	\N	\N	0	HTML	1576224527816	1576224527817	1	python
410	Similar lines	R0801	R0801	Pylint	Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.\n      <p>This rule is deprecated, use {rule:common-py:DuplicatedBlocks} instead.</p>	1	\N	DEPRECATED	py	\N	\N	\N	\N	\N	0	HTML	1576224527818	1576224527818	1	python
411	Abstract class used too few times	R0922	R0922	Pylint	Used when an abstract class is used less than X times as ancestor.	1	\N	READY	py	LINEAR	45min	\N	\N	\N	0	HTML	1576224527820	1576224527821	1	python
412	Catching too general exception	W0703	W0703	Pylint	Used when an except catches a too general exception, possibly burying unrelated errors.\n               <p>Catching exceptions should be as precise as possible. The type of\n               exceptions that can be raised should be known in advance. Using a\n               catch-all Exception instance defeats the purpose of knowing the type\n               of error that occur-ed, and prohibits the use of tailored responses.</p>	1	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527822	1576224527823	1	python
413	Except doesn't do anything	W0704	W0704	Pylint	Used when an except clause does nothing but "pass" and there is no "else" clause.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527824	1576224527825	1	python
414	Bad first argument given to super	E1003	E1003	Pylint	Used when another argument than the current class is given as first argument of the super builtin.	2	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527826	1576224527827	1	python
415	Multiple values passed for parameter in function call	E1124	E1124	Pylint	Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument.	2	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527828	1576224527828	1	python
416	Use of super on an old style class	E1002	E1002	Pylint	Used when an old style class uses the super builtin.	2	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527829	1576224527830	1	python
417	Passing unexpected keyword argument in function call	E1123	E1123	Pylint	Used when a function call passes a keyword argument that doesn't correspond to one of the function's parameter names.	2	\N	READY	py	LINEAR	3min	\N	\N	\N	0	HTML	1576224527831	1576224527832	1	python
418	Use of __slots__ on an old style class	E1001	E1001	Pylint	Used when an old style class uses the __slots__ attribute.	2	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527833	1576224527834	1	python
419	Duplicate keyword argument in function call	E1122	E1122	Pylint	Used when a function call passes the same keyword argument multiple times.	2	\N	READY	py	LINEAR	3min	\N	\N	\N	0	HTML	1576224527835	1576224527835	1	python
420	Interface not implemented	R0923	R0923	Pylint	Used when an interface class is not implemented anywhere.	1	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527836	1576224527836	1	python
421	Too many positional arguments for function call	E1121	E1121	Pylint	Used when a function call passes too many positional arguments.	2	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527837	1576224527838	1	python
422	Raising a new style class which doesn't inherit from BaseException	E0710	E0710	Pylint	Used when a new style class which doesn't inherit from BaseException is raised.	2	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224527839	1576224527839	1	python
423	Missing argument to super()	E1004	E1004	Pylint	Used when the super builtin didn't receive an argument. This message can't be emitted when using Python >= 3.0.	1	\N	READY	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527840	1576224527841	1	python
424	Final newline missing	C0304	C0304	Pylint	<p>Used when the last line in a file is missing a newline.</p>\n               <p>While Python interpreters typically do not require line\n               end character(s) on the last line, other programs processing Python\n               source files may do, and it is simply good practice to have it.</p>\n               <p>Added in Pylint 1.0.0.</p>\n               <p>This rule is deprecated, use {rule:python:S113} instead.</p>	1	\N	DEPRECATED	py	LINEAR	10min	\N	\N	\N	0	HTML	1576224527841	1576224527842	1	python
425	Cyclic import	R0401	R0401	Pylint	Used when a cyclic import between two or more modules is detected.\n               <p>While cyclic imports terminate and execute without\n               surprises in most cases, the circular dependency often indicates a\n               design issue in the code base.</p>	1	\N	READY	py	LINEAR	2h	\N	\N	\N	0	HTML	1576224527843	1576224527843	1	python
426	Too many lines in module	C0302	C0302	Pylint	Used when a module has too much lines, reducing its readability.\n      <p>This rule is deprecated, use {rule:python:S104} instead.</p>	1	\N	DEPRECATED	py	LINEAR	30min	\N	\N	\N	0	HTML	1576224527844	1576224527845	1	python
427	NotImplemented raised - should raise NotImplementedError	E0711	E0711	Pylint	Used when NotImplemented is raised instead of NotImplementedError.	2	\N	READY	py	LINEAR	5min	\N	\N	\N	0	HTML	1576224527846	1576224527846	1	python
428	Trailing whitespace	C0303	C0303	Pylint	<p>Used when there is whitespace between the end of a line and the newline.</p>\n      <p>Added in Pylint 1.0.0.</p>\n      <p>This rule is deprecated, use {rule:python:S1131} instead.</p>	1	\N	DEPRECATED	py	LINEAR	1h	\N	\N	\N	0	HTML	1576224527847	1576224527848	1	python
429	Avoid catching an exception which doesn't inherit from BaseException	E0712	E0712	Pylint	Used when a class which doesn't inherit from BaseException is used as an exception in an except clause.	1	\N	READY	py	LINEAR	20min	\N	\N	\N	0	HTML	1576224527849	1576224527850	1	python
430	Unable to run raw checkers on built-in module	I0001	I0001	Pylint	Used to inform that a built-in module has not been checked using the raw checkers.	0	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224527851	1576224527851	1	python
446	Locally disabling message	I0011	I0011	Pylint	Used when an inline option disables a message or a messages category.	0	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224529374	1576224529374	1	python
447	Unable to consider inline option	I0010	I0010	Pylint	Used when an inline option is either badly formatted or can't be used inside modules.	0	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224529377	1576224529377	1	python
448	Used black listed builtin function	W0141	W0141	Pylint	Used when a black listed builtin function is used (see the bad-function option). Usual black listed functions are the ones like map, or filter, where Python offers now some cleaner alternative like list comprehension.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224529380	1576224529381	1	python
449	Used * or ** magic	W0142	W0142	Pylint	Used when a function or method is called using `*args` or `**kwargs` to dispatch arguments. This doesn't improve readability and should be used with care.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224529383	1576224529384	1	python
450	Assigning to function call which only returns None	W1111	W1111	Pylint	Used when an assignment is done on a function call but the inferred function returns nothing but None.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224529386	1576224529387	1	python
451	Failed to resolve interfaces	F0220	F0220	Pylint	Used when a Pylint as failed to find interfaces implemented by a class.	2	\N	READY	py	\N	\N	\N	\N	\N	0	HTML	1576224529389	1576224529389	1	python
452	Unnecessary semicolon	W0301	W0301	Pylint	Used when a statement is ended by a semi-colon (";"), which isn't necessary(that's python, not C ;).	1	\N	READY	py	LINEAR	1min	\N	\N	\N	0	HTML	1576224529390	1576224529395	1	python
453	Raising a string exception	W0701	W0701	Pylint	Used when a string exception is raised.	1	\N	READY	py	LINEAR	15min	\N	\N	\N	0	HTML	1576224529398	1576224529399	1	python
454	Functions should not have too many lines	S138	\N	flex	<p>\n  A function that grows too large tends to aggregate too many responsibilities.\n  Such function inevitably become harder to understand and therefore harder to maintain.\n</p>\n<p>\n  Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\n  Those smaller functions will not only be easier to understand, but also probably easier to test.\n</p>	2	\N	READY	flex	CONSTANT_ISSUE	\N	20min	\N	brain-overload	0	HTML	1576224529402	1576224529447	1	flex
455	Unused local variables should be removed	S1481	\N	flex	<p>\n  If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic function numberOfMinutes(hours:int):int\n{\n  var seconds:int = 0;  // seconds is never used\n  return hours * 60;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic function numberOfMinutes(hours:int):int\n{\n  return hours * 60;\n}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	unused	0	HTML	1576224529497	1576224529499	1	flex
456	Dynamic classes should not be used	S1446	\N	flex	<p>\n  A dynamic class defines an object that can be altered at run time by adding or changing properties and methods. This extremely powerful mechanism should be used very carefully, and only in very limited use cases.\n</p>\n<p>\n  Indeed, by definition dynamic classes make refactoring difficult and prevent the compiler from raising potential errors at compile time.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ndynamic public class DynamicFoo\n{...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo //Note that the class has been renamed to avoid confusion\n{...}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	30min	\N	pitfall	0	HTML	1576224529501	1576224529502	1	flex
484	A function should have a single point of exit at the end of the function	FunctionSinglePointOfExit	\N	flex	<p>This is required by IEC 61508, under good programming style.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction func1() { // Noncompliant - there are two points of exit\n  if (false) {\n    return;\n  }\n}\n\nfunction func2() { // Noncompliant - there are two points of exit\n  if (a &gt; 0) {\n    return 0;\n  }\n  return -1;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction func1() {\n  return;\n}\n\nfunction func2() {\n}\n\nfunction func3();\n</pre>\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C:2004, 14.7 - A function shall have a single point of exit at the end of the function.\n  </li><li> MISRA C++:2008, 6-6-5 - A function shall have a single point of exit at the end of the function\n</li><li> MISRA C:2012, 15.5 - A function should have a single point of exit at the end\n</li></ul>	1	\N	READY	flex	CONSTANT_ISSUE	\N	20min	\N	confusing,misra	0	HTML	1576224530245	1576224530248	1	flex
485	Two branches in the same conditional structure should not have exactly the same implementation	S1871	\N	flex	p>Having two <code>cases</code> in the same <code>switch</code> statement with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then one should fall through to the other.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n</pre>\n\n<p>or</p>\n\n<pre>\nswitch (i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	10min	\N	design,suspicious	0	HTML	1576224530251	1576224530297	1	flex
486	Loggers should be "private static const" and should share a naming convention	S1312	\N	flex	<p>Loggers should:</p>\n<ul>\n  <li> <code>private</code>: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own logger.\n  </li><li> <code>static</code>: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be provided in the messages but the logger should be created at class level to prevent creating a logger along with each object.\n</li><li> <code>(final|const)</code>: be created once and only once per class.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default regular expression <code>LOG(?:GER)?</code>:</p>\n\n<pre>\npublic const logger:ILogger = LogUtil.getLogger(MyClass);\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nprivate static const LOG:ILogger = LogUtil.getLogger(MyClass);\n</pre>	1	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224530343	1576224530346	1	flex
457	Constructor bodies should be as lightweight as possible	S1447	\N	flex	<p>\n  In ActionScript 3, constructor code is always interpreted rather than compiled by the JIT at runtime, which is why the body of a constructor should be as lightweight as possible. As soon as a constructor contains branches ("if", "for", "switch", ...) an issue is logged.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  public function Foo()\n  {\n    ... //lot of logic and control flow statements\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  public function Foo()\n  {\n    init()\n  }\n\n  private function init():void\n  {\n    ... //lot of logic and control flow statements\n  }\n}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	performance	0	HTML	1576224529504	1576224529505	1	flex
458	Classes should not have too many methods	S1448	\N	flex	<p>\n  A class that grows too much tends to aggregate too many responsibilities\n  and inevitably becomes harder to understand and therefore to maintain.\n  Above a specific threshold, it is strongly advised to refactor the class\n  into smaller ones which focus on well defined topics.\n</p>	2	\N	READY	flex	CONSTANT_ISSUE	\N	1h	\N	brain-overload	0	HTML	1576224529507	1576224529508	1	flex
459	Function names should comply with a naming convention	S100	\N	flex	<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<p>With default provided regular expression: ^[a-z][a-zA-Z0-9]*$</p>\n\n<pre>\nfunction DoSomething(){...} \n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction doSomething(){...} \n</pre>	1	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224529513	1576224529514	1	flex
460	Class names should comply with a naming convention	S101	\N	flex	<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n\n<pre>\npublic class myClass {...}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class MyClass {...}\n</pre>	1	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224529519	1576224529521	1	flex
461	"===" and "!==" should be used instead of "==" and "!="	S1440	\N	flex	<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For example, it evaluates <code>' \\t\\r\\n' == 0</code> as <code>true</code>.</p>\n<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (var == 'howdy') {...} // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nif (var === 'howdy') {...}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224529525	1576224529527	1	flex
462	"Alert.show(...)" should not be used	S1442	\N	flex	<p>Alert.show(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. </p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif(unexpectedCondition)\n{\n  Alert.show("Unexpected Condition");\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code\n  </li></ul>	2	\N	READY	flex	CONSTANT_ISSUE	\N	10min	\N	cwe,user-experience	0	HTML	1576224529530	1576224529531	3	flex
463	Literal boolean values should not be used in condition expressions	S1125	\N	flex	<p>\n  Remove literal boolean values from conditional expressions to improve readability. Anything that can be tested for equality with a boolean value must itself be a boolean value, and boolean values can be tested atomically.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  if (booleanVariable == true) { /* ... */ }\n  if (booleanVariable != true) { /* ... */ }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  if (booleanVariable) { /* ... */ }\n  if (!booleanVariable) { /* ... */ }\n</pre>	1	\N	READY	flex	CONSTANT_ISSUE	\N	2min	\N	clumsy	0	HTML	1576224529533	1576224529535	1	flex
464	"public static" fields should be constant	S1444	\N	flex	<p>There is no good reason to declare a field "public" and "static" without also declaring it "const". Most of the time this is a kludge to share a state among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to <code>null</code>. </p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Greeter {\n  public static var foo:Foo = new Foo(...);\n  ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Greeter {\n  public static const FOO:Foo = new Foo(...);\n  ...\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/500.html">MITRE, CWE-500</a> - Public Static Field Not Marked Final\n  </li><li> <a href="https://www.securecoding.cert.org/confluence/display/java/OBJ10-J.">CERT OBJ10-J</a> - Do not use public static nonfinal variables\n</li></ul>	3	\N	READY	flex	CONSTANT_ISSUE	\N	20min	\N	cert,cwe	0	HTML	1576224529537	1576224529538	3	flex
465	Constructors should not have a "void" return type	S1445	\N	flex	<p>\n  Even though this is syntactically correct, the "void" return type should not be used in the signature of a constructor. Indeed some developers might be confused by this syntax, believing that the constructor is in fact a standard function.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  public function Foo() : void\n  {...}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  public function Foo()\n  {...}\n}\n</pre>	1	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	confusing	0	HTML	1576224529540	1576224529541	1	flex
466	Statements, operators and keywords specific to ActionScript 2 should not be used	ActionScript2	\N	flex	<p>\nUsage of statements, operators and keywords specific to ActionScript 2 does not allow to migrate to ActionScript 3.\nThis includes "intrinsic" keyword, set variable statement and following list of operators:\n</p>\n\n<ul>\n  <li><> (inequality) - use != instead</li>\n  <li>add (concatenation (strings)) - use + instead</li>\n  <li>eq (equality (strings)) - use == instead</li>\n  <li>ne (not equal (strings)) - use != instead</li>\n  <li>lt (less than (strings)) - use < instead</li>\n  <li>le (less than or equal to (strings)) - use <= instead</li>\n  <li>gt (greater than (strings)) - use > instead</li>\n  <li>ge (greater than or equal to (strings)) - use >= instead</li>\n  <li>and (logical and) - use && instead</li>\n  <li>or (logical or) - use || instead</li>\n  <li>not (logical not) - use ! instead</li>\n</ul>\n\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (true != false) { // Compliant\n}\n\nif (true <> false) { // Noncompliant\n}\n\nset("varName", value); // Noncompliant\nvarName = value; // Compliant\n</pre>	4	\N	READY	flex	CONSTANT_ISSUE	\N	2min	\N	obsolete	0	HTML	1576224529543	1576224529588	1	flex
467	"for" loop stop conditions should be invariant	S127	\N	flex	<p><code>for</code> loop stop conditions must be invariant (i.e. true at both the beginning and ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n<p>Stop conditions that are not invariant are difficult to understand and maintain, and will likely lead to the introduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop\n  </li><li> When the stop condition depend upon a method call\n</li><li> When the stop condition depends on an object property, since such properties could change during the execution of the loop.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfor (var i = 0; i &lt; 10; i++) {\n  ...\n  i = i - 1; // Noncompliant \n  ...\n} \n\nfor (var i = 0; i &lt; getMaximumNumber(); i++) {...} \n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nint stopCondition = getMaximumNumber();\nfor (var i = 0; i &lt; stopCondition; i++) {...} \n</pre>\n\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the loop.\n  </li><li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>.\n</li></ul>	2	\N	READY	flex	CONSTANT_ISSUE	\N	10min	\N	misra,pitfall	0	HTML	1576224529633	1576224529675	1	flex
468	"switch case" clauses should not have too many lines	S1151	\N	flex	<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow.\n  As soon as a <code>case</code> clause contains too many statements this highly decreases the readability of the overall control flow statement.\n  In such case, the content of <code>case</code> clause should be extracted in a dedicated function.</p>\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0:       // Noncompliant - 6 lines till next case or default case\n    trace("");\n    trace("");\n    trace("");\n    trace("");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nswitch (myVariable) {\n  case 0:\n    printSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate function printSomething() {\n  trace("");\n  trace("");\n  trace("");\n  trace("");\n}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	brain-overload	0	HTML	1576224529720	1576224529720	1	flex
469	Any class extending the Event class should override Event.clone()	S1470	\N	flex	<p>\n  Overriding Event.clone() is a required part of the API contract:\n</p>\n<blockquote>\n  You are required to override the Event.clone() method in your Event subclass. The clone() method returns a cloned copy of the event object by setting the type property and any new properties in the clone. Typically, you define the clone() method to return an event instance created with the new operator.\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyEvent extends Event {...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyEvent extends Event\n{\n...\n  override public function clone():Event {\n    return new MyEvent(...);\n  }\n...\n}\n</pre>	3	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224529723	1576224529723	2	flex
470	Switch cases should end with an unconditional "break" statement	NonEmptyCaseWithoutBreak	\N	flex	<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2: \n    doSomething();\n    break;\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:                               \n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 4:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional \n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.\n  </li><li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause\n</li><li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.\n</li><li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause\n</li><li> MISRA C:2012, 16.1 - All switch statements shall be well-formed\n</li><li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause\n</li><li> <a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch\n</li><li> <a href="https://www.securecoding.cert.org/confluence/x/YIFLAQ">CERT, MSC17-C</a> - Finish every set of statements associated with a case label with a break statement\n</li><li> <a href="https://www.securecoding.cert.org/confluence/x/ZoFLAQ">CERT, MSC18-CPP</a> - Finish every set of statements associated with a case label with a break statement\n</li></ul>	3	\N	READY	flex	CONSTANT_ISSUE	\N	10min	\N	cert,cwe,misra,pitfall	0	HTML	1576224529725	1576224529768	1	flex
471	"with" statements should not be used	WithStatement	\N	flex	<p>Never use <code>with</code> statements, since they decrease readability. When you do not specify a variable's scope, you do not always know where you are setting properties, so your code can be confusing.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nwith (foo) { // Noncompliant\n  return x;  // is it a property of foo or local variable ?\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nreturn foo.x;\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224529815	1576224529818	2	flex
472	Sections of code should not be "commented out"	CommentedCode	\N	flex	<p>\nProgrammers should not comment out code as it bloats programs and reduces readability.\nUnused code should be deleted and can be retrieved from source control history if required.\n</p>\n\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be "commented out".\n  </li><li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments.\n</li><li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments.\n</li><li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out"\n</li></ul>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	misra,unused	0	HTML	1576224529822	1576224529825	1	flex
473	Comments matching a regular expression should be handled	CommentRegularExpression	\N	flex	<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression "<code>.*TODO.*</code>" to match all comment containing "TODO".</p>\n<p>Note that, in order to match TODO regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in <code>(?i).*TODO.*</code>.</p>	2	\N	READY	flex	\N	\N	\N	\N	\N	1	HTML	1576224529829	1576224529829	1	flex
474	The special "star" type should not be used	S1435	\N	flex	<p>\n  According to the ActionScript language reference, the star type:\n</p>\n\n<p>\n  <blockquote>\n  Specifies that a property is untyped. Use of the asterisk symbol for a type annotation is equivalent to using no type annotation. Expressions that read from untyped properties are considered untyped expressions. Use of untyped expressions or properties is recommended in the following circumstances:\n    <ul>\n      <li>When you want to defer type checking to runtime. You can use an untyped property or expression to circumvent compile-time type checking in strict mode. Note, however, that runtime type checking of assignment statements occurs whether you use strict mode or not.</li>\n      <li>When you want to store the value undefined in a property. Unlike previous versions of ActionScript, the value undefined is not a member of the Object data type. You must use an untyped property to store the value undefined.</li>\n    </ul>\n  </blockquote>\n</p>\n\n<p>\nBut deferring type checking to runtime can highly impact the robustness of the application because the compiler is unable to assist the developer.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar obj:*;                   // Noncompliant\nvar foo:* = new Something(); // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar obj:Something;\nvar foo:Something = new Something();\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	10min	\N	unpredictable	0	HTML	1576224529839	1576224529884	1	flex
475	Empty statements should be removed	S1116	\N	flex	<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten.\n  </li><li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction doSomething():void {\n  ;                                                       // Noncompliant - was used as a kind of TODO marker\n}\n\nfunction doSomethingElse():void {\n  trace("Hello, world!");;                     // Noncompliant - double ;\n  ...\n  for (var i:int = 0; i &lt; 3; trace(i), i++);       // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body\n  ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction doSomething():void {}\n\nfunction doSomethingElse():void {\n  trace("Hello, world!");\n  ...\n  for (var i:int = 0; i &lt; 3; i++){\n    trace(i);\n  }\n  ...\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that the first character following the null statement is a white-space character.\n  </li><li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character.\n</li><li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect\n</li><li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect\n</li></ul>	1	\N	READY	flex	CONSTANT_ISSUE	\N	2min	\N	cert,misra,unused	0	HTML	1576224529931	1576224529977	1	flex
476	Octal values should not be used	S1314	\N	flex	<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar myNumber:int = 010;  // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nvar myNumber:int = 8;\n</pre>\n\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used.\n  </li><li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than "\\0") shall not be used\n</li><li> MISRA C:2012, 7.1 - Octal constants shall not be used\n</li><li> <a href="https://www.securecoding.cert.org/confluence/x/_QC7AQ">CERT DCL18-C</a> - Do not begin integer constants with 0 when specifying a decimal value\n</li></ul>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	cert,misra,pitfall	0	HTML	1576224530023	1576224530027	1	flex
477	Objects should not be instantiated inside a loop	S1952	\N	flex	<p>\n  It can be expensive to instantiate a new object, and doing so inside a loop is typically an error. Instead, create the object once, before the loop.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i:int = 0; i < 10; i++) {\n  var temp:MyObj = new MyObject();  // Noncompliant\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar temp:MyObj = new MyObject();\nfor (var i:int = 0; i < 10; i++) {\n  //...\n}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	performance	0	HTML	1576224530032	1576224530036	1	flex
478	Functions should not be too complex	FunctionComplexity	\N	flex	<p>\nThe cyclomatic complexity of functions should not exceed a defined threshold.\nComplex code can perform poorly and will in any case be difficult to understand and therefore to maintain.\n</p>	2	\N	READY	flex	LINEAR_OFFSET	1min	10min	per complexity point above the threshold	brain-overload	0	HTML	1576224530042	1576224530045	1	flex
479	Local variables should not shadow class fields	S1117	\N	flex	<p>Shadowing fields with a local variable or with a function parameter is a bad practice that reduces code readability: It makes it confusing to know whether the field or the variable is being used.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nclass Foo {\n  public var myField:int;\n\n  public function doSomething():String {\n    var myField:int = 0;\n    ...\n  }\n\n  public function doSomethingElse(myField:int):String {\n    ...\n  }\n}\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>Constructors and setters are exceptions; it is common practice to name arguments for the fields the values will be assigned to. Static methods are also ignored.</p>\n\n<pre>\nclass Foo {\n  public var myField:int;\n\n  public function Foo(myField:int) {\n    this.myField = myField;\n  }\n\n  public static function build(myField:int):Foo {\n    ...\n  }\n\n  public function setMyField(int myField):void{\n    this.myField = myField;\n  } \n\n  public function set myField(int myField):void{ \n    this.myField = myField;\n  } \n}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224530052	1576224530053	1	flex
480	"switch" statements should end with a "default" clause	SwitchWithoutDefault	\N	flex	<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a suitable comment as to why no action is taken. Even when the <code>switch</code> covers all current values of an <code>enum</code>, a <code>default</code> case should still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nswitch (param) { // Noncompliant - default clause is missing\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // Noncompliant - default clause should be the last one\n    doSomething();\n    break;\n  case 0:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nswitch (param) {\n  case 0:\n    doSomethingElse();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.\n  </li><li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause\n</li><li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.\n</li><li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause\n</li><li> MISRA C:2012, 16.1 - All switch statements shall be well-formed\n</li><li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label\n</li><li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n</li><li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement\n</li><li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C</a> - Strive for logical completeness\n</li><li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP</a> - Strive for logical completeness\n</li></ul>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,misra	0	HTML	1576224530055	1576224530099	1	flex
481	Statements should end with semicolons	S1438	\N	flex	<p>In Flex, the semicolon is optional as a statement separator, but omitting semicolons can be confusing.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction fun() {\n  return   // Noncompliant\n       5   // Noncompliant\n}\nprint(fun());  // prints "undefined", not "5"\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction fun() {\n  return 5;\n}\nprint(fun());\n</pre>	1	\N	READY	flex	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224530144	1576224530146	1	flex
482	Only "while", "do" and "for" statements should be labelled	S1439	\N	flex	<p>\n  Any statement or block of statements can be identified by a label, but those labels should be used only on 'while', 'do-while' and 'for' statements. Using labels in any other context leads to unstructured, confusing code.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyLabel:if (i % 2 == 0) {            // Noncompliant\n  if (i == 12) {\n    print("12");\n    break myLabel;\n  }\n  print("Odd number, but not 12");\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nmyLabel:for (i = 0; i < 10; i++) {   // Compliant\n  print("Loop");\n  break myLabel;\n}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	20min	\N	pitfall	0	HTML	1576224530148	1576224530149	1	flex
483	Control flow statements "if", "for", "while" and "switch" should not be nested too deeply	S134	\N	flex	<p>\n  Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>do while</code> and <code>switch</code> statements is a key ingredient for making what's known as "Spaghetti code".\n</p>\n\n<p>\n  Such code is hard to read, refactor and therefore maintain.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\n  if (condition1) {                  // Compliant - depth = 1\n    /* ... */\n    if (condition2) {                // Compliant - depth = 2\n      /* ... */\n      for(int i = 0; i < 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n        /* ... */\n        if (condition4) {            // Noncompliant - depth = 4\n          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            /* ... */\n          }\n          return;\n        }\n      }\n    }\n  }\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	10min	\N	brain-overload	0	HTML	1576224530151	1576224530196	1	flex
511	Method visibility should be explicitly declared	S1784	\N	flex	<p>\n  Access modifiers define which classes can access properties, variables, methods, and other classes. If an access modifier is not specified, the access level defaults to <code>internal</code>, which grants access to all classes in the same package. This may be what is intended, but it should be specified explicitly to avoid confusion.\n</p>\n<p>\n  Available access modifiers are:\n</p>\n<ul>\n    <li><code>internal</code> - access allowed within the same package</li>\n    <li><code>private</code> - access allowed only within the same class</li>\n    <li><code>protected</code> - access allowed to the class and its child classes</li>\n    <li><code>public</code> - unfettered access by all</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction checkResources():Boolean {\n  ...\n  return true;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic function checkResources():Boolean {\n  ...\n  return true;\n}\n</pre>	1	\N	READY	flex	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224530717	1576224530719	1	flex
512	"MovieClip.onEnterFrame" event handler should not be used	S1982	\N	flex	<p>\n  The <code>onEnterFrame</code> event handler is continually invoked at the frame rate of the SWF file, regardless of which individual movie frame it is set for. Having too many <code>onEnterFrame</code> handlers can seriously degrade performance.\n</p>\n<p>\n  If the use of this event handler cannot be avoided entirely, then it should be created as close to its use as possible, and then destroyed as soon as possible afterward.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nmovieClip.onEnterFrame = function () {   // Noncompliant\n   // ...\n}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	20min	\N	performance	0	HTML	1576224530721	1576224530723	1	flex
513	"switch" statements should have at least 3 "case" clauses	S1301	\N	flex	<p>\n  <code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.\n  For just one or two cases however, the code will be more readable with <code>if</code> statements.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause.\n  </li><li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause.\n</li><li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses\n</li></ul>	1	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	misra	0	HTML	1576224530725	1576224530727	1	flex
514	The flash.system.Security.exactSettings property should never be set to false	S1466	\N	flex	<p>\n  The security.exactSettings value should remain set at the default value of true. Setting this value to false could make the SWF vulnerable to cross-domain attacks.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nSecurity.exactSettings = false;\n</pre>	3	\N	READY	flex	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224530729	1576224530730	3	flex
515	Constructors should not dispatch events	S1467	\N	flex	<p>\n  A listener can be attached to an object only after it has been constructed. So dispatching an event in a constructor is useless and error prone.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  public function MyClass()\n  {\n    dispatchEvent( new Event( "uselessEvent" ) ); \n  }\n}\n</pre>	4	\N	READY	flex	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224530732	1576224530732	2	flex
487	Cases in a "switch" should not have the same condition	S1950	\N	flex	<p>\n  Having multiple cases in a <code>switch</code> with the same condition is confusing at best. At worst, it's a bug that is likely to induce further bugs as the code is maintained.\n</p>\n\n<h2>Extended desc for languages with <code>break</code></h2>\n\n<p>\n  If the first case ends with a break, the second case will never be executed, rendering it dead code. Worse there is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.\n</p>\n<p>\n  On the other hand, if the first case does not end with a break, both cases will be executed, but future maintainers may not notice that.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 5:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  case 1:  // Noncompliant\n    //...\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 5:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n}\n</pre>	3	\N	READY	flex	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224530353	1576224530357	1	flex
488	Variables of the "Object" type should not be used	S1434	\N	flex	<p>Creating a new variable with the type "Object" means that it may be used to store any kind of object. This feature may be required in some specific contexts, but it leaves the compiler unable to do any kind of type checking, and is therefore a hazardous practice.  </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar obj:Object = new String(); // Noncompliant; Object used explicitly\nvar foo = new Object(); // Noncompliant; Object used explicitly\nvar bar = {name:String, age:int};  // Noncompliant; Object implicitly created\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nvar obj:String = new String();\nvar foo:IPortfolio = new Portfolio();\nclass Person {\n  public var name:String;\n  public var age:int;\n}\nvar bar:Person = new Person();\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	20min	\N	suspicious	0	HTML	1576224530362	1576224530365	1	flex
489	The "trace" function should not be used	S1951	\N	flex	<p>The <code>trace()</code> function outputs debug statements, which can be read by anyone with a debug version of the Flash player. Because sensitive information could easily be exposed in this manner, <code>trace()</code> should never appear in production code.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n    var val:Number = doCalculation();\n    trace("Calculation result: " + val);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\n    var val:Number = doCalculation();\n</pre>\n<h2>See</h2>\n\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code\n  </li></ul>	3	\N	READY	flex	CONSTANT_ISSUE	\N	2min	\N	cwe	0	HTML	1576224530368	1576224530370	3	flex
490	Local variable and function parameter names should comply with a naming convention	S117	\N	flex	<p>\n  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local variable and function parameter names match a provided regular expression.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[_a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic function doSomething(my_param:int):void\n{\n  var LOCAL:int;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic function doSomething(myParam):void\n{\n  var local;\n  ...\n}\n</pre>	1	\N	READY	flex	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224530373	1576224530374	1	flex
491	Constant names should comply with a naming convention	S115	\N	flex	<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n\n<pre>\npublic static const first:String = "first";\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic static const FIRST:String = "first";\n</pre>	1	\N	READY	flex	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224530378	1576224530380	1	flex
492	Field names should comply with a naming convention	S116	\N	flex	<p>\n  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field names match a provided regular expression.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default regular expression <code>^[_a-z][a-zA-Z0-9]*$</code>:</p>\n\n<pre>\nclass MyClass {\n  public var my_field:int;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class MyClass {\n   public var myField:int;\n}\n</pre>	1	\N	READY	flex	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224530383	1576224530384	1	flex
493	Classes should not be too complex	ClassComplexity	\N	flex	<p>\nThe cyclomatic complexity of a class should not exceed a defined threshold.\nComplex code can perform poorly and will in any case be difficult to understand and therefore to maintain.\n</p>	2	\N	READY	flex	LINEAR_OFFSET	1min	10min	per complexity point over the threshold	brain-overload	0	HTML	1576224530388	1576224530389	1	flex
494	Security.allowDomain(...) should only be used in a tightly focused manner	S1468	\N	flex	<p>\n  Calling Security.allowDomain("*") lets any domain cross-script into the domain of this SWF and exercise its functionality.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nSecurity.allowDomain("*");\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nSecurity.allowDomain("www.myDomain.com");\n</pre>	3	\N	READY	flex	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224530392	1576224530393	3	flex
495	Classes should not have too many fields	S1820	\N	flex	<p>\n  A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and having a lot of fields is an indication that a class has grown too large.\n</p>\n<p>\n  Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.\n</p>	2	\N	READY	flex	CONSTANT_ISSUE	\N	1h	\N	brain-overload	0	HTML	1576224530394	1576224530395	1	flex
496	The element type of an array field should be specified	S1469	\N	flex	<p>\n  Quoted from the Flex documentation :\n</p>\n<blockquote>\n  <p>\n    When you define an Array variable in ActionScript, you specify Array as the data type of the variable. However, you cannot specify the data type of the elements of the Array.\n  </p>\n  <p>\n    To allow the Flex MXML compiler to perform type checking on Array elements, you can use the [ArrayElementType] metadata tag to specify the allowed data type of the Array elements.\n  </p>\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic var newStringProperty:Array;\npublic var newNumberProperty:Array;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n[ArrayElementType("String")]\npublic var newStringProperty:Array;\n\n[ArrayElementType("Number")]\npublic var newNumberProperty:Array;\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224530399	1576224530400	1	flex
497	"switch" statements should not be nested	S1821	\N	flex	<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as belonging to an outer statement. Therefore nested <code>switch</code> statements should be avoided.</p>\n<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements, but if you cannot, then consider moving the inner <code>switch</code> to another function.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic function func(foo:Number, bar:Number):void\n{\n  switch (foo)\n  { \n    case 1:\n      // do something\n      break;\n    case 2:\n      switch (bar)  // Noncompliant\n      {\n        case 89:  // It's easy to lose sight of what's being tested; is it foo or bar?\n          // ...\n          break;\n        case 90:\n          // ...\n          break;\n      }\n      break;\n    case 3:\n      // do something\n      break;\n    default:\n      break;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n\npublic function func(foo:Number, bar:Number):void\n{\n  switch (foo)\n  { \n    case 1:\n      // ...\n      break;\n    case 2:\n      handleBar(bar);\n      break;\n    case 3:\n      // ...\n      break;\n    default:\n      break;\n  }\n}\n\npublic function handleBar(bar:Number):void\n{\n  switch (bar)\n  {\n    case 89:\n      // ...\n      break;\n    case 90:\n      // ...\n      break;\n  }\n}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	10min	\N	pitfall	0	HTML	1576224530401	1576224530443	1	flex
498	Statements should be on separate lines	OneStatementPerLine	\N	flex	<p>\n  For better readability, do not put more than one statement on a single line.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n\n\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>	1	\N	READY	flex	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224530492	1576224530493	1	flex
499	Overriding methods should do more than simply call the same method in the super class	S1185	\N	flex	<p>\n  Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\noverride public function doSomething() : void\n{\n  super.doSomething();\n}\n\noverride public function isLegal(action:Action) : Boolean\n{\n  return super.isLegal(action);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\noverride public function doSomething() : void\n{\n  super.doSomething();                             // Compliant - not simply forwarding the call\n  doSomethingElse();\n}\n\noverride public function isLegal(action:Action) : Boolean\n{\n  return super.isLegal(new Action(...));   // Compliant - not simply forwarding the call\n}\n\n[Deprecated(replacement="isAuthorized")]\noverride public function isLegal(action:Action) : Boolean\n{\n  return super.isLegal(action);   // Compliant as there is a metadata\n}\n</pre>	1	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224530494	1576224530495	1	flex
500	Functions should not contain too many return statements	S1142	\N	flex	<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a return statement is encountered. This makes it harder to read and understand the logic of the function.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default threshold of 3:</p>\n\n<pre>\nfunction myFunction():boolean { // Noncompliant as there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	20min	\N	brain-overload	0	HTML	1576224530497	1576224530498	1	flex
501	Methods should not be empty	S1186	\N	flex	<p>\n  There are several reasons for a method not to have a method body:\n</p>\n\n<ul>\n    <li>It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production.</li>\n    <li>It is not yet, or never will be, supported. In this case an <code>NotSupportedException</code> should be thrown.</li>\n    <li>The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override.</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic override function doSomething():void {\n}\n\npublic function doSomethingElse():void {\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic override function doSomething():void {\n  throw new IllegalOperationError("doSomething cannot be performed because ...");\n}\n\npublic function doSomethingElse():void {\n  //This method is empty because ...\n}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224530500	1576224530501	1	flex
502	Collapsible "if" statements should be merged	S1066	\N	flex	<p>\n  Merging collapsible <code>if</code> statements increases the code's readability.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  if (condition2) {             // NonCompliant\n    ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1 && condition2) {\n  ...\n}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224530502	1576224530503	1	flex
503	Package names should comply with a naming convention	S120	\N	flex	<p>\n  Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z]+(\\[a-z][a-z0-9]*)*$</code>:</p>\n<pre>\npackage org.Example { // Noncompliant\n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example {\n...\n}\n</pre>	1	\N	READY	flex	CONSTANT_ISSUE	\N	10min	\N	convention	0	HTML	1576224530505	1576224530506	1	flex
504	Event names should not be hardcoded in event listeners	S1462	\N	flex	<p>\n  Using plain string event names in even listeners is an anti-pattern; if the event is renamed, the application can start behaving unexpectedly. A constant variable should be used instead.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport flash.display.Sprite;\nimport flash.events.MouseEvent;\n\nclass ChildSprite extends Sprite\n{\n    public function ChildSprite()\n    {\n        ...\n        addEventListener("CustomEvent", clickHandler);\n    }\n}\n\nfunction clickHandler(event:CustomEvent):void\n{\n    trace("clickHandler detected an event of type: " + event.type);\n    trace("the this keyword refers to: " + this);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nimport flash.display.Sprite;\nimport flash.events.MouseEvent;\n\nclass ChildSprite extends Sprite\n{\n   public const CUSTOM_EVENT:String = "CustomEvent";\n\n    public function ChildSprite()\n    {\n        ...\n        addEventListener(CUSTOM_EVENT, clickHandler);\n    }\n}\n\nfunction clickHandler(event:CustomEvent):void\n{\n    trace("clickHandler detected an event of type: " + event.type);\n    trace("the this keyword refers to: " + this);\n}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	design	0	HTML	1576224530508	1576224530509	1	flex
505	Event types should be defined in metadata tags	S1463	\N	flex	<p>\n  According to the Flex documentation :\n</p>\n\n<blockquote>\n  <p>\n    In an ActionScript file, when you define component events or other aspects of a component that affect more than a single property, you add the metadata tag outside the class definition so that the metadata is bound to the entire class, as the following example shows:\n  </p>\n\n  <pre>\n  // Add the [Event] metadata tag outside of the class file.\n  [Event(name="enableChange", type="flash.events.Event")]\n  public class ModalText extends TextArea {\n\n      ...\n\n      // Define class properties/methods\n      private var _enableTA:Boolean;\n\n      // Add the [Inspectable] metadata tag before the individual property.\n      [Inspectable(defaultValue="false")]\n      public function set enableTA(val:Boolean):void {\n          _enableTA = val;\n          this.enabled = val;\n\n          // Define event object, initialize it, then dispatch it.\n          var eventObj:Event = new Event("enableChange");\n          dispatchEvent(eventObj);\n      }\n  }\n  </pre>\n</blockquote>\n<p>\n  In this example, the "enableChange" event must be considered part of the API. Therefore, it should be strongly typed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n[Event(name="enableChange")]\npublic class ModalText extends TextArea {...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n[Event(name="enableChange", type="flash.events.Event")]\npublic class ModalText extends TextArea {...}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	design	0	HTML	1576224530510	1576224530557	1	flex
506	Unused private function should be removed	S1144	\N	flex	<p>\n  Private functions that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  private function Foo(){}   //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static function doSomething():void\n  {\n    var foo:Foo = new Foo();\n    ...\n  }\n  private function unusedPrivateFunction():void {...}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  private function Foo(){}   //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static function doSomething():void\n  {\n    var foo:Foo = new Foo();\n    ...\n  }\n}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	unused	0	HTML	1576224530603	1576224530606	1	flex
507	Useless "if(true) {...}" and "if(false){...}" blocks should be removed	S1145	\N	flex	<p>\n  <code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional.\n  <code>if</code> statements with conditions that are always true are completely redundant, and make the code less readable.\n</p>\n\n<p>There are three possible causes for the presence of such code: </p>\n\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed.</li>\n  <li> Some value was left unset.</li>\n  <li> Some logic is not doing what the programmer thought it did.</li>\n</ul>\n\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (true) {  \n  doSomething(); \n}\n...\nif (false) {  \n  doSomethingElse(); \n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\ndoSomething(); \n...\n</pre>\n\n<h2>See</h2>\n\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code\n  </li><li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False\n</li><li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True\n</li><li> MISRA C:2004, 13.7\n</li><li> MISRA C:2012, 14.3\n</li></ul>	2	\N	READY	flex	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224530611	1576224530657	1	flex
508	Each ManagedEvents metadata tag should have a companion Event metadata tag	S1464	\N	flex	<p>\n  The "ManagedEvents" metadata tag allows you to flag an event as being managed. By definition this "ManageEvents" metadata tag should be used in pair with an "Event" metadata tag.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n[Event(name="message", type="my.package.MyEvemt")]\n[ManagedEvents("mes")]       //This "mes" event is not defined with the "Event" metadata tag\npublic class MyClass {...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n[Event(name="message", type="my.package.MyEvemt")]\n[ManagedEvents("message")]\npublic class MyClass {...}\n</pre>	4	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224530701	1576224530704	2	flex
509	Unused private fields should be removed	S1068	\N	flex	<p>\n  If a private field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will improve maintainability because developers will not wonder what the variable is used for.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n public class MyClass {\n  private var foo:int = 4;                       //foo is unused\n\n  public function compute(a:int):int{\n    return a * 4;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public function compute(a:int):int{\n    return a * 4;\n  }\n}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	unused	0	HTML	1576224530707	1576224530709	1	flex
510	LocalConnection should be configured to narrowly specify the domains with which local connections to other Flex application are allowed	S1465	\N	flex	<p>\n  A LocalConnection object is used to invoke a method in another LocalConnection object, either within a single SWF file or between multiple SWF files. This kind of local connection should be authorized only when the origin (domain) of the other Flex applications is perfectly defined.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nlocalConnection.allowDomain("*");\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nlocalConnection.allowDomain("www.myDomain.com");\n</pre>	3	\N	READY	flex	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224530712	1576224530714	3	flex
516	XPath rule	XPath	\N	flex	<p>This rule allows the definition of custom rules using XPath expressions.</p>\n\n<p>Issues are created depending on the return value of the XPath expression. If the XPath expression returns:</p>\n\n<ul>\n  <li> a single or list of AST nodes, then a line issue with the given message is created for each node\n  </li><li> a boolean, then a file issue with the given message is created only if the boolean is true\n</li><li> anything else, no issue is created\n</li></ul>\n\n<p>Here is an example of an XPath expression to log an issue on each if statement:</p>\n\n<pre>\n//IF_STATEMENT\n</pre>	2	\N	READY	flex	\N	\N	\N	\N	\N	1	HTML	1576224530734	1576224530734	1	flex
517	Nested blocks of code should not be left empty	S108	\N	flex	<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfor (var i:int = 0; i &lt; 42; i++){}  // Noncompliant\n\ntry {                               // Noncompliant\n} catch (error)\n{\n    ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfor (var i:int = 0; i &lt; 42; i++);\n\nfor (var i:int = 0; i &lt; 42; i++) {\n  trace(i);\n}\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>When a block contains a comment, this block is not considered to be empty.</p>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224530738	1576224530738	1	flex
518	Functions should not have too many parameters	S107	\N	flex	<p>\nA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic function addData(p1 : int, p2 : int, p3 : int, p4 : int, p5 : int): void  {\n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic function addData(p1 : int, p2 : int, p3 : int, p4 : int): void  {\n...\n}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	20min	\N	brain-overload	0	HTML	1576224530740	1576224530740	1	flex
519	Public constants and fields initialized at declaration should be "const static" rather than merely "const"	S1170	\N	flex	<p>\n  Making a public constant just <code>const</code> as opposed to <code>static const</code> leads to duplicating its value for every instance of the class, uselessly increasing the amount of memory required to execute the application.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass\n{\n  public const THRESHOLD:int = 3;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass\n{\n  public static const THRESHOLD:int = 3;\n}\n</pre>	1	\N	READY	flex	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224530743	1576224530743	1	flex
543	Interface methods should be callable by derived types	S4039	\N	csharpsquid	<p>When a base type explicitly implements a public interface method, that method is only accessible in derived types through a reference to the\ncurrent instance (namely <code>this</code>). If the derived type explicitly overrides that interface method, the base implementation becomes\ninaccessible.</p>\n<p>This rule raises an issue when an unsealed, externally visible type provides an explicit method implementation of a <code>public interface</code>\nand does not provide an alternate, externally visible method with the same name.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public interface IMyInterface\n  {\n    void MyMethod();\n  }\n\n  public class Foo : IMyInterface\n  {\n    void IMyInterface.MyMethod()  // Noncompliant\n    {\n      // Do something ...\n    }\n  }\n\n  public class Bar : Foo, IMyInterface\n  {\n    public void MyMethod()\n   {\n     // Can't access base.MyMethod()\n    // ((IMyInterface)this).MyMethod() would be a recursive call\n   }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public interface IMyInterface\n  {\n    void MyMethod();\n  }\n\n  public class Foo : IMyInterface\n  {\n    void IMyInterface.MyMethod()\n    {\n      MyMethod();\n    }\n    void MyMethod()\n    {\n      // Do something ...\n    }\n  }\n\n  public class Bar : Foo, IMyInterface\n  {\n    public void MyMethod()\n   {\n      // Do something\n      base.MyMethod();\n   }\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not report a violation for an explicit implementation of <code>IDisposable.Dispose</code> when an externally visible\n<code>Close()</code> or <code>System.IDisposable.Dispose(Boolean)</code> method is provided.</p>	3	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224531454	1576224531500	1	csharp
544	"ConstructorArgument" parameters should exist in constructors	S4260	\N	csharpsquid	<p>When creating a custom Markup Extension that accepts parameters in WPF, the <code>ConstructorArgument</code> markup must be used to identify the\ndiscrete properties that match these parameters. However since this is done via a string, the compiler will not notice if there are typos.</p>\n<p>This rule raises an issue when the string argument to <code>ConstructorArgumentAttribute</code> doesn't match any parameter of any constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace myLibrary\n{\n  public class MyExtension : MarkupExtension\n  {\n    public MyExtension() { }\n\n    public MyExtension(object value1, object value2)\n    {\n      Value1 = value1;\n      Value2 = value2;\n    }\n\n    [ConstructorArgument("value1")]\n    public object Value1 { get; set; }\n\n    [ConstructorArgument("value3")]  // Noncompliant\n    public object Value2 { get; set; }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace myLibrary\n{\n  public class MyExtension : MarkupExtension\n  {\n    public MyExtension() { }\n\n    public MyExtension(object value1, object value2)\n    {\n      Value1 = value1;\n      Value2 = value2;\n    }\n\n    [ConstructorArgument("value1")]\n    public object Value1 { get; set; }\n\n    [ConstructorArgument("value2")]\n    public object Value2 { get; set; }\n  }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224531546	1576224531592	2	csharp
520	Unused function parameters should be removed	S1172	\N	flex	<p>\n  Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething(a:int, b:int):void      // "b" is unused\n{\n  compute(a);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(a:int):void\n{\n  compute(a);\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>The following cases are ignored</p>\n<ul>\n  <li>event handlers.</li>\n  <li>overriding methods.</li>\n  <li>all methods in classes implementing one or more interfaces.</li>\n  <li>methods which are empty or where the body consists of a single comment or a single throw statement (i.e. where the intention is apparently to simulate an abstract class).</li>\n</ul>\n<pre>\noverride function doSomething(a:int):void {    // ignored\n  compute(a);\n}\n\n...\n\nclass AbstractSomething {\n  public function doSomething(a:int) {  // ignored\n    throw new IllegalOperationError("doSomething() is abstract");\n  }\n\n...\n\ninterface I {\n  function action(a:int, b:int);\n}\n\nclass C extends I {\n  function action(a:int, b:int) { // ignored\n    return doSomethignWith(a);\n  }\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n  <li> MISRA C++:2008, 0-1-11\n  </li><li> MISRA C:2012, 2.7\n</li></ul>	2	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	misra,unused	0	HTML	1576224530745	1576224530745	1	flex
521	Lines should not be too long	LineLength	\N	flex	<p>\n  Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n</p>	1	\N	READY	flex	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224530746	1576224530747	1	flex
522	Flex parser failure	ParsingError	\N	flex	<p>\nWhen the Flex parser fails, it is possible to record the failure as a violation on the file.\nThis way, not only it is possible to track the number of files that do not parse but also to easily find out why they do not parse.\n</p>	2	\N	READY	flex	CONSTANT_ISSUE	\N	30min	\N	suspicious	0	HTML	1576224530749	1576224530749	1	flex
523	Copyright and license headers should be defined	S1451	\N	flex	<p>\n  Each source file should start with a header stating file ownership and the license which must be used to distribute the application.<br/>\n  This rule must be fed with the header text that is expected at the beginning of every file.\n</p>\n\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>	4	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224530750	1576224530751	1	flex
524	Public classes, methods, properties and metadata should be documented with ASDoc	S1176	\N	flex	<p>\n  Try to imagine using the standard Flex API without ASDoc. It would be a nightmare, because ASDoc is the only way to understand of the contract of the API.</br>\n  Documenting an API with ASDoc increases the productivity of the developers use it.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  public var myLabel:String;\n\n  public function myMethod(param1:String):Boolean {...}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n/**\n * my doc\n */\npublic class MyClass {\n  /**\n   * my doc\n   */\n  public var myLabel:String;\n\n  /**\n   * my doc\n   * @param param1 my doc\n   * @return my doc\n   */\n  public function myMethod(param1:String):Boolean {...}\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Classes or class elements with an ASDoc <code>@private</code> comment are ignored by this rule.</p>\n<pre>\n/**\n * @private  // This class and all its elements are ignored\n */\npublic class MyClass {  // Compliant\n\n  public var myLabel:String;   // Compliant\n}\n\npublic class AnotherClass {  // Noncompliant; class not @private and not documented\n\n  /**\n   * @private\n   */\n  public var name:String;  // Compliant\n}\n</pre>	2	\N	READY	flex	CONSTANT_ISSUE	\N	10min	\N	convention	0	HTML	1576224530753	1576224530753	1	flex
525	Multiple "++" or "--" unary operators should not be used in a single arithmetic expression	S1454	\N	flex	<p>\n  Using several "--" or "++" unary operators in the same arithmetic expression can quickly make the expression unreadable.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n var j:int = foo++ - --bar;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nbar--;\nvar j:int = foo++ - bar;\n</pre>	1	\N	READY	flex	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224530759	1576224530760	1	flex
526	Package definition should be separate from Class definition	S1455	\N	flex	<p>Declaring the package and class together has been deprecated since ActionScript 3. The package definition should be declared outside of the class definition even if the old syntax is still supported. </p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nclass P.A {...} \n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npackage P {    \n    class A {...}\n}\n\n</pre>	1	\N	READY	flex	CONSTANT_ISSUE	\N	5min	\N	obsolete	0	HTML	1576224530761	1576224530761	1	flex
527	XML files containing a prolog header should start with "<?xml" characters	S1778	S1778	xml	<p>The prolog header is the following piece of code that some XML documents start with:</p>\n<pre>\n&lt;?xml version="y.x" encoding="zzzzz"?&gt;\n</pre>\n<p>When the prolog exists in an XML document, it should be at the beginning of the file to enable programs to determine the encoding of non-UTF-8,\nnon-UTF-16 files.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;!-- Generated file --&gt;  &lt;!--  Noncompliant  --&gt;\n&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n&lt;firstNode&gt;\n  content\n&lt;/firstNode&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n&lt;!-- Generated file --&gt;\n&lt;firstNode&gt;\n  content\n&lt;/firstNode&gt;\n</pre>	3	\N	READY	xml	\N	\N	\N	\N	\N	0	HTML	1576224530771	1576224530771	2	xml
528	Source code should be indented consistently	IndentCheck	IndentCheck	xml	<p>Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers within a team also\nreduces the differences that are committed to source control systems, making code reviews easier. </p>\n<p>By default this rule checks that each block of code is indented, although it does not check the size of the indent. Parameter "indentSize" allows\nthe expected indent size to be defined. Only the first line of a badly indented section is reported.</p>	1	\N	READY	xml	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224530817	1576224530818	1	xml
529	Newlines should follow each element	NewlineCheck	NewlineCheck	xml	<p>Each element should be on a line to itself.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;parent&gt;&lt;child /&gt;&lt;/parent&gt;  &lt;!-- Noncompliant --&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;parent&gt;\n  &lt;child /&gt;\n&lt;/parent&gt;\n</pre>	2	\N	READY	xml	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224530872	1576224530874	1	xml
530	XML parser failure	S2260	S2260	xml	<p>When the XML parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.</p>	2	\N	READY	xml	CONSTANT_ISSUE	\N	30min	\N	suspicious	0	HTML	1576224530878	1576224530880	1	xml
531	Track breaches of an XPath rule	XPathCheck	XPathCheck	xml	<p>This rule allows the definition of custom rules using XPath expressions.</p>\n<p>Issues are created depending on the return value of the XPath expression. If the XPath expression returns:</p>\n<ul>\n  <li> a single or list of AST nodes, then a line issue with the given message is created for each node </li>\n  <li> a boolean, then a file issue with the given message is created only if the boolean is true </li>\n  <li> anything else, no issue is created </li>\n</ul>\n<p>Here is an example of an XPath expression to log an issue on each 'td' tag using the 'nowrap' deprecated attribute: </p>\n<pre>\n//td[@nowrap]\n</pre>	2	\N	READY	xml	\N	\N	\N	\N	\N	1	HTML	1576224530884	1576224530884	1	xml
532	XML files should be valid	XmlSchemaCheck	XmlSchemaCheck	xml	<p>This rule allows validation of XML files against XML Schema using Xerces parser.</p>\n<p>The "schemas" parameter can be set to:</p>\n<ul>\n  <li> the namespace or short name of a built-in schema (ex: xhtml1-strict or http://www.w3.org/1999/xhtml) </li>\n  <li> the URL to a schema (ex: http://www.springframework.org/schema/beans/spring-beans-3.2.xsd) </li>\n  <li> the relative path to a schema on the filesystem (ex: schemas/xsd/mycustomschema.xsd) </li>\n</ul>\n<p>Default value: <code>autodetect</code>. In this case, the parser will try to load the schema based on the doctype or the namespace declaration in\nthe document.</p>\n<p>Files to be validated by the schema can be specified through inclusion pattern using the "filePattern" parameter.</p>\n<p>Built-in schemas:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>DESCRIPTION</th>\n      <th>NAMESPACE OR SHORT NAME</th>\n      <th>DOCTYPE</th>\n    </tr>\n    <tr>\n      <td>XML</td>\n      <td>http://www.w3.org/2001/xml.xsd</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>XML</td>\n      <td>http://www.w3.org/XML/1998/namespace</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>XHTML1.0 Strict</td>\n      <td>http://www.w3.org/1999/xhtml</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>XHTML1.0 Strict</td>\n      <td>xhtml1-strict</td>\n      <td>-//W3C//DTD XHTML 1.0 Strict//EN</td>\n    </tr>\n    <tr>\n      <td>XHTML1.0 Transitional</td>\n      <td>xhtml1-transitional</td>\n      <td>-//W3C//DTD XHTML 1.0 Transitional//EN</td>\n    </tr>\n    <tr>\n      <td>XHTML1.0 Frameset</td>\n      <td>xhtml1-frameset</td>\n      <td>-//W3C//DTD XHTML 1.0 Frameset//EN</td>\n    </tr>\n    <tr>\n      <td>XHTML1.1</td>\n      <td> </td>\n      <td>-//W3C//DTD XHTML 1.1 Strict//EN</td>\n    </tr>\n    <tr>\n      <td>JSF Core</td>\n      <td>http://java.sun.com/jsf/core</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>JSF HTML Basic</td>\n      <td>http://java.sun.com/jsf/html</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>JSF Facelets</td>\n      <td>http://java.sun.com/jsf/facelets</td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td>Maven Project Model</td>\n      <td>http://maven.apache.org/POM/4.0.0</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>	2	\N	READY	xml	\N	\N	\N	\N	\N	1	HTML	1576224530895	1576224530895	2	xml
533	Tabulation characters should not be used	IllegalTabCheck	IllegalTabCheck	xml	<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>	1	\N	READY	xml	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224530948	1576224530950	1	xml
534	"SafeHandle.DangerousGetHandle" should not be called	S3869	\N	csharpsquid	<p>Not surprisingly, the <code>SafeHandle.DangerousGetHandle</code> method is dangerous. That's because it may not return a valid handle. Using it can\nlead to leaks and vulnerabilities. While it is possible to use the method successfully, it's extremely difficult to do correctly, so the method should\nsimply be avoided altogether.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic void Main(string[] args)\n{\n    System.Reflection.FieldInfo fieldInfo = ...;\n    SafeHandle handle = (SafeHandle)fieldInfo.GetValue(rKey);\n    IntPtr dangerousHandle = handle.DangerousGetHandle();  // Noncompliant\n}\n</pre>	4	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	leak,unpredictable	0	HTML	1576224530959	1576224531008	2	csharp
535	"Equals(Object)" and "GetHashCode()" should be overridden in pairs	S1206	\N	csharpsquid	<p>There is a contract between <code>Equals(object)</code> and <code>GetHashCode()</code>: If two objects are equal according to the\n<code>Equals(object)</code> method, then calling <code>GetHashCode()</code> on each of them must yield the same result. If this is not the case, many\ncollections won't handle class instances correctly.</p>\n<p>In order to comply with the contract, <code>Equals(object)</code> and <code>GetHashCode()</code> should be either both inherited, or both\noverridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {    // Noncompliant - should also override "hashCode()"\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {    // Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n  @Override\n  public int hashCode() {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/581.html">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/EYYbAQ">CERT, MET09-J.</a> - Classes that define an equals() method must also define a\n  hashCode() method </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	cert,cwe	0	HTML	1576224531053	1576224531095	2	csharp
536	Jump statements should not be redundant	S3626	\N	csharpsquid	<p>Jump statements, such as <code>return</code>, <code>yield break</code>, <code>goto</code>, and <code>continue</code> let you change the default\nflow of program execution, but jump statements that direct the control flow to the original direction are just a waste of keystrokes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid Foo()\n{\n  goto A; // Noncompliant\n  A:\n  while (condition1)\n  {\n    if (condition2)\n    {\n      continue; // Noncompliant\n    }\n    else\n    {\n      DoTheThing();\n    }\n  }\n  return; // Noncompliant; this is a void method\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid Foo()\n{\n  while (condition1)\n  {\n    if (!condition2)\n    {\n      DoTheThing();\n    }\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	1min	\N	clumsy,redundant	0	HTML	1576224531142	1576224531146	1	csharp
537	Culture should be specified for "string" operations	S1449	\N	csharpsquid	<p><code>string.ToLower()</code>, <code>ToUpper</code>, <code>IndexOf</code>, <code>LastIndexOf</code>, and <code>Compare</code> are all\nculture-dependent, as are some (floating point number and <code>DateTime</code>-related) calls to <code>ToString</code>. Fortunately, all have\nvariants which accept an argument specifying the culture or formatter to use. Leave that argument off and the call will use the system default\nculture, possibly creating problems with international characters.</p>\n<p><code>string.CompareTo()</code> is also culture specific, but has no overload that takes a culture information, so instead it's better to use\n<code>CompareOrdinal</code>, or <code>Compare</code> with culture.</p>\n<p>Calls without a culture may work fine in the system's "home" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar lowered = someString.ToLower(); //Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar lowered = someString.ToLower(CultureInfo.InvariantCulture);\n</pre>\n<p>or</p>\n<pre>\nvar lowered = someString.ToLowerInvariant();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/EwAiAg">CERT, STR02-J.</a> - Specify an appropriate locale when comparing\n  locale-dependent data </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert,unpredictable	0	HTML	1576224531151	1576224531197	1	csharp
538	Classes implementing "IEquatable<T>" should be sealed	S4035	\N	csharpsquid	<p>When a class implements the <code>IEquatable&lt;T&gt;</code> interface, it enters a contract that, in effect, states "I know how to compare two\ninstances of type T or any type derived from T for equality.". However if that class is derived, it is very unlikely that the base class will know how\nto make a meaningful comparison. Therefore that implicit contract is now broken.</p>\n<p>Alternatively <code>IEqualityComparer&lt;T&gt;</code> provides a safer interface and is used by collections or <code>Equals</code> could be made\n<code>virtual</code>.</p>\n<p>This rule raises an issue when a unsealed, <code>public</code> or <code>protected</code> class implements <code>IEquitable&lt;T&gt;</code> and the\n<code>Equals</code> is not <code>virtual</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  class Base : IEquatable&lt;Base&gt; // Noncompliant\n  {\n    bool Equals(Base other)\n    {\n      if (other == null) { return false };\n      // do comparison of base properties\n    }\n\n    override bool Equals(object other)  =&gt; Equals(other as Base);\n  }\n\n  class A : Base\n  {\n    bool Equals(A other)\n    {\n      if (other == null) { return false };\n      // do comparison of A properties\n      return base.Equals(other);\n    }\n\n    override bool Equals(object other)  =&gt; Equals(other as A);\n  }\n\n  class B : Base\n  {\n    bool Equals(B other)\n    {\n      if (other == null) { return false };\n      // do comparison of B properties\n     return base.Equals(other);\n    }\n\n    override bool Equals(object other)  =&gt; Equals(other as B);\n  }\n\n  static void Main() {\n    A a = new A();\n    B b = new B();\n\n    Console.WriteLine(a.Equals(b)); // This calls the WRONG equals. This causes Base::Equals(Base)\n    //  to be called which only compares the properties in Base and ignores the fact that\n    // a and b are different types. In the working example A::Equals(Object) would have been\n    // called and Equals would return false because it correctly recognizes that a and b are\n    // different types. If a and b have the same base properties they will  be returned as equal.\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public sealed class Foo : IEquatable&lt;Foo&gt;\n    {\n        public bool Equals(Foo other)\n        {\n            // Your code here\n        }\n    }\n}\n</pre>\n<h2>See</h2>\n<p><a href="http://blog.mischel.com/2013/01/05/inheritance-and-iequatable-do-not-mix/">Inheritance and IEquatable do not mix</a></p>\n<p><a href="https://msdn.microsoft.com/en-us/library/ms132151(v=vs.110).aspx">IEqualityComparer&lt;T&gt; Interface</a></p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	pitfall	0	HTML	1576224531242	1576224531289	1	csharp
539	Empty collections should not be accessed or iterated	S4158	\N	csharpsquid	<p>When a collection is empty it makes no sense to access or iterate it. Doing so anyway is surely an error; either population was accidentally\nomitted or the developer doesn't understand the situation.</p>\n<p>This rule raises an issue when any use is made of an empty collection other than the following ignored calls: <code>Add</code>,\n<code>AddRange</code>, <code>Equals</code>, <code>GetHashCode</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar strings = new List&lt;string&gt;();\n\nstrings.Remove("bar");  // Noncompliant\n\nif (strings.Contains("foo")) {}  // Noncompliant\n\nforeach (var str in strings) {}  // Noncompliant\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224531335	1576224531338	1	csharp
540	Collection sizes and array length comparisons should make sense	S3981	\N	csharpsquid	<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or\nequal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return\n<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(collection.Count &gt;= 0){...}\n\nif(enumerable.Count() &lt; 0){...}\n\nif(array.Length &gt;= 0){...}\n\nbool result = array.Length &gt;=0;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (list.Any()) { ... }\n\nif (list.Count &gt; 0) { ... }\n\nif (array.Length &gt;= 42) { ... }\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224531342	1576224531345	2	csharp
541	Classes should not be coupled to too many other classes (Single Responsibility Principle)	S1200	\N	csharpsquid	<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book "Principles of Object Oriented Design", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\npublic class Foo    // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n{\n  private T1 a1;    // Foo is coupled to T1\n  private T2 a2;    // Foo is coupled to T2\n  private T3 a3;    // Foo is coupled to T3\n\n  public T4 Compute(T5 a, T6 b)    // Foo is coupled to T4, T5 and T6\n  {\n    T7 result = a.Process(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar    // Compliant - Bar depends on 2 classes: T8 and T9\n  {\n    public T8 a8;\n    public T9 a9;\n  }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2h	\N	brain-overload	0	HTML	1576224531349	1576224531393	1	csharp
542	Exception should not be created without being thrown	S3984	\N	csharpsquid	<p>Creating a new <code>Exception</code> without actually throwing it is useless and is probably due to a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x &lt; 0)\n{\n  new ArgumentException("x must be nonnegative");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x &lt; 0)\n{\n  throw new ArgumentException("x must be nonnegative");\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224531446	1576224531449	2	csharp
563	Neither "Thread.Resume" nor "Thread.Suspend" should be used	S3889	\N	csharpsquid	<p><code>Thread.Suspend</code> and <code>Thread.Resume</code> can give unpredictable results, and both methods have been deprecated. Indeed, if\n<code>Thread.Suspend</code> is not used very carefully, a thread can be suspended while holding a lock, thus leading to a deadlock. Other safer\nsynchronization mechanisms should be used, such as <code>Monitor</code>, <code>Mutex</code>, and <code>Semaphore</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic void Main(string[] args)\n{\n  // ...\n  Thread.CurrentThread.Suspend(); // Noncompliant\n  Thread.CurrentThread.Resume(); // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://msdn.microsoft.com/en-us/library/system.threading.thread.resume.aspx">Thread.Resume Method ()</a> </li>\n  <li> <a href="https://msdn.microsoft.com/en-us/library/system.threading.thread.suspend(v=vs.110).aspx">Thread.Suspend Method ()</a> </li>\n</ul>	4	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	multi-threading,unpredictable	0	HTML	1576224532200	1576224532202	2	csharp
564	Method parameters, caught exceptions and foreach variables' initial values should not be ignored	S1226	\N	csharpsquid	<p>While it is technically correct to assign to parameters from within method bodies, it is better to use temporary variables to store intermediate\nresults.</p>\n<p>This rule will typically detect cases where a constructor parameter is assigned to itself instead of a field of the same name, i.e. when\n<code>this</code> was forgotten.</p>\n<p>Allowing parameters to be assigned to also reduces the code readability as developers will not be able to know whether the original parameter or\nsome temporary variable is being accessed without going through the whole method.</p>\n<p>Moreover, some developers might also expect assignments of method parameters to be visible from callers, which is not the case and can confuse\nthem.</p>\n<p>All parameters should be treated as <code>readonly</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n  public string name;\n\n  public MyClass(string name)\n  {\n    name = name;                    // Noncompliant - useless identity assignment\n  }\n\n  public int Add(int a, int b)\n  {\n    a = a + b;                      // Noncompliant\n\n    /* additional logic */\n\n    return a;                       // Seems like the parameter is returned as is, what is the point?\n  }\n\n  public static void Main()\n  {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.Add(a, b);                  // Variable "a" will still hold 40 after this call\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass\n{\n  public string name;\n\n  public MyClass(string name)\n  {\n    this.name = name;               // Compliant\n  }\n\n  public int Add(int a, int b)\n  {\n    return a + b;                   // Compliant\n  }\n\n  public static void Main()\n  {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.Add(a, b);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	misra	0	HTML	1576224532203	1576224532249	1	csharp
565	Silly bit operations should not be performed	S2437	\N	csharpsquid	<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>\n<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and\n<code>anyValue | 0</code>.</p>	4	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224532294	1576224532297	1	csharp
545	Duplicate values should not be passed as arguments	S4142	\N	csharpsquid	<p>There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was\nintended for one of the arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (Compare(point.X, point.X) != 0) // Noncompliant\n{\n&nbsp;&nbsp;//...\n}\n\nif (DoSomething(GetNextValue(), GetNextValue()))  // Noncompliant\n{\n&nbsp;&nbsp;// ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (Compare(point.X, point.Y) != 0)\n{\n&nbsp;&nbsp;//...\n}\n\nvar v1 = GetNextValue();\nvar v2 = GetNextValue();\nif (DoSomething(v1, v2))\n{\n&nbsp;&nbsp;// ...\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224531636	1576224531637	1	csharp
546	Members should not be initialized to default values	S3052	\N	csharpsquid	<p>The compiler automatically initializes class fields, auto-properties and events to their default values before setting them with any initialization\nvalues, so there is no need to explicitly set a member to its default value. Further, under the logic that cleaner code is better code, it's\nconsidered poor style to do so.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass X\n{\n  public int field = 0; // Noncompliant\n  public object o = null; // Noncompliant\n  public object MyProperty { get; set; } = null; // Noncompliant\n  public event EventHandler MyEvent = null;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass X\n{\n  public int field;\n  public object o;\n  public object MyProperty { get; set; }\n  public event EventHandler MyEvent;\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>const</code> fields are ignored.</p>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	convention,finding	0	HTML	1576224531638	1576224531639	1	csharp
547	Delegates should not be subtracted	S3172	\N	csharpsquid	<p>In C#, delegates can be added together to chain their execution, and subtracted to remove their execution from the chain.</p>\n<p>Subtracting a chain of delegates from another one might yield unexpected results as shown hereunder - and is likely to be a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyDelegate first, second, third, fourth;\nfirst = () =&gt; Console.Write("1");\nsecond = () =&gt; Console.Write("2");\nthird = () =&gt; Console.Write("3");\nfourth = () =&gt; Console.Write("4");\n\nMyDelegate chain1234 = first + second + third + fourth; // Compliant - chain sequence = "1234"\nMyDelegate chain12 = chain1234 - third - fourth; // Compliant - chain sequence = "12"\n\n\nMyDelegate chain14 = first + fourth; // creates a new MyDelegate instance which is a list under the covers\nMyDelegate chain23 = chain1234 - chain14; // Noncompliant; (first + fourth) doesn't exist in chain1234\n\n\n// The chain sequence of "chain23" will be "1234" instead of "23"!\n// Indeed, the sequence "1234" does not contain the subsequence "14", so nothing is subtracted\n// (but note that "1234" contains both the "1" and "4" subsequences)\nchain23 = chain1234 - (first + fourth); // Noncompliant\n\nchain23(); // will print "1234"!\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMyDelegate chain23 = chain1234 - first - fourth; // Compliant - "1" is first removed, followed by "4"\n\nchain23(); // will print "23"\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	30min	\N	\N	0	HTML	1576224531640	1576224531683	2	csharp
548	Enumerations should have "Int32" storage	S4022	\N	csharpsquid	<p>By default the storage type of an <code>enum</code> is <code>Int32</code>. In most cases it is not necessary to change this. In particular you will\nnot achieve any performance gain by using a smaller data type (e.g. <code>Byte</code>) and may limit future uses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public enum Visibility : sbyte // Noncompliant\n    {\n        Visible = 0,\n        Invisible = 1,\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public enum Visibility\n    {\n        Visible = 0,\n        Invisible = 1,\n    }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224531728	1576224531729	1	csharp
549	Interfaces should not be empty	S4023	\N	csharpsquid	<p>Empty interfaces are usually used as a marker or a way to identify groups of types. The preferred way to achieve this is to use custom\nattributes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public interface MyInterface // Noncompliant\n   {\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public interface MyInterface\n   {\n      void Foo();\n   }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224531731	1576224531732	1	csharp
550	"GC.SuppressFinalize" should not be called	S3971	\N	csharpsquid	<p><code>GC.SuppressFinalize</code> requests that the system not call the finalizer for the specified object. This should only be done when\nimplementing <code>Dispose</code> as part of the <a href="https://msdn.microsoft.com/en-us/library/b1yfkh5e.aspx">Dispose Pattern</a>.</p>\n<p>This rule raises an issue when <code>GC.SuppressFinalize</code> is called outside that pattern.</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224531734	1576224531735	1	csharp
551	Assemblies should be marked with "NeutralResourcesLanguageAttribute"	S4026	\N	csharpsquid	<p>It is important to inform the <code>ResourceManager</code> of the language used to display the resources of the neutral culture for an assembly.\nThis improves lookup performance for the first resource loaded. </p>\n<p>This rule raises an issue when an assembly contains a <code>ResX</code>-based resource but does not have the\n<code>System.Resources.NeutralResourcesLanguageAttribute</code> applied to it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\npublic class MyClass // Noncompliant\n{\n   public static void Main()\n   {\n      string[] cultures = { "de-DE", "en-us", "fr-FR" };\n      Random rnd = new Random();\n      int index = rnd.Next(0, cultures.Length);\n      Thread.CurrentThread.CurrentUICulture = CultureInfo.CreateSpecificCulture(cultures[index]);\n\n      ResourceManager rm = new ResourceManager("MyResources" ,\n                                               typeof(MyClass).Assembly);\n      string greeting = rm.GetString("Greeting");\n\n      Console.Write("Enter your name: ");\n      string name = Console.ReadLine();\n      Console.WriteLine("{0} {1}!", greeting, name);\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\n[assembly:NeutralResourcesLanguageAttribute("en")]\npublic class MyClass\n{\n   public static void Main()\n   {\n      string[] cultures = { "de-DE", "en-us", "fr-FR" };\n      Random rnd = new Random();\n      int index = rnd.Next(0, cultures.Length);\n      Thread.CurrentThread.CurrentUICulture = CultureInfo.CreateSpecificCulture(cultures[index]);\n\n      ResourceManager rm = new ResourceManager("MyResources" ,\n                                               typeof(MyClass).Assembly);\n      string greeting = rm.GetString("Greeting");\n\n      Console.Write("Enter your name: ");\n      string name = Console.ReadLine();\n      Console.WriteLine("{0} {1}!", greeting, name);\n   }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	performance	0	HTML	1576224531736	1576224531779	1	csharp
552	Methods should not have identical implementations	S4144	\N	csharpsquid	<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may\nbe confusing to maintainers. In the latter case, one implementation should invoke the other.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate const string CODE = "bounteous";\nprivate int callCount = 0;\n\npublic string GetCode()\n{\n  callCount++;\n  return CODE;\n}\n\npublic string GetName()  // Noncompliant\n{\n  callCount++;\n  return CODE;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate const string CODE = "bounteous";\nprivate int callCount = 0;\n\npublic string GetCode()\n{\n  callCount++;\n  return CODE;\n}\n\npublic string GetName()\n{\n  return GetCode();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Empty methods, methods with only one line of code and methods with the same name (overload) are ignored.</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	confusing,duplicate,suspicious	0	HTML	1576224531825	1576224531826	1	csharp
553	Doubled prefix operators "!!" and "~~" should not be used	S2761	\N	csharpsquid	<p>Calling the <code>!</code> or <code>~</code> prefix operator twice does nothing: the second invocation undoes the first. Such mistakes are\ntypically caused by accidentally double-tapping the key in question without noticing.</p>\n<p>Either this is a bug, if the operator was actually meant to be called once, or misleading if done on purpose.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint v1 = 0;\nbool v2 = false;\n\nvar v3 = !!v1; // Noncompliant\nvar v4 = ~~v2; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint v1 = 0;\nbool v2 = false;\n\nvar v3 = !v1;\nvar v4 = ~v2;\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224531827	1576224531828	2	csharp
554	Sequential tests should not check the same condition	S2760	\N	csharpsquid	<p>When the same condition is checked twice in a row, it is either confusing - why have separate checks? - or an error - some other condition should\nhave been checked in the second test.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (a == b)\n{\n  doTheThing(b);\n}\nif (a == b) // Noncompliant; is this really what was intended?\n{\n  doTheThing(c);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a == b)\n{\n  doTheThing(b);\n  doTheThing(c);\n}\n</pre>\n<p>or</p>\n<pre>\nif (a == b)\n{\n  doTheThing(b);\n}\nif (b == c)\n{\n  doTheThing(c);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since it is a common pattern to test a variable, reassign it if it fails the test, then re-test it, that pattern is ignored.</p>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	clumsy,suspicious	0	HTML	1576224531830	1576224531831	1	csharp
555	Child class fields should not differ from parent class fields only by capitalization	S4025	\N	csharpsquid	<p>Having a field in a child class with a name that differs from a parent class' field only by capitalization is sure to cause confusion. Such child\nclass fields should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit\n{\n  protected string plantingSeason;\n  //...\n}\n\npublic class Raspberry : Fruit\n{\n  protected string plantingseason;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit\n{\n  protected string plantingSeason;\n  //...\n}\n\npublic class Raspberry : Fruit\n{\n  protected string whenToPlant;\n  // ...\n}\n</pre>\n<p>Or</p>\n<pre>\npublic class Fruit\n{\n  protected string plantingSeason;\n  //...\n}\n\npublic class Raspberry : Fruit\n{\n  // field removed; parent field will be used instead\n  // ...\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224531832	1576224531834	1	csharp
556	Nullable type comparison should not be redundant	S3610	\N	csharpsquid	<p>Calling <code>GetType()</code> on a nullable object returns the underlying value type. Thus, comparing the returned <code>Type</code> object to\n<code>typeof(Nullable&lt;SomeType&gt;)</code> doesn't make sense. The comparison either throws an exception or the result can be known at compile\ntime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint? nullable = 42;\nbool comparison = nullable.GetType() == typeof(Nullable&lt;int&gt;); // Noncompliant, always false\ncomparison = nullable.GetType() != typeof(Nullable&lt;int&gt;); // Noncompliant, always true\n\nnullable = null;\ncomparison = nullable.GetType() != typeof(Nullable&lt;int&gt;); // Noncompliant, calling GetType on a null always throws an exception\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	redundant	0	HTML	1576224531836	1576224531837	2	csharp
557	Conditionals should start on new lines	S3972	\N	csharpsquid	<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its\nresulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>} </code> from a preceding\n<code>else</code> or <code>else if</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers\nfail to understand that the two statements are unconnected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n</pre>\n<p>Or</p>\n<pre>\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	suspicious	0	HTML	1576224531838	1576224531839	1	csharp
558	Exceptions should provide standard constructors	S4027	\N	csharpsquid	<p>Exceptions types should provide the following constructors:</p>\n<ul>\n  <li> <code>public MyException()</code> </li>\n  <li> <code>public MyException(string)</code> </li>\n  <li> <code>public MyException(string, Exception)</code> </li>\n  <li> <code>protected</code> or <code>private MyException(SerializationInfo, StreamingContext)</code> </li>\n</ul>\n<p>That fourth constructor should be <code>protected</code> in unsealed classes, and <code>private</code> in sealed classes.</p>\n<p>Not having this full set of constructors can make it difficult to handle exceptions.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyException // Noncompliant: several constructors are missing\n  {\n    public MyException()\n    {\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Runtime.Serialization;\n\nnamespace MyLibrary\n{\n  public class MyException : Exception\n  {\n      public MyException()\n      {\n      }\n\n      public MyException(string message)\n          :base(message)\n      {\n      }\n\n      public MyException(string message, Exception innerException)\n          : base(message, innerException)\n      {\n      }\n\n      protected MyException(SerializationInfo info, StreamingContext context)\n          : base(info, context)\n      {\n      }\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	convention	0	HTML	1576224531842	1576224531885	1	csharp
559	IP addresses should not be hardcoded	S1313	\N	csharpsquid	<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>\n<ul>\n  <li> a recompile is required if the address changes </li>\n  <li> it forces the same address to be used in every environment (dev, sys, qa, prod) </li>\n  <li> it places the responsibility of setting the value to use in production on the shoulders of the developer </li>\n  <li> it allows attackers to decompile the code and thereby discover a potentially sensitive address </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar ip = "127.0.0.1";\nvar address = IPAddress.Parse(ip);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar ip = ConfigurationManager.AppSettings["myapplication.ip"];\nvar address = IPAddress.Parse(ip);\n</pre>\n<h2>Exceptions</h2>\n<p>Although "::" is a valid IPv6 address, the rule doesn't report on it. </p>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	30min	\N	cert	0	HTML	1576224531928	1576224531928	3	csharp
560	Operators should be overloaded consistently	S4050	\N	csharpsquid	<p>When implementing operator overloads, it is very important to make sure that all related operators and methods are consistent in their\nimplementation.</p>\n<p>The following guidelines should be followed:</p>\n<ul>\n  <li> When providing <code>operator ==</code> you should also provide <code>operator !=</code> and vice-versa. </li>\n  <li> When providing <code>operator ==</code> you should also provide <code>Equals(Object)</code> and <code>GetHashCode()</code>. </li>\n  <li> When providing <code>operator +</code> or <code>operator -</code> you should also provide <code>operator ==</code>, respecting previous\n  guidelines. </li>\n</ul>\n<p>This rule raises an issue when any of these guidelines are not followed on publicly-visible type (public, protected or protected internal).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo // Noncompliant\n  {\n    private int left;\n    private int right;\n\n    public Foo(int l, int r)\n    {\n      this.left = l;\n      this.right = r;\n    }\n\n    public static Foo operator +(Foo a, Foo b)\n    {\n      return new Foo(a.left + b.left, a.right + b.right);\n    }\n\n    public static Foo operator -(Foo a, Foo b)\n    {\n      return new Foo(a.left - b.left, a.right - b.right);\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    private int left;\n    private int right;\n\n    public Foo(int l, int r)\n    {\n      this.left = l;\n      this.right = r;\n    }\n\n    public static Foo operator +(Foo a, Foo b)\n    {\n      return new Foo(a.left + b.left, a.right + b.right);\n    }\n\n    public static Foo operator -(Foo a, Foo b)\n    {\n      return new Foo(a.left - b.left, a.right - b.right);\n    }\n\n    public static bool operator ==(Foo a, Foo b)\n    {\n      return (a.left == b.left &amp;&amp; a.right == b.right);\n    }\n\n    public static bool operator !=(Foo a, Foo b)\n    {\n      return !(a == b);\n    }\n\n    public override bool Equals(Object obj)\n    {\n      Foo a = obj as Foo;\n      if (a == null)\n        return false;\n      return this == a;\n    }\n\n    public override int GetHashCode()\n    {\n       return (this.left * 10) + this.right;\n    }\n  }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	pitfall	0	HTML	1576224531929	1576224531972	1	csharp
561	Types should not extend outdated base types	S4052	\N	csharpsquid	<p>With the advent of .NET framework version 2, certain practices have become obsolete.</p>\n<p>In particular, exceptions should now extend <code>System.Exception</code> instead of <code>System.ApplicationException</code>. Similarly, generic\ncollections should be used instead of the older, non-generic, ones. Finally when creating an XML view, you should not extend\n<code>System.Xml.XmlDocument</code>.</p>\n<p>This rule raises an issue when an externally visible type extends one of these types:</p>\n<ul>\n  <li> <code>System.ApplicationException</code> </li>\n  <li> <code>System.Xml.XmlDocument</code> </li>\n  <li> <code>System.Collections.CollectionBase</code> </li>\n  <li> <code>System.Collections.DictionaryBase</code> </li>\n  <li> <code>System.Collections.Queue</code> </li>\n  <li> <code>System.Collections.ReadOnlyCollectionBase</code> </li>\n  <li> <code>System.Collections.SortedList</code> </li>\n  <li> <code>System.Collections.Stack</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Collections;\n\nnamespace MyLibrary\n{\n  public class MyCollection : CollectionBase  // Noncompliant\n  {\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Collections;\n\nnamespace MyLibrary\n{\n  public class MyCollection : Collection&lt;T&gt;\n  {\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224532018	1576224532063	1	csharp
562	Literals should not be passed as localized parameters	S4055	\N	csharpsquid	<p>String literals embedded in the source code will not be localized properly.</p>\n<p>This rule raises an issue when a literal string is passed as a parameter or property and one or more of the following cases is true:</p>\n<ul>\n  <li> The <code>LocalizableAttribute</code> attribute of the parameter or property is set to true. </li>\n  <li> The parameter or property name contains "Text", "Message", or "Caption". </li>\n  <li> The name of the string parameter that is passed to a <code>Console.Write</code> or <code>Console.WriteLine</code> method is either "value" or\n  "format". </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Globalization;\nusing System.Reflection;\nusing System.Windows.Forms;\n\n[assembly: NeutralResourcesLanguageAttribute("en-US")]\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void SetHour(int hour)\n        {\n            if (hour &lt; 0 || hour &gt; 23)\n            {\n                MessageBox.Show("The valid range is 0 - 23."); // Noncompliant\n            }\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Globalization;\nusing System.Reflection;\nusing System.Resources;\nusing System.Windows.Forms;\n\n\n\n[assembly: NeutralResourcesLanguageAttribute("en-US")]\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        ResourceManager rm;\n        public Foo()\n        {\n            rm = new ResourceManager("en-US", Assembly.GetExecutingAssembly());\n        }\n\n        public void SetHour(int hour)\n        {\n            if (hour &lt; 0 || hour &gt; 23)\n            {\n                MessageBox.Show(\n                rm.GetString("OutOfRangeMessage", CultureInfo.CurrentUICulture));\n            }\n        }\n    }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	localisation,pitfall	0	HTML	1576224532112	1576224532156	1	csharp
566	break statements should not be used except for switch cases	S1227	\N	csharpsquid	<p><code>break;</code> is an unstructured control flow statement which makes code harder to read.</p>\n<p>Ideally, every loop should have a single termination condition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 0;\nwhile (true)\n{\n  if (i == 10)\n  {\n    break;      // Non-Compliant\n  }\n\n  Console.WriteLine(i);\n  i++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i = 0;\nwhile (i != 10) // Compliant\n{\n  Console.WriteLine(i);\n  i++;\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224532301	1576224532304	1	csharp
567	Classes and methods should not have too many generic parameters	S2436	\N	csharpsquid	<p>A method or class with too many type parameters has likely aggregated too many responsibilities and should be split.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default parameter value of 2:</p>\n<pre>\n&lt;S, T, U, V&gt; void foo() {} // Noncompliant; not really readable\n&lt;String, Integer, Object, String&gt;foo(); // especially on invocations\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	brain-overload	0	HTML	1576224532308	1576224532311	1	csharp
568	User-provided values should be sanitized before use in SQL statements	S3649	\N	csharpsquid	<p>Applications that execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an\nattacker to include input that changes the query so that unintended commands are executed, or sensitive data is exposed.</p>\n<p>This rule raises an issue when user-provided values are concatenated into SQL statements.</p>\n<p>If user input must be part of the query, use one of the following mitigations, listed in order of effectiveness:</p>\n<ul>\n  <li> Use a stored procedure. </li>\n  <li> Use a parameterized command string. </li>\n  <li> Validate the user input for both type and content before you build the command string. </li>\n</ul>\n<p>The following .NET Framework types implement the <code>CommandText</code> property or provide constructors that set the property by using a string\nargument.</p>\n<ul>\n  <li> <code>System.Data.Odbc.OdbcCommand</code> </li>\n  <li> <code>System.Data.Odbc.OdbcDataAdapter</code> </li>\n  <li> <code>System.Data.OleDb.OleDbCommand</code> </li>\n  <li> <code>System.Data.OleDb.OleDbDataAdapter</code> </li>\n  <li> <code>System.Data.OracleClient.OracleCommand</code> </li>\n  <li> <code>System.Data.OracleClient.OracleDataAdapter</code> </li>\n  <li> <code>System.Data.SqlServerCe.SqlCeCommand</code> </li>\n  <li> <code>System.Data.SqlServerCe.SqlCeDataAdapter</code> </li>\n  <li> <code>System.Data.SqlClient.SqlCommand</code> </li>\n  <li> <code>System.Data.SqlClient.SqlDataAdapter</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Data;\nusing System.Data.SqlClient;\n\nnamespace MyLibrary\n{\n   public class Foo\n   {\n      public object Bar(string connection, string name, string password)\n      {\n         SqlConnection someConnection = new SqlConnection(connection);\n         SqlCommand someCommand = new SqlCommand();\n         someCommand.Connection = someConnection;\n\n         someCommand.CommandText = "SELECT AccountNumber FROM Users " +\n            "WHERE Username='" + name +\n            "' AND Password='" + password + "'"; // Noncompliant\n\n         someConnection.Open();\n         object accountNumber = someCommand.ExecuteScalar();\n         someConnection.Close();\n         return accountNumber;\n      }\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Data;\nusing System.Data.SqlClient;\n\nnamespace MyLibrary\n{\n   public class Foo\n   {\n      public object Bar(string connection, string name, string password)\n      {\n         SqlConnection someConnection = new SqlConnection(connection);\n         SqlCommand someCommand = new SqlCommand();\n         someCommand.Connection = someConnection;\n\n         someCommand.Parameters.Add(\n            "@username", SqlDbType.NChar).Value = name;\n         someCommand.Parameters.Add(\n            "@password", SqlDbType.NChar).Value = password;\n         someCommand.CommandText = "SELECT AccountNumber FROM Users " +\n            "WHERE Username=@username AND Password=@password";\n\n         someConnection.Open();\n         object accountNumber = someCommand.ExecuteScalar();\n         someConnection.Close();\n         return accountNumber;\n      }\n   }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/89">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/564.html">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/20.html">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/943.html">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/PgIRAg">CERT, IDS00-J.</a> - Prevent SQL injection </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection </li>\n  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from FindSecBugs rules <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA">Potential SQL/JPQL Injection\n  (JPA)</a>, <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO">Potential SQL/JDOQL Injection (JDO)</a>, <a\n  href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE">Potential SQL/HQL Injection (Hibernate)</a> </li>\n</ul>	4	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	cert,cwe,owasp-a1,sans-top25-insecure,sql	0	HTML	1576224532319	1576224532368	3	csharp
569	A close curly brace should be located at the beginning of a line	S1109	\N	csharpsquid	<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition)\n{\n  doSomething();}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224532418	1576224532421	1	csharp
570	"IDisposable" should be implemented correctly	S3881	\N	csharpsquid	<p>The <code>IDisposable</code> interface is a mechanism to release unmanaged resources, if not implemented correctly this could result in resource\nleaks or more severe bugs.</p>\n<p>This rule raises an issue when the recommended dispose pattern, as defined by Microsoft, is not adhered to. See the <strong>Compliant\nSolution</strong> section for examples.</p>\n<p>Satisfying the rule's conditions will enable potential derived classes to correctly dispose the members of your class:</p>\n<ul>\n  <li> <code>sealed</code> classes are not checked. </li>\n  <li> If a base class implements <code>IDisposable</code> your class should not have <code>IDisposable</code> in the list of its interfaces. In such\n  cases it is recommended to override the base class's <code>protected virtual void Dispose(bool)</code> method or its equivalent. </li>\n  <li> The class should not implement <code>IDisposable</code> explicitly, e.g. the <code>Dispose()</code> method should be public. </li>\n  <li> The class should contain <code>protected virtual void Dispose(bool)</code> method. This method allows the derived classes to correctly dispose\n  the resources of this class. </li>\n  <li> The content of the <code>Dispose()</code> method should be invocation of <code>Dispose(true)</code> followed by\n  <code>GC.SuppressFinalize(this)</code> </li>\n  <li> If the class has a finalizer, i.e. a destructor, the only code in its body should be a single invocation of <code>Dispose(false)</code>. </li>\n  <li> If the class inherits from a class that implements <code>IDisposable</code> it must call the <code>Dispose</code>, or\n  <code>Dispose(bool)</code> method of the base class from within its own implementation of <code>Dispose</code> or <code>Dispose(bool)</code>,\n  respectively. This ensures that all resources from the base class are properly released. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo1 : IDisposable // Noncompliant - provide protected overridable implementation of Dispose(bool) on Foo or mark the type as sealed.\n{\n    public void Dispose() // Noncompliant - should contain only a call to Dispose(true) and then GC.SuppressFinalize(this)\n    {\n        // Cleanup\n    }\n}\n\npublic class Foo2 : IDisposable\n{\n    void IDisposable.Dispose() // Noncompliant - Dispose() should be public\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    public virtual void Dispose() // Noncompliant - Dispose() should be sealed\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n}\n\npublic class Foo3 : IDisposable\n{\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        // Cleanup\n    }\n\n    ~Foo3() // Noncompliant - Modify Foo.~Foo() so that it calls Dispose(false) and then returns.\n    {\n        // Cleanup\n    }\n}{code}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Sealed class\npublic sealed class Foo1 : IDisposable\n{\n    public void Dispose()\n    {\n        // Cleanup\n    }\n}\n\n// Simple implementation\npublic class Foo2 : IDisposable\n{\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        // Cleanup\n    }\n}\n\n// Implementation with a finalizer\npublic class Foo3 : IDisposable\n{\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        // Cleanup\n    }\n\n    ~Foo3()\n    {\n        Dispose(false);\n    }\n}\n\n// Base disposable class\npublic class Foo4 : DisposableBase\n{\n    protected override void Dispose(bool disposing)\n    {\n        // Cleanup\n        // Do not forget to call base\n        base.Dispose(disposing);\n    }\n}\n</pre>\n<h2>See</h2>\n<p>Refer to </p>\n<ul>\n  <li> <a href="https://msdn.microsoft.com/en-us/library/498928w2.aspx">MSDN</a> for complete documentation on the dispose pattern. </li>\n  <li> <a href="http://blog.stephencleary.com/2009/08/how-to-implement-idisposable-and.html">Stephen Cleary</a> for excellent Q&amp;A about\n  IDisposable </li>\n  <li> <a href="http://pragmateek.com/c-scope-your-global-state-changes-with-idisposable-and-the-using-statement/">Pragma Geek</a> for additional\n  usages of IDisposable, beyond releasing resources. </li>\n  <li> <a href="https://docs.microsoft.com/en-us/dotnet/api/system.idisposable?view=netframework-4.7">IDisposable documentation</a> </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	pitfall	0	HTML	1576224532425	1576224532469	1	csharp
589	Assemblies should be marked as CLS compliant	S3990	\N	csharpsquid	<p>Assemblies should conform with the Common Language Specification (CLS) in order to be usable across programming languages. To be compliant an\nassembly has to indicate it with <code>System.CLSCompliantAttribute</code>.</p>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\n[assembly:CLSCompliant(true)]\nnamespace MyLibrary\n{\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	1min	\N	api-design	0	HTML	1576224533141	1576224533143	1	csharp
590	Private fields only used as local variables in methods should become local variables	S1450	\N	csharpsquid	<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  private int singularField;\n\n  public void DoSomething(int x)\n  {\n    singularField = x + 5;\n\n    if (singularField == 0) { /* ... */ }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  public void DoSomething(int x)\n  {\n    int localVariable = x + 5;\n\n    if (localVariable == 0) { /* ... */ }\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224533147	1576224533149	1	csharp
591	Track lack of copyright and license headers	S1451	\N	csharpsquid	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<p>The <code>headerFormat</code> must end with an empty line if you want to have an empty line between the file header and the first line for your\nsource file (<code>using</code>, <code>namespace</code>...).</p>\n<p>For example, if you want the source file to look like this</p>\n<pre>\n// Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.\n\nnamespace Foo\n{\n}\n</pre>\n<p>then the <code>headerFormat</code> parameter should end with an empty line like this</p>\n<pre>\n// Copyright (c) SonarSource. All Rights Reserved. Licensed under the LGPL License.  See License.txt in the project root for license information.\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>	4	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224533151	1576224533195	1	csharp
571	Locales should be set for data types	S4057	\N	csharpsquid	<p>When you create a <code>DataTable</code> or <code>DataSet</code>, you should set the locale explicitly. By default, the locale for these types is\nthe current culture. For data that is stored in a database or file and is shared globally, the locale should ordinarily be set to the invariant\nculture (<code>CultureInfo.InvariantCulture</code>).</p>\n<p>This rule raises an issue when <code>System.Data.DataTable</code> or <code>System.Data.DataSet</code> instances are created without explicitly\nsetting the locale property (<code>DataTable.Locale</code> or <code>DataSet.Locale</code>).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Data;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public DataTable CreateTable()\n        {\n            DataTable table = new DataTable("Customers"); // Noncompliant table.Locale not set\n            DataColumn key = table.Columns.Add("ID", typeof(Int32));\n\n            key.AllowDBNull = false;\n            key.Unique = true;\n            table.Columns.Add("LastName", typeof(String));\n            table.Columns.Add("FirstName", typeof(String));\n            return table;\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Data;\nusing System.Globalization;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public DataTable CreateTable()\n        {\n            DataTable table = new DataTable("Customers");\n            table.Locale = CultureInfo.InvariantCulture;\n            DataColumn key = table.Columns.Add("ID", typeof(Int32));\n\n            key.AllowDBNull = false;\n            key.Unique = true;\n            table.Columns.Add("LastName", typeof(String));\n            table.Columns.Add("FirstName", typeof(String));\n            return table;\n        }\n    }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	localisation	0	HTML	1576224532515	1576224532561	1	csharp
572	Finalizers should not be empty	S3880	\N	csharpsquid	<p>Finalizers come with a performance cost due to the overhead of tracking the life cycle of objects. An empty one is consequently costly with no\nbenefit or justification.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n    ~Foo() // Noncompliant\n    {\n    }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	performance	0	HTML	1576224532606	1576224532609	1	csharp
573	Overloads with a "CultureInfo" or an "IFormatProvider" parameter should be used	S4056	\N	csharpsquid	<p>When a <code>System.Globalization.CultureInfo</code> or <code>IFormatProvider</code> object is not supplied, the default value that is supplied by\nthe overloaded member might not have the effect that you want in all locales.</p>\n<p>You should supply culture-specific information according to the following guidelines:</p>\n<ul>\n  <li> If the value will be displayed to the user, use the current culture. See <code>CultureInfo.CurrentCulture</code>. </li>\n  <li> If the value will be stored and accessed by software (persisted to a file or database), use the invariant culture. See\n  <code>CultureInfo.InvariantCulture</code>. </li>\n  <li> If you do not know the destination of the value, have the data consumer or provider specify the culture. </li>\n</ul>\n<p>This rule raises an issue when a method or constructor calls one or more members that have overloads that accept a\n<code>System.IFormatProvider</code> parameter, and the method or constructor does not call the overload that takes the <code>IFormatProvider</code>\nparameter. This rule ignores calls to .NET Framework methods that are documented as ignoring the <code>IFormatProvider</code> parameter as well as the\nfollowing methods:</p>\n<ul>\n  <li> <code>Activator.CreateInstance</code> </li>\n  <li> <code>ResourceManager.GetObject</code> </li>\n  <li> <code>ResourceManager.GetString</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void Bar(String string1)\n        {\n            if(string.Compare(string1, string2, false) == 0) // Noncompliant\n            {\n                Console.WriteLine(string3.ToLower()); // Noncompliant\n            }\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Globalization;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void Bar(String string1, String string2, String string3)\n        {\n            if(string.Compare(string1, string2, false,\n                              CultureInfo.InvariantCulture) == 0)\n            {\n                Console.WriteLine(string3.ToLower(CultureInfo.CurrentCulture));\n            }\n        }\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise an issue when the overload is marked as obsolete.</p>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	localisation,pitfall	0	HTML	1576224532613	1576224532657	1	csharp
574	Property names should not match get methods	S4059	\N	csharpsquid	<p>Properties and Get method should have names that makes them clearly distinguishable.</p>\n<p>This rule raises an issue when the name of a public or protected member starts with 'Get' and otherwise matches the name of a public or protected\nproperty.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public DateTime Date\n        {\n            get { return DateTime.Today; }\n        }\n\n        public string GetDate() // Noncompliant\n        {\n            return this.Date.ToString();\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public DateTime Date\n        {\n            get { return DateTime.Today; }\n        }\n\n        public string GetDateAsString()\n        {\n            return this.Date.ToString();\n        }\n    }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	confusing	0	HTML	1576224532702	1576224532705	1	csharp
575	Types and "this" should not be used for locking	S2551	\N	csharpsquid	<p>Locking on the current object instance (i.e. <code>this</code>), or on a <code>Type</code> object increases the chance of deadlocks because any\nother thread could acquire (or attempt to acquire) the same lock for another unrelated purpose. </p>\n<p>Instead, a new, private <code>object</code> should be created and used for the lock.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void MyLockingMethod()\n{\n  lock (this) // Noncompliant\n  {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nobject lockObj = new object();\n\npublic void MyLockingMethod()\n{\n  lock (lockObj)\n  {\n    // ...\n  }\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	multi-threading	0	HTML	1576224532709	1576224532714	2	csharp
576	Overloads with a "StringComparison" parameter should be used	S4058	\N	csharpsquid	<p>Many string operations, the <code>Compare</code> and <code>Equals</code> methods in particular, provide an overload that accepts a\n<code>StringComparison</code> enumeration value as a parameter. Calling these overloads and explicitly providing this parameter makes your code\nclearer and easier to maintain.</p>\n<p>This rule raises an issue when a string comparison operation doesn't use the overload that takes a <code>StringComparison</code> parameter.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public bool HaveSameNames(string name1, string name2)\n    {\n      return string.Compare(name1, name2) == 0; // Noncompliant\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public bool HaveSameNames(string name1, string name2)\n    {\n      return string.Compare(name1, name2, StringComparison.OrdinalIgnoreCase) == 0;\n    }\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224532722	1576224532725	1	csharp
577	"Assembly.Load" should be used	S3885	\N	csharpsquid	<p>The parameter to <code>Assembly.Load</code> includes the full specification of the dll to be loaded. Use another method, and you might end up with\na dll other than the one you expected. </p>\n<p>This rule raises an issue when <code>Assembly.LoadFrom</code>, <code>Assembly.LoadFile</code>, or <code>Assembly.LoadWithPartialName</code> is\ncalled.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic void Main(string[] args)\n{\n    Assembly.LoadFrom(...); // Noncompliant\n    Assembly.LoadFile(...); // Noncompliant\n    Assembly.LoadWithPartialName(...); // Noncompliant + deprecated\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	unpredictable	0	HTML	1576224532729	1576224532732	1	csharp
578	"CoSetProxyBlanket" and "CoInitializeSecurity" should not be used	S3884	\N	csharpsquid	<p><code>CoSetProxyBlanket</code> and <code>CoInitializeSecurity</code> both work to set the permissions context in which the process invoked\nimmediately after is executed. Calling them from within that process is useless because it's to late at that point; the permissions context has\nalready been set.</p>\n<p>Specifically, these methods are meant to be called from a non-managed code such as a C++ wrapper that then invokes the managed, i.e. C# or VB.NET,\ncode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[DllImport("ole32.dll")]\nstatic extern int CoSetProxyBlanket([MarshalAs(UnmanagedType.IUnknown)]object pProxy, uint dwAuthnSvc, uint dwAuthzSvc,\n\t[MarshalAs(UnmanagedType.LPWStr)] string pServerPrincName, uint dwAuthnLevel, uint dwImpLevel, IntPtr pAuthInfo,\n\tuint dwCapabilities);\n\npublic enum RpcAuthnLevel\n{\n\tDefault = 0,\n\tNone = 1,\n\tConnect = 2,\n\tCall = 3,\n\tPkt = 4,\n\tPktIntegrity = 5,\n\tPktPrivacy = 6\n}\n\npublic enum RpcImpLevel\n{\n\tDefault = 0,\n\tAnonymous = 1,\n\tIdentify = 2,\n\tImpersonate = 3,\n\tDelegate = 4\n}\n\npublic enum EoAuthnCap\n{\n\tNone = 0x00,\n\tMutualAuth = 0x01,\n\tStaticCloaking = 0x20,\n\tDynamicCloaking = 0x40,\n\tAnyAuthority = 0x80,\n\tMakeFullSIC = 0x100,\n\tDefault = 0x800,\n\tSecureRefs = 0x02,\n\tAccessControl = 0x04,\n\tAppID = 0x08,\n\tDynamic = 0x10,\n\tRequireFullSIC = 0x200,\n\tAutoImpersonate = 0x400,\n\tNoCustomMarshal = 0x2000,\n\tDisableAAA = 0x1000\n}\n\n[DllImport("ole32.dll")]\npublic static extern int CoInitializeSecurity(IntPtr pVoid, int cAuthSvc, IntPtr asAuthSvc, IntPtr pReserved1,\n\tRpcAuthnLevel level, RpcImpLevel impers, IntPtr pAuthList, EoAuthnCap dwCapabilities, IntPtr pReserved3);\n\nstatic void Main(string[] args)\n{\n\tvar hres1 = CoSetProxyBlanket(null, 0, 0, null, 0, 0, IntPtr.Zero, 0); // Noncompliant\n\n\tvar hres2 = CoInitializeSecurity(IntPtr.Zero, -1, IntPtr.Zero, IntPtr.Zero, RpcAuthnLevel.None,\n\t\tRpcImpLevel.Impersonate, IntPtr.Zero, EoAuthnCap.None, IntPtr.Zero); // Noncompliant\n}\n</pre>	4	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	\N	0	HTML	1576224532735	1576224532779	3	csharp
579	The length returned from a stream read should be checked	S2674	\N	csharpsquid	<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method with the number of bytes requested.\nInstead, you must check the value returned by the read method to see how many bytes were read. Fail to do so, and you introduce a bug that is both\nharmful and difficult to reproduce.</p>\n<p>This rule raises an issue when a <code>Stream.Read</code> or a <code>Stream.ReadAsync</code> method is called, but the return value is not\nchecked.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void DoSomething(string fileName)\n{\n  using (var stream = File.Open(fileName, FileMode.Open))\n  {\n    var result = new byte[stream.Length];\n    stream.Read(result, 0, (int)stream.Length); // Noncompliant\n    // ... do something with result\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void DoSomething(string fileName)\n{\n  using (var stream = File.Open(fileName, FileMode.Open))\n  {\n    var buffer = new byte[1024];\n    using (var ms = new MemoryStream())\n    {\n        int read;\n        while ((read = stream.Read(buffer, 0, buffer.Length)) &gt; 0)\n        {\n            ms.Write(buffer, 0, read);\n        }\n        // ... do something with ms\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/XACSAQ">CERT, FIO10-J.</a> - Ensure the array is filled when using read() to fill an\n  array </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	cert	0	HTML	1576224532825	1576224532869	2	csharp
580	Mutable, non-private fields should not be "readonly"	S3887	\N	csharpsquid	<p>Using the <code>readonly</code> keyword on a field means that it can't be changed after initialization. However, when applied to collections or\narrays, that's only partly true. <code>readonly</code> enforces that another instance can't be assigned to the field, but it cannot keep the contents\nfrom being updated. That means that in practice, the field value really can be changed, and the use of <code>readonly</code> on such a field is\nmisleading, and you're likely to not be getting the behavior you expect.</p>\n<p>This rule raises an issue when a non-private, <code>readonly</code> field is an array or collection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  public readonly string[] strings;  // Noncompliant\n\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass\n{\n  public string[] strings;\n\n  // ...\n</pre>\n<p>or</p>\n<pre>\npublic class MyClass\n{\n  private readonly string[] strings;\n\n  // ...\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224532915	1576224532919	2	csharp
581	Fields should not have public accessibility	S1104	\N	csharpsquid	<p>Public fields in public classes do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private fields and public properties (set and get), unauthorized modifications are prevented. Properties also benefit from additional\nprotection (security) features such as Link Demands.</p>\n<p>Note that due to optimizations on simple properties, public fields provide only very little performance gain.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n    public int instanceData = 32; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n    private int instanceData = 32;\n\n    public int InstanceData\n    {\n        get { return instanceData; }\n\tset { instanceData = value ; }\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Fields marked as <code>readonly</code> or <code>const</code> are ignored by this rule.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/493.html">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	cwe	0	HTML	1576224532924	1576224532969	3	csharp
582	Strings should be normalized to uppercase	S4040	\N	csharpsquid	<p>Certain characters, once normalized to lowercase, cannot make a round trip. That is, they can not be converted from one locale to another and then\naccurately restored to their original characters.</p>\n<p>It is therefore strongly recommended to normalize strings to uppercase instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString s = myString.ToLower(CultureInfo.InvariantCulture);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString s = myString.ToUpper(CultureInfo.InvariantCulture);\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	pitfall	0	HTML	1576224533014	1576224533017	1	csharp
583	Type names should not match namespaces	S4041	\N	csharpsquid	<p>When a type name matches the name of a publicly defined namespace, for instance one in the .NET framework class library, it leads to confusion and\nmakes the library that much harder to use.</p>\n<p>This rule raises an issue when a name of a public type matches the name of a .NET Framework namespace, or a namespace of the project assembly, in a\ncase-insensitive comparison.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Text  {  // Noncompliant: Collides with System.Text\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyText  {\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224533019	1576224533020	1	csharp
584	Constructors should only call non-overridable methods	S1699	\N	csharpsquid	<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.</p>\n<p>For example:</p>\n<ul>\n  <li> The subclass class constructor starts by calling the parent class constructor. </li>\n  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>\n  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a\n  <code>NullReferenceException</code>) can result, because the fields aren't initialized yet. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent\n{\n  public Parent()\n  {\n    DoSomething();  // Noncompliant\n  }\n\n  public virtual void DoSomething() // can be overridden\n  {\n    ...\n  }\n}\n\npublic class Child : Parent\n{\n  private string foo;\n\n  public Child(string foo) // leads to call DoSomething() in Parent constructor which triggers a NullReferenceException as foo has not yet been initialized\n  {\n    this.foo = foo;\n  }\n\n  public override void DoSomething()\n  {\n    Console.WriteLine(this.foo.Length);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/MYYbAQ">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/TQBi">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or\n  destructors </li>\n</ul>	3	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	cert,pitfall	0	HTML	1576224533023	1576224533068	1	csharp
585	"GC.Collect" should not be called	S1215	\N	csharpsquid	<p>Calling <code>GC.Collect</code> is rarely necessary, and can significantly affect application performance. That's because it triggers a blocking\noperation that examines <em>every object in memory</em> for cleanup. Further, you don't have control over when this blocking cleanup will actually\nrun.</p>\n<p>As a general rule, the consequences of calling this method far outweigh the benefits unless perhaps you've just triggered some event that is unique\nin the run of your program that caused a lot of long-lived objects to die.</p>\n<p>This rule raises an issue when <code>GC.Collect</code> is invoked.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic void Main(string[] args)\n{\n  // ...\n  GC.Collect(2, GCCollectionMode.Optimized); // Noncompliant\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	30min	\N	bad-practice,performance,unpredictable	0	HTML	1576224533114	1576224533117	1	csharp
586	Threads should not lock on objects with weak identity	S3998	\N	csharpsquid	<p>A thread acquiring a lock on an object that can be accessed across application domain boundaries runs the risk of being blocked by another thread\nin a different application domain. Objects that can be accessed across application domain boundaries are said to have weak identity. Types with weak\nidentity are:</p>\n<ul>\n  <li> <code>MarshalByRefObject</code> </li>\n  <li> <code>ExecutionEngineException</code> </li>\n  <li> <code>OutOfMemoryException</code> </li>\n  <li> <code>StackOverflowException</code> </li>\n  <li> <code>String</code> </li>\n  <li> <code>MemberInfo</code> </li>\n  <li> <code>ParameterInfo</code> </li>\n  <li> <code>Thread</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Threading;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    string myString = "foo";\n\n    void Bar()\n    {\n      lock(myString) { } // Noncompliant\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Threading;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    string myString = "foo";\n    private readonly Object thisLock = new Object();\n\n    void Bar()\n    {\n      lock(thisLock) { } // Compliant\n    }\n  }\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	multi-threading,pitfall	0	HTML	1576224533121	1576224533124	1	csharp
587	Exceptions should not be thrown from unexpected methods	S3877	\N	csharpsquid	<p>It is expected that some methods should be called with caution, but others, such as <code>ToString</code>, are expected to "just work". Throwing an\nexception from such a method is likely to break callers' code unexpectedly.</p>\n<p>An issue is raised when an exception is thrown from any of the following: </p>\n<ul>\n  <li> Event accessors </li>\n  <li> <code>Object.Equals</code> </li>\n  <li> <code>IEquatable.Equals</code> </li>\n  <li> <code>GetHashCode</code> </li>\n  <li> <code>ToString</code> </li>\n  <li> <code>static</code> constructors </li>\n  <li> <code>IDisposable.Dispose</code> </li>\n  <li> <code>operator ==, !=, &lt;, &gt;, &lt;=, &gt;=</code> </li>\n  <li> <code>implicit</code> cast operators </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic override string ToString()\n{\n  if (string.IsNullOrEmpty(Name))\n  {\n    throw new ArgumentException("...");  // Noncompliant\n  }\n  //...\n</pre>\n<h2>Exceptions</h2>\n<p><code>System.NotImplementedException</code> and its derivatives are ignored.</p>\n<p><code>System.InvalidOperationException</code>, <code>System.NotSupportedException</code>, and <code>System.ArgumentException</code> and their\nderivatives are ignored in event accessors.</p>	4	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	pitfall	0	HTML	1576224533128	1576224533131	1	csharp
588	"async" and "await" should not be used as identifiers	S2306	\N	csharpsquid	<p>Since C# 5.0, <code>async</code> and <code>await</code> are contextual keywords. Contextual keywords do have a particular meaning in some contexts,\nbut can still be used as variable names. Keywords, on the other hand, are always reserved, and therefore are not valid variable names. To avoid any\nconfusion though, it is best to not use <code>async</code> and <code>await</code> as identifiers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint await = 42; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint someOtherName = 42;\n</pre>	4	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224533135	1576224533137	1	csharp
1007	String literals should not be duplicated	S1192	\N	squid	<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic void run() {\n  prepare("action1");                              // Noncompliant - "action1" is duplicated 3 times\n  execute("action1");\n  release("action1");\n}\n\n@SuppressWarning("all")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning("all")\nprivate void method2() { /* ... */ }\n\npublic String method3(String a) {\n  System.out.println("'" + a + "'");               // Compliant - literal "'" has less than 5 characters and is excluded\n  return "";                                       // Compliant - literal "" has less than 5 characters and is excluded\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final String ACTION_1 = "action1";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>	3	\N	READY	java	LINEAR_OFFSET	2min	2min	per duplicate instance	design	0	HTML	1576224548671	1576224548715	1	java
1008	Exception types should not be tested using "instanceof" in catch blocks	S1193	\N	squid	<p>Multiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  if(e instanceof IOException) { /* ... */ }         // Noncompliant\n  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (IOException e) { /* ... */ }                // Compliant\n} catch (NullPointerException e) { /* ... */ }       // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/5gFFB">CERT, ERR51-J.</a> - Prefer user-defined exceptions over more general exception\n  types </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	cert,clumsy,error-handling	0	HTML	1576224548766	1576224548769	1	java
830	Non-constant static fields should not be visible	S2223	\N	csharpsquid	<p>A <code>static</code> field that is neither constant nor read-only is not thread-safe. Correctly accessing these fields from different threads\nneeds synchronization with <code>lock</code>s. Improper synchronization may lead to unexpected results, thus publicly visible static fields are best\nsuited for storing non-changing data shared by many consumers. To enforce this intent, these fields should be marked <code>readonly</code> or\nconverted to constants.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Math\n{\n  public static double Pi = 3.14;  // Noncompliant\n}\n</pre>\n<p>or</p>\n<pre>\npublic class Shape\n{\n  public static Shape Empty = new EmptyShape();  // Noncompliant\n\n  private class EmptyShape : Shape\n  {\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Math\n{\n  public const double Pi = 3.14;\n}\n</pre>\n<p>or</p>\n<pre>\npublic class Shape\n{\n  public static readonly Shape Empty = new EmptyShape();\n\n  private class EmptyShape : Shape\n  {\n  }\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	pitfall	0	HTML	1576224541241	1576224541243	1	csharp
831	Test method signatures should be correct	S3433	\N	csharpsquid	<p>A method is detected as test method if marked with one of the following attributes <code>[TestMethod]</code> (for mstest), <code>[Fact]</code> (for\nxunit) or <code>[Test]</code> (for nunit). However, whether or not they have a test attribute, non-<code>public</code> methods are not recognized as\ntests, and therefore not executed. Neither are <code>async</code> <code>void</code> methods, or methods with generics anywhere in their signatures.\n</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[TestMethod]\nvoid TestNullArg()  // Noncompliant\n{  /* ... */  }\n\n[TestMethod]\npublic async void MyIgnoredTestMethod()  // Noncompliant\n{ /* ... */ }\n\n[TestMethod]\npublic void MyIgnoredGenericTestMethod&lt;T&gt;(T foo)  // Noncompliant\n{ /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[TestMethod]\npublic void TestNullArg()\n{  /* ... */  }\n</pre>	4	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	tests	0	HTML	1576224541244	1576224541245	1	csharp
832	Boolean expressions should not be gratuitous	S2589	\N	csharpsquid	<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) // Noncompliant\n{\n  DoSomething();\n}\n\nif (b &amp;&amp; a) // Noncompliant; "a" is always "true"\n{\n  DoSomething();\n}\n\nif (c || !a) // Noncompliant; "!a" is always "false"\n{\n  DoSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (Foo(a))\n{\n  DoSomething();\n}\n\nif (b)\n{\n  DoSomething();\n}\n\nif (c)\n{\n  DoSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/489">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	cert,cwe,misra,redundant	0	HTML	1576224541247	1576224541292	1	csharp
891	Static members should be referenced with "static::"	S2037	S2037	php	<p>References in a class to static class members (fields or methods) can be made using either <code>self::$var</code> or <code>static::$var</code>\n(introduced in 5.3). The difference between the two is one of scope. Confusingly, in subclasses, the use of <code>self::</code> references the\noriginal definition of the member, i.e. the superclass version, rather than any override at the subclass level. <code>static::</code>, on the other\nhand, references the class that was called at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php\n\nclass Toy {\n\n    public static function status() {\n        self::getStatus();  // Noncompliant; will always print "Sticks are fun!" even when called from a subclass which overrides this method;\n    }\n\n    protected static function getStatus() {\n        echo "Sticks are fun!";\n    }\n}\n\nclass Ball extends Toy {\n\n    protected static function getStatus() {  // Doesn't actually get called\n        echo "Balls are fun!";\n    }\n}\n\n$myBall = new Ball();\n$myBall::status();  // Prints "Sticks are fun!"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\n\nclass Toy {\n\n    public static function status() {\n        static::getStatus();  // Compliant\n    }\n\n    protected static function getStatus() {\n        echo "Sticks are fun!";\n    }\n}\n\nclass Ball extends Toy {\n\n    protected static function getStatus() {\n        echo "Balls are fun!";\n    }\n}\n\n$myBall = new Ball();\n$myBall::status();  // Prints "Balls are fun!"\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is raised when <code>self</code> is used on a constant field, a private field or a private method.</p>\n<pre>\nclass A\n{\n    private static $somevar = "hello";\n    const CONSTANT = 42;\n\n    private static function foo()\n    {\n        $var = self::$somevar . self::CONSTANT;  // Should be OK\n        self::foo();                               // Should be OK\n    }\n}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	pitfall	0	HTML	1576224542943	1576224542989	2	php
892	Files that define symbols should not cause side-effects	S2036	S2036	php	<p>Files that define symbols such as classes and variables may be included into many files. Simply performing that inclusion should have no effect on\nthose files other than declaring new symbols. For instance, a file containing a class definition should not also contain side-effects such as\n<code>print</code> statements that will be evaluated automatically on inclusion. Logic should be segregated into symbol-only files and\nside-effect-only files. The type of operation which is not allowed in a symbol-definition file includes but is not limited to: </p>\n<ul>\n  <li> generating output </li>\n  <li> modifying <code>ini</code> settings </li>\n  <li> emitting errors or exceptions </li>\n  <li> modifying global or static variables </li>\n  <li> reading/writing files </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php\n\nprint "Include worked!";\n\nclass foo {\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\n\nclass foo {\n\n  public function log() {\n    print "Include worked!";\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://www.php-fig.org/psr/psr-1/">PHP-FIG Basic Coding Standard PSR1</a>, 2.3 - Side Effects </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	psr1,user-experience	0	HTML	1576224543032	1576224543034	2	php
953	Nested blocks of code should not be left empty	S108	S108	php	<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor ($i = 0; $i &lt; 42; $i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty.</p>	2	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224544162	1576224544162	1	php
954	Functions should not have too many parameters	S107	S107	php	<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\nfunction doSomething($param1, $param2, $param3, $param4, $param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething($param1, $param2, $param3, $param4) {\n...\n}\n</pre>	2	\N	READY	php	CONSTANT_ISSUE	\N	20min	\N	brain-overload	0	HTML	1576224544163	1576224544164	1	php
955	Files should not have too many lines	S104	S104	php	<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>	2	\N	READY	php	CONSTANT_ISSUE	\N	1h	\N	brain-overload	0	HTML	1576224544166	1576224544166	1	php
956	Tabulation characters should not be used	S105	S105	php	<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	convention,psr2	0	HTML	1576224544168	1576224544168	1	php
957	Lines should not be too long	S103	S103	php	<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>	2	\N	READY	php	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224544169	1576224544170	1	php
958	Source code should comply with formatting standards	S1808	S1808	php	<p>Shared coding conventions make it possible for a team to collaborate efficiently. This rule raises issues for failures to comply with formatting\nstandard. The default parameter values conform to the PSR2 standard.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default PSR2 parameter values:</p>\n<pre>\nuse FooClass;              // Noncompliant; the "use" declaration should be placed after the "namespace" declaration\n\nnamespace Vendor\\Package;\nuse FooClass;              // Noncompliant; the "namespace" declaration should be followed by a blank line\n$foo = 1;                  // Noncompliant; the "use" declaration should be followed by a blank line\n\nclass ClassA {             // Noncompliant; an open curly brace should be at the beginning of a new line for classes and functions\n  function my_function(){  // Noncompliant; curly brace on wrong line\n    if ($firstThing)       // Noncompliant; an open curly brace should be at the end of line for a control structure\n    {\n      ...\n    }\n\n    if ($secondThing)    { // Noncompliant; there should be exactly one space between the closing parenthesis and the opening curly brace\n      ...\n    }\n\n    if($thirdThing) {      // Noncompliant; there should be exactly one space between the control structure keyword and the opening parenthesis\n      ...\n    }\n    else {                 // Noncompliant; the close curly brace and the next "else" (or "catch" or "finally") keyword should be located on the same line\n      ...\n    }\n\n    try{                   // Noncompliant; there should be exactly one space between the control structure keyword and the curly brace\n      ...\n    } catch (Exception $e) {\n    }\n\n    analyse( $fruit ) ;    // Noncompliant; there should not be any space after the opening parenthesis and before the closing parenthesis\n\n    for ($i = 0;$i &lt; 10;   $i++) { // Nomcompliant; there should be exactly one space after each ";" in the {{for}} statement\n      ...\n    }\n\n    pressJuice($apply ,$orange);    // Noncompliant; the comma should be followed by one space and not preceded by any\n\n    do_something ();       // Noncompliant; there should not be any space after the method name\n\n    foreach ($fruits    as $fruit_key =&gt;     $fruit) {  // Noncompliant; in the foreach statement there should be one space before and after "as" keyword and "=&gt;" operator\n      ...\n    }\n  }\n}\n\nclass ClassB\nextends ParentClass  // Noncompliant; the class name and the "extends" / "implements" keyword should be on the same line\n{\n  ...\n}\n\nclass ClassC extends ParentClass implements \\ArrayAccess, \\Countable,\n    \\Serializable    // Noncompliant; the list of implemented interfaces should be correctly indented\n{\n\n  public function aVeryLongMethodName(ClassTypeHint $arg1, // Noncompliant; the arguments in a method declaration should be correctly indented\n    &amp;$arg2, array $arg3 = []) {\n\n    $noArgs_longVars = function () use ($longVar1,         // Noncompliant; the arguments in a function declaration should be correctly indented\n        $longerVar2,\n        $muchLongerVar3\n    ) {\n      ...\n    };\n\n    $foo-&gt;bar($longArgument,    // Noncompliant; the arguments in a method call should be correctly indented\n      $longerArgument,\n      $muchLongerArgument);     // Noncompliant; the closing parenthesis should be placed on the next line\n\n    $closureWithArgsAndVars = function($arg1, $arg2)use   ($var1, $var2) {  // Noncompliant; the closure declaration should be correctly spaced - see (5)\n      ...\n    };\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnamespace Vendor\\Package; // Compliant; the "namespace" declaration is followed by a blank line\n\nuse FooClass;             // Compliant; the "use" declaration is placed after the "namespace" declaration\n                          // Compliant; the "use" declaration is followed by a blank line\n$foo = 1;\n\nclass ClassA\n{                         // Compliant; the open curly brace is at the beginning of a new line for the class\n  function my_function()\n  {                       // Compliant; the open curly brace is at the beginning of a new line for the function\n    if ($firstThing) {    // Compliant; the open curly brace is at the end of line for the control structure\n      ...\n    }\n\n    if ($secondThing) {   // Compliant; there is exactly one space between the closing parenthesis and the opening curly brace\n      ...\n    }\n\n    if ($thirdThing) {    // Compliant; there is exactly one space between the control structure keyword and the opening parenthesis\n      ...\n    } else {              // Compliant; the close curly brace and the next "else" (or "catch" or "finally") keyword are located on the same line\n      ...\n    }\n\n    try {                 // Compliant; there is exactly one space between the control structure keyword and the curly brace\n      ...\n    } catch (Exception $e) {\n      ...\n    }\n\n    analyse($fruit);      // Compliant: there is no space after the opening parenthesis, nor before the closing parenthesis\n\n    for ($i = 0; $i &lt; 10; $i++) { // Compliant: there is exactly one space after each ";" in the {{for}} statement\n      ...\n    }\n\n    pressJuice($apply, $orange);   // Compliant; the comma is followed by one space and is not preceded by any\n\n    do_something();       // Compliant; there is no space after the method name\n\n    foreach ($fruits as $fruit_key =&gt; $fruit) {  // Compliant; in the foreach statement there is one space before and after "as" keyword and "=&gt;" operator\n      ...\n    }\n  }\n}\n\n/* The idea here is to make it obvious at first glance that a class extends\n * some other classes and/or implements some interfaces. The names of\n * extended classes or implemented interfaces can be located on subsequent lines.\n */\nclass ClassB1 extends ParentClass // Compliant; the class name and the "extends" (or "implements") keyword are located on the same line\n{\n  ...\n}\n\nclass ClassB2 extends             // Compliant; the class name and the "extends" (or "implements") keyword are located on the same line\nParentClass {\n  ...\n}\n\n/* Lists of implements may be split across multiple lines, where each subsequent line\n * is indented once. When doing so, the first item in the list should be on the next line,\n * and there should be only one interface per line.\n */\nclass ClassC extends ParentClass implements\n    \\ArrayAccess,         // Compliant; the list of implemented interfaces is correctly indented\n    \\Countable,\n    \\Serializable\n{\n  /* Argument lists may be split across multiple lines, where each subsequent line\n   * is indented once. When doing so, the first item in the list should be on the next line,\n   * and there should be only one argument per line. Also, when the argument list is\n   * split across multiple lines, the closing parenthesis and opening brace should be\n   * placed together on their own line with one space between them.\n   */\n  public function aVeryLongMethodName(\n    ClassTypeHint $arg1,  // Compliant; the arguments in a method/function declaration are correctly indented\n      &amp;$arg2,\n      array $arg3 = []\n    ) {\n      $noArgs_longVars = function () use (\n        $longVar1,        // Compliant; the arguments in a method/function declaration are correctly indented\n        $longerVar2,\n        $muchLongerVar3\n      ) {\n        ...\n      };\n\n\n    /* Argument lists may be split across multiple lines, where each subsequent line is\n     * indented once. When doing so, the first item in the list should be on the next line,\n     * and there should be only one argument per line.\n     */\n    $foo-&gt;bar(\n      $longArgument,       // Compliant; the arguments in the method call are be correctly indented\n      $longerArgument,\n      $muchLongerArgument\n    );                     // Compliant; the closing parenthesis is placed on a separate line\n\n    /* Closures should be declared with a space after the "function" keyword,\n     * and a space before and after the "use" keyword.\n     */\n    $closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) { // Compliant; the closure declaration is correctly spaced\n      ...\n    };\n  }\n}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	1min	\N	psr2,style	0	HTML	1576224544172	1576224544217	1	php
959	"goto" statement should not be used	S907	S907	php	<p><code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such\nas <code>if</code>, <code>for</code>, <code>while</code>, <code>continue</code> or <code>break</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$i = 0;\nloop:\n  echo("i = $i");\n  $i++;\n  if ($i &lt; 10){\n    goto loop;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++){\n  echo("i = $i");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.4 - The goto statement shall not be used. </li>\n  <li> MISRA C:2012, 15.1 - The goto statement should not be used </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	10min	\N	brain-overload,misra	0	HTML	1576224544331	1576224544334	1	php
1009	Subclasses that add fields should override "equals"	S2160	\N	squid	<p>Extend a class that overrides <code>equals</code> and add fields without overriding <code>equals</code> in the subclass, and you run the risk of\nnon-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.</p>\n<p>This rule looks for classes that do all of the following:</p>\n<ul>\n  <li> extend classes that override <code>equals</code>. </li>\n  <li> do not themselves override <code>equals</code>. </li>\n  <li> add fields. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit's equals method\n  private Color ripeColor;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {\n  private Color ripeColor;\n\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    Raspberry fobj = (Raspberry) obj;\n    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested\n      return true;\n    }\n    return false;\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	suspicious	0	HTML	1576224548772	1576224548817	1	java
1010	"java.lang.Error" should not be extended	S1194	\N	squid	<p><code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be\nencountered by the Java Virtual Machine.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Error { /* ... */ }       // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception { /* ... */ }   // Compliant\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	error-handling	0	HTML	1576224548866	1576224548869	1	java
1011	Static fields should not be updated in constructors	S3010	\N	squid	<p>Assigning a value to a <code>static</code> field in a constructor could cause unreliable behavior at runtime since it will change the value for all\ninstances of the class.</p>\n<p>Instead remove the field's <code>static</code> modifier, or initialize it statically.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person {\n  static Date dateOfBirth;\n  static int expectedFingers;\n\n  public Person(date birthday) {\n    dateOfBirth = birthday;  // Noncompliant; now everyone has this birthday\n    expectedFingers = 10;  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person {\n  Date dateOfBirth;\n  static int expectedFingers = 10;\n\n  public Person(date birthday) {\n    dateOfBirth = birthday;\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	\N	0	HTML	1576224548872	1576224548875	1	java
833	Flags enumerations zero-value members should be named "None"	S2346	\N	csharpsquid	<p>Consistent use of "None" in flags enumerations indicates that all flag values are cleared. The value 0 should not be used to indicate any other\nstate, since there is no way to check that the bit <code>0</code> is set.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[Flags]\nenum FruitType\n{\n    Void = 0,        // Non-Compliant\n    Banana = 1,\n    Orange = 2,\n    Strawberry = 4\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[Flags]\nenum FruitType\n{\n    None = 0,        // Compliant\n    Banana = 1,\n    Orange = 2,\n    Strawberry = 4\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224541338	1576224541341	1	csharp
834	"ToString()" method should not return null	S2225	\N	csharpsquid	<p>Calling <code>ToString()</code> on an object should always return a string. Returning <code>null</code> instead contravenes the method's implicit\ncontract.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic override string ToString ()\n{\n  if (this.collection.Count == 0)\n  {\n    return null; // Noncompliant\n  }\n  else\n  {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic override string ToString ()\n{\n  if (this.collection.Count == 0)\n  {\n    return string.Empty;\n  }\n  else\n  {\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert,cwe	0	HTML	1576224541345	1576224541347	2	csharp
835	JSON parser failure	S2260	\N	json	<p>\n    When the parser fails, it is possible to record the failure as an issue on the file. This way, not only is it\n    possible to track the number of files that do not parse but also to easily find out why they do not parse.\n</p>	3	\N	READY	json	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224541360	1576224541409	2	JSON
836	BOM should not be used for UTF-8 files	bom-utf8-files	\N	json	<p>\n    As stated in the Unicode specifications, use of a Byte Order Mark (BOM) is neither required nor recommended for\n    UTF-8 files.\n</p>\n\n<h2>See</h2>\n<ul>\n    <li><a href="http://www.unicode.org/versions/Unicode8.0.0/ch02.pdf">Unicode Specifications (2.6 Encoding\n        Schemes)</a></li>\n</ul>	2	\N	READY	json	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224541414	1576224541417	1	JSON
837	"version" should be a semantic version in Puppet "metadata.json" files	puppet-version	\N	json	<p>\n    Version management should comply with <a href="http://semver.org/">semantic version</a>.\n</p>\n<p>\n    Given a version number MAJOR.MINOR.PATCH, increment the:\n</p>\n<ul>\n    <li>MAJOR version when you make incompatible API changes</li>\n    <li>MINOR version when you add functionality in a backwards-compatible manner</li>\n    <li>PATCH version when you make backwards-compatible bug fixes</li>\n</ul>\n<p>\n    This rule check the version format that should be made of 3 digits separated by dots: <code>^\\d+\\.\\d+\\.\\d+$</code>\n</p>\n\n<h2>Noncompliant Version</h2>\n<pre>\n{\n  "version": "1.0",\n  "version": "1.0.0.2"\n}\n</pre>\n\n<h2>Compliant Version</h2>\n<pre>\n{\n  "version": "1.0.0",\n  "version": "1.0.2"\n}\n</pre>	2	\N	READY	json	CONSTANT_ISSUE	\N	5min	\N	convention,puppet	0	HTML	1576224541420	1576224541422	1	JSON
838	"author" should match the required value in Puppet "metadata.json" files	puppet-enforce-author-value	\N	json	<p>\n    This rule allows you to enforce a specific value for the <code>author</code> field in Puppet\n    <code>metadata.json</code> files.\n</p>\n<p>\n    Note that the rule is not triggered when no <code>author</code> key is defined. To enforce the definition of an\n    <code>author</code> key, activate rule <a href="coding_rules#rule_key=json:puppet-required-keys">puppet-required-keys</a>.\n</p>	2	\N	READY	json	CONSTANT_ISSUE	\N	5min	\N	convention,puppet	0	HTML	1576224541426	1576224541429	1	JSON
893	Related "if/else if" statements and "cases" in a "switch" should not have the same condition	S1862	S1862	php	<p>A <code>switch</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to <code>true</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>\n<p>For a <code>switch</code>, if the first case ends with a <code>break</code>, the second case will never be executed, rendering it dead code. Worse\nthere is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.</p>\n<p>On the other hand, if the first case does not end with a <code>break</code>, both cases will be executed, but future maintainers may not notice\nthat.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($param == 1)\n  openWindow();\nelse if ($param == 2)\n  closeWindow();\nelse if ($param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n\n\nswitch($i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  case 1:  // Noncompliant\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ($param == 1)\n  openWindow();\nelse if ($param == 2)\n  closeWindow();\nelse if ($param == 3)\n  moveWindowToTheBackground();\n\nswitch($i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	10min	\N	cert,pitfall,unused	0	HTML	1576224543036	1576224543079	2	php
894	Colors should be defined in upper case	S2038	S2038	php	<p>Shared coding conventions allow teams to collaborate effectively. Writing colors in upper case makes them stand out at such, thereby making the\ncode easier to read.</p>\n<p>This rule checks that hexadecimal color definitions are written in upper case.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$white = '#ffffff';  // Noncompliant\n$dkgray = '#006400';\n$aqua = '#00ffff';  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$white = '#FFFFFF';  // Compliant\n$dkgray = '#006400';\n$aqua = '#00FFFF';  // Compliant\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224543124	1576224543125	1	php
895	Class constructors should not create other objects	S2830	S2830	php	<p>Dependency injection is a software design pattern in which one or more dependencies (or services) are injected, or passed by reference, into a\ndependent object (or client) and are made part of the client's state. The pattern separates the creation of a client's dependencies from its own\nbehavior, which allows program designs to be loosely coupled and to follow the dependency inversion and single responsibility principles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass SomeClass {\n\n  public function __construct() {\n    $this-&gt;object = new SomeOtherClass();  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass SomeClass {\n\n  public function __construct(SomeOtherClass $object) {\n    $this-&gt;object = $object;\n  }\n}\n</pre>	2	\N	READY	php	CONSTANT_ISSUE	\N	10min	\N	design	0	HTML	1576224543127	1576224543127	1	php
960	Non-empty statements should change control flow or have at least one side-effect	S905	S905	php	<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does\nnot result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$a == 1; // Noncompliant; was assignment intended?\n$a &lt; $b; // Noncompliant; have we forgotten to assign the result to a variable?\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/482">MITRE, CWE-482</a> - Comparing instead of Assigning </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.\n  </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	10min	\N	cert,cwe,misra,unused	0	HTML	1576224544338	1576224544340	2	php
961	Variables should not be self-assigned	S1656	S1656	php	<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic function setName($name) {\n    $name = $name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic function setName($name) {\n    $this-&gt;name = $name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	3min	\N	cert	0	HTML	1576224544342	1576224544344	2	php
962	Function argument names should be unique	S1536	S1536	php	<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument\nhides all the previous arguments with the same name. This hiding makes no sense, reduces understandability and maintainability, and obviously can be\nerror prone. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction compute($a, $a, $c) { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction compute($a, $b, $c) { // Compliant\n}\n</pre>	2	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224544347	1576224544348	2	php
963	Only LF character (Unix-like) should be used to end lines	S1779	S1779	php	<p>All developers should use the same end-line character(s) to prevent polluting the history changelog of source files in the SCM engine. Moreover\nsome SCM engines like Git might sometimes badly support use of Windows 'CRLF' end of line characters.</p>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	convention,psr2	0	HTML	1576224544350	1576224544351	1	php
964	Lines should not end with trailing whitespaces	S1131	S1131	php	<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same\nfile.</p>\n<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the\nopportunity to do so. </p>	1	\N	READY	php	CONSTANT_ISSUE	\N	1min	\N	convention,psr2	0	HTML	1576224544353	1576224544353	1	php
785	Non-abstract attributes should be sealed	S4060	\N	csharpsquid	<p>The .NET framework class library provides methods for retrieving custom attributes. Sealing the attribute eliminates the search through the\ninheritance hierarchy, and can improve performance.</p>\n<p>This rule raises an issue when a public type inherits from <code>System.Attribute</code>, is not abstract, and is not sealed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct)]\n    public class MyAttribute: Attribute // Noncompliant\n    {\n        private string nameValue;\n        public MyAttribute(string name)\n        {\n            nameValue = name;\n        }\n\n        public string Name\n        {\n            get\n            {\n                return nameValue;\n            }\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct)]\n    public sealed class MyAttribute: Attribute\n    {\n        private string nameValue;\n        public MyAttribute(string name)\n        {\n            nameValue = name;\n        }\n\n        public string Name\n        {\n            get\n            {\n                return nameValue;\n            }\n        }\n    }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	performance	0	HTML	1576224539784	1576224539832	1	csharp
786	"params" should be used instead of "varargs"	S4061	\N	csharpsquid	<p>A method using the <code>VarArgs</code> calling convention is not Common Language Specification (CLS) compliant and might not be accessible across\nprogramming languages, while the <code>params</code> keyword works the same way and is CLS compliant.</p>\n<p>This rule raises an issue when a <code>public</code> or <code>protected</code> type contains a <code>public</code> or <code>protected</code> method\nthat uses the <code>VarArgs</code> calling convention.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void Bar(__arglist) // Noncompliant\n        {\n            ArgIterator argumentIterator = new ArgIterator(__arglist);\n            for(int i = 0; i &lt; argumentIterator.GetRemainingCount(); i++)\n            {\n                Console.WriteLine(\n                    __refvalue(argumentIterator.GetNextArg(), string));\n            }\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\n[assembly: CLSCompliant(true)]\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        public void Bar(params string[] wordList)\n        {\n            for(int i = 0; i &lt; wordList.Length; i++)\n            {\n                Console.WriteLine(wordList[i]);\n            }\n        }\n    }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224539876	1576224539919	1	csharp
787	Redundant casts should not be used	S1905	\N	csharpsquid	<p>Unnecessary casting expressions make the code harder to read and understand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int Example(int i)\n{\n  return (int) (i + 42); // Noncompliant\n}\npublic IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)\n{\n  return coll.Reverse().OfType&lt;int&gt;(); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int Example(int i)\n{\n  return i + 42;\n}\npublic IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)\n{\n  return coll.Reverse();\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	clumsy,redundant	0	HTML	1576224539964	1576224539965	1	csharp
788	Empty statements should be removed	S1116	\N	csharpsquid	<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething()\n{\n  ; // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse()\n{\n  Console.WriteLine("Hello, world!");;  // Noncompliant - double ;\n  ...\n  // Rarely, they are used on purpose as the body of a loop. It is a bad practice to\n  // have side-effects outside of the loop:\n  for (int i = 0; i &lt; 3; Console.WriteLine(i), i++); // Noncompliant\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething()\n{\n}\n\nvoid doSomethingElse()\n{\n  Console.WriteLine("Hello, world!");\n  ...\n  for (int i = 0; i &lt; 3; i++)\n  {\n    Console.WriteLine(i);\n   }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. </li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/7gCTAw">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,\n  or while condition </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/i4FtAg">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,\n  or while statement </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	cert,misra,unused	0	HTML	1576224539968	1576224540017	1	csharp
839	Tabulation characters should not be used	tab-character	\N	json	<p>\n    Developers should not need to configure the tab width of their text editors in order to be able to read source code.\n    So the use of tabulation character must be banned.\n</p>	1	\N	READY	json	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224541442	1576224541445	1	JSON
840	File names should comply with a naming convention	S1578	\N	json	<p>\n    Shared coding conventions allow teams to collaborate effectively. This rule checks that all file names match a\n    provided regular expression.\n</p>\n<p>As JSON files are used in a large variety of ways and by many frameworks, it might sometimes be tricky to enforce a\n    strict file naming convention. However, the default regular expression has been designed to match as closely as\n    possible the following guidelines:\n</p>\n<ul>\n    <li>Suffix files with <code>.json</code></li>\n    <li>Only use letters, digits, '_' and '-' characters</li>\n    <li>Refrain from using '_' and '-' characters. Only use them when mandatory.</li>\n    <li>Extensively use Camel Case. For example, prefer:\n<pre>\nmyObject.json\n</pre>\n        to\n<pre>\nmyobject.json\nmy_object.json\n</pre>\n    </li>\n</ul>	1	\N	READY	json	CONSTANT_ISSUE	\N	10min	\N	convention	0	HTML	1576224541448	1576224541450	1	JSON
841	Duplicated dependencies should be removed from Puppet "metadata.json" files	puppet-duplicated-dependencies	\N	json	<p>\n    This rule checks for duplicated dependency entries in Puppet <code>metadata.json</code> files. Those duplicated\n    dependencies should be merged.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n{\n  ...\n  "dependencies": [\n    { "name": "puppetlabs/stdlib", "version_requirement": ">=3.2.0 <5.0.0" },\n    { "name": "puppetlabs/firewall", "version_requirement": ">= 0.0.4" },\n    { "name": "puppetlabs/apt", "version_requirement": ">=1.1.0 <2.0.0" },\n    { "name": "puppetlabs/stdlib", "version_requirement": ">=4.2.0" }    # Noncompliant: Duplicated dependency\n  ]\n  ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n{\n  ...\n  "dependencies": [\n    { "name": "puppetlabs/stdlib", "version_requirement": ">=3.2.0 <5.0.0" },\n    { "name": "puppetlabs/firewall", "version_requirement": ">= 0.0.4" },\n    { "name": "puppetlabs/apt", "version_requirement": ">=1.1.0 <2.0.0" }\n  ]\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n    <li>\n        <a href="https://docs.puppetlabs.com/puppet/latest/reference/modules_publishing.html#dependencies-in-metadatajson">Puppet\n            Labs documentation - Write a metadata.json File</a></li>\n</ul>	2	\N	READY	json	CONSTANT_ISSUE	\N	5min	\N	pitfall,puppet	0	HTML	1576224541454	1576224541496	1	JSON
842	Regular expression on key	key-regular-expression	\N	json	<p>This rule template can be used to create rules which will be triggered when a key matches a given regular\n    expression.\n</p>\n<p>\n    For example, one can create a rule with the regular expression <code>.*error.*</code> to match all key containing\n    "error". Note that, in order to match "error" regardless of the case, the <code>(?i)</code> modifier can be\n    prepended to the expression, as in <code>(?i).*error.*</code>.\n</p>	2	\N	READY	json	\N	\N	\N	\N	\N	1	HTML	1576224541542	1576224541542	1	JSON
843	"license" should match the required value in Puppet "metadata.json" files	puppet-enforce-license-value	\N	json	<p>\n    This rule allows you to enforce a specific value for the <code>license</code> field in Puppet\n    <code>metadata.json</code> files.\n</p>\n<p>\n    Note that the rule is not triggered when no <code>license</code> key is defined. To enforce the definition of a\n    <code>license</code> key, activate rule <a href="coding_rules#rule_key=json:puppet-required-keys">puppet-required-keys</a>.\n</p>	2	\N	READY	json	CONSTANT_ISSUE	\N	5min	\N	convention,puppet	0	HTML	1576224541552	1576224541555	1	JSON
896	PHP parser failure	S2260	S2260	php	<p>When the PHP parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.</p>	2	\N	READY	php	CONSTANT_ISSUE	\N	30min	\N	suspicious	0	HTML	1576224543129	1576224543130	1	php
897	Unused function parameters should be removed	S1172	S1172	php	<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething($a, $b) { // "$a" is unused\n  return compute($b);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething($b) {\n  return compute($b);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Functions in classes that override a class or implement interfaces are ignored.</p>\n<pre>\nclass C extends B {\n\n  function doSomething($a, $b) {     // no issue reported on $b\n    compute($a);\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>\n  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	cert,misra,unused	0	HTML	1576224543131	1576224543132	1	php
898	File names should comply with a naming convention	S1578	S1578	php	<p>Shared coding conventions allow teams to collaborate effectively. For that reason, file names should conform to a defined standard. This rule\nraises an issue when the names of analyzed files don't match the provided regular expression.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/P4IyAQ">CERT, MSC09-CPP.</a> - Character encoding: Use subset of ASCII for safety </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/lQAl">CERT, MSC09-C.</a> - Character encoding: Use subset of ASCII for safety </li>\n</ul>	1	\N	READY	php	CONSTANT_ISSUE	\N	10min	\N	cert,convention	0	HTML	1576224543133	1576224543134	1	php
899	Track lack of copyright and license headers	S1451	S1451	php	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>	4	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224543136	1576224543137	1	php
965	Generic exceptions ErrorException, RuntimeException and Exception should not be thrown	S112	S112	php	<p>If you throw a general exception type, such as ErrorException, RuntimeException, or Exception in a library or framework, it forces consumers to\ncatch all exceptions, including unknown exceptions that they do not know how to handle.</p>\n<p>Instead, either throw a subtype that already exists in the Standard PHP Library, or create your own type that derives from Exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nthrow new Exception();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nthrow new InvalidArgumentException();\n// or\nthrow new UnexpectedValueException();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/397.html">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/BoB3AQ">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	20min	\N	cert,cwe,error-handling	0	HTML	1576224544355	1576224544356	1	php
966	Credentials should not be hard-coded	S2068	S2068	php	<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to\nend up in the hands of an attacker. This is particularly true for applications that are distributed.</p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$uname = "steve";\n$password = "blue";\nconnect($uname, $password);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$uname = getEncryptedUser();\n$password = getEncryptedPass();\nconnect($uname, $password);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/798">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/259">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management">OWASP Top Ten 2013 Category A2</a> -\n  Broken Authentication and Session Management </li>\n  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD">Hard Coded Password</a> </li>\n</ul>	4	\N	READY	php	CONSTANT_ISSUE	\N	30min	\N	cert,cwe,owasp-a2,sans-top25-porous	0	HTML	1576224544357	1576224544403	3	php
967	Track uses of "FIXME" tags	S1134	S1134	php	<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction divide($numerator, $denominator) {\n  return $numerator / $denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>	2	\N	READY	php	\N	\N	\N	\N	cwe	0	HTML	1576224544451	1576224544451	1	php
789	"switch" statements should not have too many "case" clauses	S1479	\N	csharpsquid	<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	30min	\N	brain-overload	0	HTML	1576224540060	1576224540061	1	csharp
790	Assertion arguments should be passed in the correct order	S3415	\N	csharpsquid	<p>The standard assertions library methods such as <code>AreEqual</code>, and <code>AreSame</code> expect the first argument to be the expected value\nand the second argument to be the actual value. Swap them, and your test will still have the same outcome (succeed/fail when it should) but the error\nmessages will be confusing. </p>\n<p>This rule raises an issue when the second argument to an assertions library method is a hard-coded value and the first argument is not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAssert.AreEqual(runner.ExitCode, 0, "Unexpected exit code");  // Noncompliant; Yields error message like: Expected:&lt;-1&gt;. Actual:&lt;0&gt;.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nAssert.AreEqual(0, runner.ExitCode, "Unexpected exit code");\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	suspicious,tests	0	HTML	1576224540066	1576224540067	1	csharp
791	Unused type parameters should be removed	S2326	\N	csharpsquid	<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MoreMath&lt;T&gt;   // Noncompliant; &lt;T&gt; is ignored\n{\n  public int Add&lt;T&gt;(int a, int b) // Noncompliant; &lt;T&gt; is ignored\n  {\n    return a + b;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MoreMath\n{\n  public int Add (int a, int b)\n  {\n    return a + b;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert,unused	0	HTML	1576224540068	1576224540069	1	csharp
792	Local variables should not shadow class fields	S1117	\N	csharpsquid	<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo\n{\n  public int myField;\n\n  public void DoSomething()\n  {\n    int myField = 0;  // Noncompliant\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/2ADEAw">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert,pitfall	0	HTML	1576224540071	1576224540072	1	csharp
844	Deprecated keys should be removed from Puppet "metadata.json" files	puppet-deprecated-keys	\N	json	<p>\n    The following keys are deprecated in Puppet <code>metadata.json</code> files:\n</p>\n<ul>\n    <li><code>types</code>: Should be removed</li>\n    <li><code>checksums</code>: Should be removed</li>\n    <li><code>description</code>: Should be replaced by the <code>summary</code> key</li>\n</ul>\n\n<h2>See</h2>\n<ul>\n    <li><a href="http://docs.puppetlabs.com/puppet/latest/reference/modules_publishing.html#write-a-metadatajson-file">Puppet\n        Labs documentation - Write a metadata.json File</a></li>\n</ul>	2	\N	READY	json	CONSTANT_ISSUE	\N	5min	\N	obsolete,puppet	0	HTML	1576224541562	1576224541564	1	JSON
845	"license" should be valid in Puppet "metadata.json" files	puppet-license	\N	json	<p>\n    License should be either <code>proprietary</code> or one listed on the <a href="http://spdx.org/licenses/">SPDX</a>\n    page.\n</p>\n\n<h2>Nocompliant Code Example</h2>\n<pre>\n{\n  ...\n  "license": blabla\n  ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n{\n  ...\n  "license": "proprietary"\n  ...\n}\n\n{\n  ...\n  "license": "LGPL-3.0"\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n    <li><a href="http://docs.puppetlabs.com/puppet/latest/reference/modules_publishing.html#write-a-metadatajson-file">Puppet\n        Labs documentation - Write a metadata.json File</a></li>\n</ul>\n\n<h2>List of Licenses</h2>\n<table style="border: 0;"><tr><td style="border: 0;">Glide</td><td style="border: 0;">Abstyles</td><td style="border: 0;">AFL-1.1</td></tr><tr><td style="border: 0;">AFL-1.2</td><td style="border: 0;">AFL-2.0</td><td style="border: 0;">AFL-2.1</td></tr><tr><td style="border: 0;">AFL-3.0</td><td style="border: 0;">AMPAS</td><td style="border: 0;">APL-1.0</td></tr><tr><td style="border: 0;">Adobe-Glyph</td><td style="border: 0;">APAFML</td><td style="border: 0;">Adobe-2006</td></tr><tr><td style="border: 0;">AGPL-1.0</td><td style="border: 0;">Afmparse</td><td style="border: 0;">Aladdin</td></tr><tr><td style="border: 0;">ADSL</td><td style="border: 0;">AMDPLPA</td><td style="border: 0;">ANTLR-PD</td></tr><tr><td style="border: 0;">Apache-1.0</td><td style="border: 0;">Apache-1.1</td><td style="border: 0;">Apache-2.0</td></tr><tr><td style="border: 0;">AML</td><td style="border: 0;">APSL-1.0</td><td style="border: 0;">APSL-1.1</td></tr><tr><td style="border: 0;">APSL-1.2</td><td style="border: 0;">APSL-2.0</td><td style="border: 0;">Artistic-1.0</td></tr><tr><td style="border: 0;">Artistic-1.0-Perl</td><td style="border: 0;">Artistic-1.0-cl8</td><td style="border: 0;">Artistic-2.0</td></tr><tr><td style="border: 0;">AAL</td><td style="border: 0;">Bahyph</td><td style="border: 0;">Barr</td></tr><tr><td style="border: 0;">Beerware</td><td style="border: 0;">BitTorrent-1.0</td><td style="border: 0;">BitTorrent-1.1</td></tr><tr><td style="border: 0;">BSL-1.0</td><td style="border: 0;">Borceux</td><td style="border: 0;">BSD-2-Clause</td></tr><tr><td style="border: 0;">BSD-2-Clause-FreeBSD</td><td style="border: 0;">BSD-2-Clause-NetBSD</td><td style="border: 0;">BSD-3-Clause</td></tr><tr><td style="border: 0;">BSD-3-Clause-Clear</td><td style="border: 0;">BSD-4-Clause</td><td style="border: 0;">BSD-Protection</td></tr><tr><td style="border: 0;">BSD-3-Clause-Attribution</td><td style="border: 0;">BSD-4-Clause-UC</td><td style="border: 0;">bzip2-1.0.5</td></tr><tr><td style="border: 0;">bzip2-1.0.6</td><td style="border: 0;">Caldera</td><td style="border: 0;">CECILL-1.0</td></tr><tr><td style="border: 0;">CECILL-1.1</td><td style="border: 0;">CECILL-2.0</td><td style="border: 0;">CECILL-B</td></tr><tr><td style="border: 0;">CECILL-C</td><td style="border: 0;">ClArtistic</td><td style="border: 0;">MIT-CMU</td></tr><tr><td style="border: 0;">CNRI-Jython</td><td style="border: 0;">CNRI-Python</td><td style="border: 0;">CNRI-Python-GPL-Compatible</td></tr><tr><td style="border: 0;">CPOL-1.02</td><td style="border: 0;">CDDL-1.0</td><td style="border: 0;">CDDL-1.1</td></tr><tr><td style="border: 0;">CPAL-1.0</td><td style="border: 0;">CPL-1.0</td><td style="border: 0;">CATOSL-1.1</td></tr><tr><td style="border: 0;">Condor-1.1</td><td style="border: 0;">CC-BY-1.0</td><td style="border: 0;">CC-BY-2.0</td></tr><tr><td style="border: 0;">CC-BY-2.5</td><td style="border: 0;">CC-BY-3.0</td><td style="border: 0;">CC-BY-4.0</td></tr><tr><td style="border: 0;">CC-BY-ND-1.0</td><td style="border: 0;">CC-BY-ND-2.0</td><td style="border: 0;">CC-BY-ND-2.5</td></tr><tr><td style="border: 0;">CC-BY-ND-3.0</td><td style="border: 0;">CC-BY-ND-4.0</td><td style="border: 0;">CC-BY-NC-1.0</td></tr><tr><td style="border: 0;">CC-BY-NC-2.0</td><td style="border: 0;">CC-BY-NC-2.5</td><td style="border: 0;">CC-BY-NC-3.0</td></tr><tr><td style="border: 0;">CC-BY-NC-4.0</td><td style="border: 0;">CC-BY-NC-ND-1.0</td><td style="border: 0;">CC-BY-NC-ND-2.0</td></tr><tr><td style="border: 0;">CC-BY-NC-ND-2.5</td><td style="border: 0;">CC-BY-NC-ND-3.0</td><td style="border: 0;">CC-BY-NC-ND-4.0</td></tr><tr><td style="border: 0;">CC-BY-NC-SA-1.0</td><td style="border: 0;">CC-BY-NC-SA-2.0</td><td style="border: 0;">CC-BY-NC-SA-2.5</td></tr><tr><td style="border: 0;">CC-BY-NC-SA-3.0</td><td style="border: 0;">CC-BY-NC-SA-4.0</td><td style="border: 0;">CC-BY-SA-1.0</td></tr><tr><td style="border: 0;">CC-BY-SA-2.0</td><td style="border: 0;">CC-BY-SA-2.5</td><td style="border: 0;">CC-BY-SA-3.0</td></tr><tr><td style="border: 0;">CC-BY-SA-4.0</td><td style="border: 0;">CC0-1.0</td><td style="border: 0;">Crossword</td></tr><tr><td style="border: 0;">CUA-OPL-1.0</td><td style="border: 0;">Cube</td><td style="border: 0;">D-FSL-1.0</td></tr><tr><td style="border: 0;">diffmark</td><td style="border: 0;">WTFPL</td><td style="border: 0;">DOC</td></tr><tr><td style="border: 0;">Dotseqn</td><td style="border: 0;">DSDP</td><td style="border: 0;">dvipdfm</td></tr><tr><td style="border: 0;">EPL-1.0</td><td style="border: 0;">ECL-1.0</td><td style="border: 0;">ECL-2.0</td></tr><tr><td style="border: 0;">eGenix</td><td style="border: 0;">EFL-1.0</td><td style="border: 0;">EFL-2.0</td></tr><tr><td style="border: 0;">MIT-advertising</td><td style="border: 0;">MIT-enna</td><td style="border: 0;">Entessa</td></tr><tr><td style="border: 0;">ErlPL-1.1</td><td style="border: 0;">EUDatagrid</td><td style="border: 0;">EUPL-1.0</td></tr><tr><td style="border: 0;">EUPL-1.1</td><td style="border: 0;">Eurosym</td><td style="border: 0;">Fair</td></tr><tr><td style="border: 0;">MIT-feh</td><td style="border: 0;">Frameworx-1.0</td><td style="border: 0;">FreeImage</td></tr><tr><td style="border: 0;">FTL</td><td style="border: 0;">FSFUL</td><td style="border: 0;">FSFULLR</td></tr><tr><td style="border: 0;">Giftware</td><td style="border: 0;">GL2PS</td><td style="border: 0;">Glulxe</td></tr><tr><td style="border: 0;">AGPL-3.0</td><td style="border: 0;">GFDL-1.1</td><td style="border: 0;">GFDL-1.2</td></tr><tr><td style="border: 0;">GFDL-1.3</td><td style="border: 0;">GPL-1.0</td><td style="border: 0;">GPL-2.0</td></tr><tr><td style="border: 0;">GPL-3.0</td><td style="border: 0;">LGPL-2.1</td><td style="border: 0;">LGPL-3.0</td></tr><tr><td style="border: 0;">LGPL-2.0</td><td style="border: 0;">gnuplot</td><td style="border: 0;">gSOAP-1.3b</td></tr><tr><td style="border: 0;">HaskellReport</td><td style="border: 0;">HPND</td><td style="border: 0;">IBM-pibs</td></tr><tr><td style="border: 0;">IPL-1.0</td><td style="border: 0;">ICU</td><td style="border: 0;">ImageMagick</td></tr><tr><td style="border: 0;">iMatix</td><td style="border: 0;">Imlib2</td><td style="border: 0;">IJG</td></tr><tr><td style="border: 0;">Intel-ACPI</td><td style="border: 0;">Intel</td><td style="border: 0;">IPA</td></tr><tr><td style="border: 0;">ISC</td><td style="border: 0;">JasPer-2.0</td><td style="border: 0;">JSON</td></tr><tr><td style="border: 0;">LPPL-1.3a</td><td style="border: 0;">LPPL-1.0</td><td style="border: 0;">LPPL-1.1</td></tr><tr><td style="border: 0;">LPPL-1.2</td><td style="border: 0;">LPPL-1.3c</td><td style="border: 0;">Latex2e</td></tr><tr><td style="border: 0;">BSD-3-Clause-LBNL</td><td style="border: 0;">Leptonica</td><td style="border: 0;">LGPLLR</td></tr><tr><td style="border: 0;">Libpng</td><td style="border: 0;">libtiff</td><td style="border: 0;">LPL-1.02</td></tr><tr><td style="border: 0;">LPL-1.0</td><td style="border: 0;">MakeIndex</td><td style="border: 0;">MTLL</td></tr><tr><td style="border: 0;">MS-PL</td><td style="border: 0;">MS-RL</td><td style="border: 0;">MirOS</td></tr><tr><td style="border: 0;">MITNFA</td><td style="border: 0;">MIT</td><td style="border: 0;">Motosoto</td></tr><tr><td style="border: 0;">MPL-1.0</td><td style="border: 0;">MPL-1.1</td><td style="border: 0;">MPL-2.0</td></tr><tr><td style="border: 0;">MPL-2.0-no-copyleft-exception</td><td style="border: 0;">mpich2</td><td style="border: 0;">Multics</td></tr><tr><td style="border: 0;">Mup</td><td style="border: 0;">NASA-1.3</td><td style="border: 0;">Naumen</td></tr><tr><td style="border: 0;">NBPL-1.0</td><td style="border: 0;">NetCDF</td><td style="border: 0;">NGPL</td></tr><tr><td style="border: 0;">NOSL</td><td style="border: 0;">NPL-1.0</td><td style="border: 0;">NPL-1.1</td></tr><tr><td style="border: 0;">Newsletr</td><td style="border: 0;">NLPL</td><td style="border: 0;">Nokia</td></tr><tr><td style="border: 0;">NPOSL-3.0</td><td style="border: 0;">Noweb</td><td style="border: 0;">NRL</td></tr><tr><td style="border: 0;">NTP</td><td style="border: 0;">Nunit</td><td style="border: 0;">OCLC-2.0</td></tr><tr><td style="border: 0;">ODbL-1.0</td><td style="border: 0;">PDDL-1.0</td><td style="border: 0;">OGTSL</td></tr><tr><td style="border: 0;">OLDAP-2.2.2</td><td style="border: 0;">OLDAP-1.1</td><td style="border: 0;">OLDAP-1.2</td></tr><tr><td style="border: 0;">OLDAP-1.3</td><td style="border: 0;">OLDAP-1.4</td><td style="border: 0;">OLDAP-2.0</td></tr><tr><td style="border: 0;">OLDAP-2.0.1</td><td style="border: 0;">OLDAP-2.1</td><td style="border: 0;">OLDAP-2.2</td></tr><tr><td style="border: 0;">OLDAP-2.2.1</td><td style="border: 0;">OLDAP-2.3</td><td style="border: 0;">OLDAP-2.4</td></tr><tr><td style="border: 0;">OLDAP-2.5</td><td style="border: 0;">OLDAP-2.6</td><td style="border: 0;">OLDAP-2.7</td></tr><tr><td style="border: 0;">OLDAP-2.8</td><td style="border: 0;">OML</td><td style="border: 0;">OPL-1.0</td></tr><tr><td style="border: 0;">OSL-1.0</td><td style="border: 0;">OSL-1.1</td><td style="border: 0;">OSL-2.0</td></tr><tr><td style="border: 0;">OSL-2.1</td><td style="border: 0;">OSL-3.0</td><td style="border: 0;">OpenSSL</td></tr><tr><td style="border: 0;">PHP-3.0</td><td style="border: 0;">PHP-3.01</td><td style="border: 0;">Plexus</td></tr><tr><td style="border: 0;">PostgreSQL</td><td style="border: 0;">psfrag</td><td style="border: 0;">psutils</td></tr><tr><td style="border: 0;">Python-2.0</td><td style="border: 0;">QPL-1.0</td><td style="border: 0;">Qhull</td></tr><tr><td style="border: 0;">Rdisc</td><td style="border: 0;">RPSL-1.0</td><td style="border: 0;">RPL-1.1</td></tr><tr><td style="border: 0;">RPL-1.5</td><td style="border: 0;">RHeCos-1.1</td><td style="border: 0;">RSCPL</td></tr><tr><td style="border: 0;">RSA-MD</td><td style="border: 0;">Ruby</td><td style="border: 0;">SAX-PD</td></tr><tr><td style="border: 0;">Saxpath</td><td style="border: 0;">SCEA</td><td style="border: 0;">SWL</td></tr><tr><td style="border: 0;">SGI-B-1.0</td><td style="border: 0;">SGI-B-1.1</td><td style="border: 0;">SGI-B-2.0</td></tr><tr><td style="border: 0;">OFL-1.0</td><td style="border: 0;">OFL-1.1</td><td style="border: 0;">SimPL-2.0</td></tr><tr><td style="border: 0;">Sleepycat</td><td style="border: 0;">SNIA</td><td style="border: 0;">Spencer-86</td></tr><tr><td style="border: 0;">Spencer-94</td><td style="border: 0;">Spencer-99</td><td style="border: 0;">SMLNJ</td></tr><tr><td style="border: 0;">SugarCRM-1.1.3</td><td style="border: 0;">SISSL</td><td style="border: 0;">SISSL-1.2</td></tr><tr><td style="border: 0;">SPL-1.0</td><td style="border: 0;">Watcom-1.0</td><td style="border: 0;">TCL</td></tr><tr><td style="border: 0;">Unlicense</td><td style="border: 0;">TMate</td><td style="border: 0;">TORQUE-1.1</td></tr><tr><td style="border: 0;">TOSL</td><td style="border: 0;">Unicode-TOU</td><td style="border: 0;">UPL-1.0</td></tr><tr><td style="border: 0;">NCSA</td><td style="border: 0;">Vim</td><td style="border: 0;">VOSTROM</td></tr><tr><td style="border: 0;">VSL-1.0</td><td style="border: 0;">W3C-19980720</td><td style="border: 0;">W3C</td></tr><tr><td style="border: 0;">Wsuipa</td><td style="border: 0;">Xnet</td><td style="border: 0;">X11</td></tr><tr><td style="border: 0;">Xerox</td><td style="border: 0;">XFree86-1.1</td><td style="border: 0;">xinetd</td></tr><tr><td style="border: 0;">xpp</td><td style="border: 0;">XSkat</td><td style="border: 0;">YPL-1.0</td></tr><tr><td style="border: 0;">YPL-1.1</td><td style="border: 0;">Zed</td><td style="border: 0;">Zend-2.0</td></tr><tr><td style="border: 0;">Zimbra-1.3</td><td style="border: 0;">Zimbra-1.4</td><td style="border: 0;">Zlib</td></tr><tr><td style="border: 0;">zlib-acknowledgement</td><td style="border: 0;">ZPL-1.1</td><td style="border: 0;">ZPL-2.0</td></tr><tr><td style="border: 0;">ZPL-2.1</td></tr></table>	2	\N	READY	json	CONSTANT_ISSUE	\N	5min	\N	convention,puppet	0	HTML	1576224541568	1576224541618	1	JSON
846	Files should contain an empty new line at the end	empty-line-end-of-file	\N	json	<p>Some tools such as Git work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like:</p>\n<pre>\n{\n  "key": "value"\n}\n\\ No newline at end of file\n</pre>\n<p>if the empty line is missing at the end of the file.</p>	1	\N	READY	json	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224541667	1576224541669	1	JSON
847	Puppet "metadata.json" files should define all the required keys	puppet-required-keys	\N	json	<p>\n    Every Puppet <code>metadata.json</code> file should define the following keys:\n</p>\n<ul>\n    <li><code>name</code></li>\n    <li><code>version</code></li>\n    <li><code>author</code></li>\n    <li><code>license</code></li>\n    <li><code>summary</code></li>\n    <li><code>source</code></li>\n    <li><code>dependencies</code></li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\nMissing <code>author</code> and <code>license</code> keys:\n<pre>\n{\n  "name": "examplecorp-mymodule",\n  "version": "0.0.1",\n  "summary": "A module for a thing",\n  "source": "https://github.com/examplecorp/examplecorp-mymodule",\n  "dependencies": [\n    { "name": "puppetlabs/stdlib", "version_requirement": ">=3.2.0 <5.0.0" },\n    { "name": "puppetlabs/firewall", "version_requirement": ">= 0.0.4" }\n  ]\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n{\n  "name": "examplecorp-mymodule",\n  "version": "0.0.1",\n  "author": "Pat",\n  "license": "Apache-2.0",\n  "summary": "A module for a thing",\n  "source": "https://github.com/examplecorp/examplecorp-mymodule",\n  "dependencies": [\n    { "name": "puppetlabs/stdlib", "version_requirement": ">=3.2.0 <5.0.0" },\n    { "name": "puppetlabs/firewall", "version_requirement": ">= 0.0.4" }\n  ]\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n    <li><a href="http://docs.puppetlabs.com/puppet/latest/reference/modules_publishing.html#write-a-metadatajson-file">Puppet\n        Labs documentation - Write a metadata.json File</a></li>\n</ul>	2	\N	READY	json	CONSTANT_ISSUE	\N	10min	\N	convention,puppet	0	HTML	1576224541671	1576224541716	1	JSON
848	Comments should not be located at the end of lines of code	S139	S139	php	<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$a = $b + $c; // This is a trailing comment that can be very very long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\n$a = $b + $c;\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224541768	1576224541815	1	php
900	Short-circuit logic should be used to prevent null pointer dereferences in conditionals	S1697	S1697	php	<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely\nnull-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced\n<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($obj == null &amp;&amp; $obj-&gt;isOpen()) {\n  echo "Object is open";\n}\n\nif ($obj != null || $obj-&gt;isOpen()) {\n  echo "Object is not open";\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ($obj == null || $obj-&gt;isOpen()) {\n  echo "Object is open";\n}\n\nif ($obj != null &amp;&amp; !$obj-&gt;isOpen()) {\n  echo "Object is not open";\n}\n</pre>	2	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224543139	1576224543140	2	php
901	Alias functions should not be used	S2050	S2050	php	<p>Certain functions exist in PHP only as aliases of other functions. These aliases have been made available for backward compatibility, but should\nreally be removed from code. </p>\n<p>This rule looks for uses of the following aliases:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Alias</th>\n      <th>Replacement</th>\n    </tr>\n    <tr>\n      <td><code>chop</code></td>\n      <td><code>rtrim</code></td>\n    </tr>\n    <tr>\n      <td><code>close</code></td>\n      <td><code>closedir</code></td>\n    </tr>\n    <tr>\n      <td><code>doubleval</code></td>\n      <td><code>floatval</code></td>\n    </tr>\n    <tr>\n      <td><code>fputs</code></td>\n      <td><code>fwrite</code></td>\n    </tr>\n    <tr>\n      <td><code>ini_alter</code></td>\n      <td><code>ini_set</code></td>\n    </tr>\n    <tr>\n      <td><code>is_double</code></td>\n      <td><code>is_float</code></td>\n    </tr>\n    <tr>\n      <td><code>is_integer</code></td>\n      <td><code>is_int</code></td>\n    </tr>\n    <tr>\n      <td><code>is_long</code></td>\n      <td><code>is_int</code></td>\n    </tr>\n    <tr>\n      <td><code>is_real</code></td>\n      <td><code>is_float</code></td>\n    </tr>\n    <tr>\n      <td><code>is_writeable</code></td>\n      <td><code>is_writable</code></td>\n    </tr>\n    <tr>\n      <td><code>join</code></td>\n      <td><code>implode</code></td>\n    </tr>\n    <tr>\n      <td><code>key_exists</code></td>\n      <td><code>array_key_exists</code></td>\n    </tr>\n    <tr>\n      <td><code>magic_quotes_runtime</code></td>\n      <td><code>set_magic_quotes_runtime</code></td>\n    </tr>\n    <tr>\n      <td><code>pos</code></td>\n      <td><code>current</code></td>\n    </tr>\n    <tr>\n      <td><code>show_source</code></td>\n      <td><code>highlight_file</code></td>\n    </tr>\n    <tr>\n      <td><code>sizeof</code></td>\n      <td><code>count</code></td>\n    </tr>\n    <tr>\n      <td><code>strchr</code></td>\n      <td><code>strstr</code></td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$arr=array("apple", "pear","banana");\necho sizeof($arr);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$arr=array("apple", "pear","banana");\necho count($arr);\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	obsolete	0	HTML	1576224543141	1576224543184	1	php
902	Unused local variables should be removed	S1481	S1481	php	<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction numberOfMinutes($hours) {\n  $seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction numberOfMinutes($hours) {\n  return hours * 60;\n}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	unused	0	HTML	1576224543231	1576224543233	1	php
903	Code should not be dynamically injected and executed	S1523	S1523	php	<p>The <code>eval</code> function is a way to run arbitrary code at run-time. </p>\n<p>According to the PHP documentation</p>\n<blockquote>\n  <p>The eval() language construct is very dangerous because it allows execution of arbitrary PHP code. Its use thus is discouraged. If you have\n  carefully verified that there is no other option than to use this construct, pay special attention not to pass any user provided data into it\n  without properly validating it beforehand.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\neval($code_to_be_dynamically_executed)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/95.html">MITRE CWE-95</a> - CWE-95: Improper Neutralization of Directives in Dynamically\n  Evaluated Code ('Eval Injection') </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting\n  (XSS) </li>\n</ul>	3	\N	READY	php	CONSTANT_ISSUE	\N	30min	\N	cwe,owasp-a3	0	HTML	1576224543236	1576224543238	3	php
904	The "var" keyword should not be used	S1765	S1765	php	<p>The PHP 4 method of declaring a variable, using the <code>var</code> keyword, was deprecated in early versions of PHP 5. Even though it's not\nconsidered deprecated in the most recent versions, it's nonetheless not best practice to use it. When <code>var</code> does appear, it is interpreted\nas a synonym for <code>public</code> and treated as such. Therefore <code>public</code> should be used instead.</p>\n<p>From the PHP Manual:</p>\n<blockquote>\n  <p>The PHP 4 method of declaring a variable with the var keyword is still supported for compatibility reasons (as a synonym for the public keyword).\n  In PHP 5 before 5.1.3, its usage would generate an E_STRICT warning.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php\nclass Foo\n{\n    var $bar = 1;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\nclass Foo\n{\n    public $bar = 1;\n}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	convention,psr2	0	HTML	1576224543242	1576224543244	1	php
968	Track uses of "TODO" tags	S1135	S1135	php	<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething() {\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>	0	\N	READY	php	\N	\N	\N	\N	cwe	0	HTML	1576224544456	1576224544456	1	php
969	Try-with-resources should be used	S2093	\N	squid	<p>Java 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer\nto bullet-proof, it should be preferred over the older <code>try</code>/<code>catch</code>/<code>finally</code> version.</p>\n<p>This rule checks that <code>close</code>-able resources are opened in a try-with-resources statement.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFileReader fr = null;\nBufferedReader br = null;\ntry {\n  fr = new FileReader(fileName);\n  br = new BufferedReader(fr);\n  return br.readLine();\n} catch (...) {\n} finally {\n  if (br != null) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n  if (fr != null ) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (\n    FileReader fr = new FileReader(fileName);\n    BufferedReader br = new BufferedReader(fr)\n  ) {\n  return br.readLine();\n}\ncatch (...) {}\n</pre>\n<p>or</p>\n<pre>\ntry (BufferedReader br =\n        new BufferedReader(new FileReader(fileName))) { // no need to name intermediate resources if you don't want to\n  return br.readLine();\n}\ncatch (...) {}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/MACfBg">CERT, ERR54-J.</a> - Use a try-with-resources statement to safely handle\n  closeable resources </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert,java8,pitfall	0	HTML	1576224544465	1576224544512	1	java
970	Cookies should be "secure"	S2092	\N	squid	<p>The "secure" attribute prevents cookies from being sent over plaintext connections such as HTTP, where they would be easily eavesdropped upon.\nInstead, cookies with the secure attribute are only sent over encrypted HTTPS connections.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCookie c = new Cookie(SECRET, secret);  // Noncompliant; cookie is not secure\nresponse.addCookie(c);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCookie c = new Cookie(SECRET, secret);\nc.setSecure(true);\nresponse.addCookie(c);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/614">MITRE, CWE-614</a> - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management">OWASP Top Ten 2013 Category A2</a> -\n  Broken Authentication and Session Management </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cwe,owasp-a2,owasp-a6	0	HTML	1576224544557	1576224544604	3	java
971	Return values should not be ignored when they contain the operation status code	S899	\N	squid	<p>When the return value of a function call contain the operation status code, this value should be tested to make sure the operation completed\nsuccessfully.</p>\n<p>This rule raises an issue when the return values of the following are ignored:</p>\n<ul>\n  <li> <code>java.io.File</code> operations that return a status code (except <code>mkdirs</code>) </li>\n  <li> <code>Iterator.hasNext()</code> </li>\n  <li> <code>Enumeration.hasMoreElements()</code> </li>\n  <li> <code>Lock.tryLock()</code> </li>\n  <li> non-void <code>Condition.await*</code> methods </li>\n  <li> <code>CountDownLatch.await(long, TimeUnit)</code> </li>\n  <li> <code>Semaphore.tryAcquire</code> </li>\n  <li> <code>BlockingQueue</code>: <code>offer</code>, <code>remove</code>, <code>drainTo</code>, </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  file.delete();  // Noncompliant\n  // ...\n  lock.tryLock(); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  if (!lock.tryLock()) {\n    // lock failed; take appropriate action\n  }\n  if (!file.delete()) {\n    // file delete failed; take appropriate action\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 16.10 - If a function returns error information, then that error information shall be tested </li>\n  <li> MISRA C++:2008, 0-1-7 - The value returned by a function having a non-void return type that is not an overloaded operator shall always be used.\n  </li>\n  <li> MISRA C:2012, Dir. 4.7 - If a function returns error information, then that error information shall be tested </li>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/w4C4Ag">CERT, ERR33-C.</a> - Detect and handle standard library errors </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/iIBfBw">CERT, POS54-C.</a> - Detect and handle POSIX library errors </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/eoAyAQ">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/toHWAw">CERT, FIO02-J.</a> - Detect and handle file-related errors </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/754">MITRE, CWE-754</a> - Improper Check for Unusual Exceptional Conditions </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert,cwe,error-handling,misra	0	HTML	1576224544650	1576224544698	3	java
972	Resources should be closed	S2095	\N	squid	<p>Connections, streams, files, and other classes that implement the <code>Closeable</code> interface or its super-interface,\n<code>AutoCloseable</code>, needs to be closed after use. Further, that <code>close</code> call must be made in a <code>finally</code> block otherwise\nan exception could keep the call from being made. Preferably, when class implements <code>AutoCloseable</code>, resource should be created using\n"try-with-resources" pattern and will be closed automatically.</p>\n<p>Failure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box it's on to\ntheir knees.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void readTheFile() throws IOException {\n  Path path = Paths.get(this.fileName);\n  BufferedReader reader = Files.newBufferedReader(path, this.charset);\n  // ...\n  reader.close();  // Noncompliant\n  // ...\n  Files.lines("input.txt").forEach(System.out::println); // Noncompliant: The stream needs to be closed\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    for (String property : propertyList) {\n      stream = new FileOutputStream("myfile.txt");  // Noncompliant\n      // ...\n    }\n  } catch (Exception e) {\n    // ...\n  } finally {\n    stream.close();  // Multiple streams were opened. Only the last is closed.\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void readTheFile(String fileName) throws IOException {\n    Path path = Paths.get(fileName);\n    try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {\n      reader.readLine();\n      // ...\n    }\n    // ..\n    try (Stream&lt;String&gt; input = Files.lines("input.txt"))  {\n      input.forEach(System.out::println);\n    }\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try {\n    stream = new FileOutputStream("myfile.txt");\n    for (String property : propertyList) {\n      // ...\n    }\n  } catch (Exception e) {\n    // ...\n  } finally {\n    stream.close();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Java 7 introduced the try-with-resources statement, which implicitly closes <code>Closeables</code>. All resources opened in a try-with-resources\nstatement are ignored by this rule. </p>\n<pre>\ntry (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n  //...\n}\ncatch ( ... ) {\n  //...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gFqAQ">CERT, FIO04-J.</a> - Release resources when they are no longer needed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/GAGQBw">CERT, FIO42-C.</a> - Close files when they are no longer needed </li>\n  <li> <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html">Try With Resources</a> </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,denial-of-service,leak	0	HTML	1576224544742	1576224544788	2	java
793	Utility classes should not have public constructors	S1118	\N	csharpsquid	<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even <code>abstract</code> utility\nclasses, which can be extended, should not have <code>public</code> constructors.</p>\n<p>C# adds an implicit public constructor to every class which does not explicitly define at least one constructor. Hence, at least one\n<code>protected</code> constructor should be defined if you wish to subclass this utility class. Or the <code>static</code> keyword should be added to\nthe class declaration to prevent subclassing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class StringUtils // Noncompliant\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static class StringUtils\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic class StringUtils\n{\n  protected StringUtils()\n  {\n  }\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this\nrule.</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	design	0	HTML	1576224540073	1576224540116	1	csharp
794	"GetHashCode" should not reference mutable fields	S2328	\N	csharpsquid	<p><code>GetHashCode</code> is used to file an object in a <code>Dictionary</code> or <code>Hashtable</code>. If <code>GetHashCode</code> uses\nnon-<code>readonly</code> fields and those fields change after the object is stored, the object immediately becomes mis-filed in the\n<code>Hashtable</code>. Any subsequent test to see if the object is in the <code>Hashtable</code> will return a false negative.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person\n{\n  public int age;\n  public string name;\n\n  public override int GetHashCode()\n  {\n    int hash = 12;\n    hash += this.age.GetHashCode(); // Noncompliant\n    hash += this.name.GetHashCode(); // Noncompliant\n    return hash;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person\n{\n  public readonly DateTime birthday;\n  public string name;\n\n  public override int GetHashCode()\n  {\n    int hash = 12;\n    hash += this.birthday.GetHashCode();\n    return hash;\n  }\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224540160	1576224540161	2	csharp
849	Functions should not have too many lines	S138	S138	php	<p>A function that grows too large tends to aggregate too many responsibilities.</p>\n<p>Such functions inevitably become harder to understand and therefore harder to maintain. </p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>\n<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>	2	\N	READY	php	CONSTANT_ISSUE	\N	20min	\N	brain-overload	0	HTML	1576224541863	1576224541865	1	php
850	Deprecated predefined variables should not be used	S1600	S1600	php	<p>The following predefined variables are deprecated and should be replaced by the new versions:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Replace</th>\n      <th>With</th>\n    </tr>\n    <tr>\n      <td>$HTTP_SERVER_VARS</td>\n      <td>$_SERVER</td>\n    </tr>\n    <tr>\n      <td>$HTTP_GET_VARS</td>\n      <td>$_GET</td>\n    </tr>\n    <tr>\n      <td>$HTTP_POST_VARS</td>\n      <td>$_POST</td>\n    </tr>\n    <tr>\n      <td>$HTTP_POST_FILES</td>\n      <td>$_FILES</td>\n    </tr>\n    <tr>\n      <td>$HTTP_SESSION_VARS</td>\n      <td>$_SESSION</td>\n    </tr>\n    <tr>\n      <td>$HTTP_ENV_VARS</td>\n      <td>$_ENV</td>\n    </tr>\n    <tr>\n      <td>$HTTP_COOKIE_VARS</td>\n      <td>$_COOKIE</td>\n    </tr>\n    <tr>\n      <td>$php_errormsg</td>\n      <td>error_get_last()</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\necho 'Name parameter value: ' . $HTTP_GET_VARS["name"];\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\necho 'Name parameter value: ' . $_GET["name"];\n</pre>	2	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	pitfall	0	HTML	1576224541868	1576224541911	1	php
851	Classes should not have too many methods	S1448	S1448	php	<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>	2	\N	READY	php	CONSTANT_ISSUE	\N	1h	\N	brain-overload	0	HTML	1576224541957	1576224541958	1	php
852	PHP 4 constructor declarations should not be used	S1603	S1603	php	<p>In PHP 4, any function with the same name as the nesting class was considered a class constructor. In PHP 5, this mechanism has been deprecated and\nthe "__construct" method name should be used instead. If both styles are present in the same class, PHP 5 will treat the function named "__construct"\nas the class constructor. </p>\n<p>This rule rule raises an issue for each method with the same name as the enclosing class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  function Foo(){...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n  function __construct(){...}\n}\n</pre>	2	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	pitfall	0	HTML	1576224541963	1576224541964	1	php
853	"__construct" functions should not make PHP 4-style calls to parent constructors	S1605	S1605	php	<p>In PHP 5 both the way to declare a constructor and the way to make a call to a parent constructor have evolved. When declaring constructors with\nthe PHP5 <code>__construct</code> name, nested calls to parent constructors should also use the new <code>__constructor</code> name.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo extends Bar {\n  function __construct() {\n    parent::Bar();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo extends Bar {\n  function __construct() {\n    parent::__construct();\n  }\n}\n</pre>	2	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224541966	1576224541967	1	php
905	More than one property should not be declared per statement	S1766	S1766	php	<p>For better readability, do not put multiple property declarations in the same statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php\nclass Foo\n{\n   private $bar = 1, $bar2 = 2;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\nclass Foo\n{\n   private $bar1 = 1;\n   private $bar2 = 2;\n}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	convention,psr2	0	HTML	1576224543247	1576224543250	1	php
906	Function names should comply with a naming convention	S100	S100	php	<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression: <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nfunction DoSomething(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(){...}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods with an <code>@inheritdoc</code> annotation, as well as magic methods (<code>__construct()</code>, <code>__destruct()</code>,\n<code>__call()</code>, <code>__callStatic()</code>, <code>__get()</code>, <code>__set()</code>, <code>__isset()</code>, <code>__unset()</code>,\n<code>__sleep()</code>, <code>__wakeup()</code>, <code>__toString()</code>, <code>__invoke()</code>, <code>__set_state()</code>,\n<code>__clone()</code>, <code>__debugInfo()</code>) are ignored.</p>\n<pre>\nfunction __construct(){...}\nfunction __destruct(){...}\n\n/**\n * {@inheritdoc}\n */\nfunction myFunc(){...}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224543253	1576224543256	1	php
907	Class names should comply with a naming convention	S101	S101	php	<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224543269	1576224543270	1	php
908	Modifiers should be declared in the correct order	S1124	S1124	php	<p>The PSR2 standard recommends listing modifiers in the following order to improve the readability of PHP source code:</p>\n<ol>\n  <li> final or abstract </li>\n  <li> public or protected or private </li>\n  <li> static </li>\n</ol>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic protected $foo;\n...\npublic static final function bar(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprotected static $foo;\n...\nfinal public static function bar(){...}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	convention,psr2	0	HTML	1576224543274	1576224543275	1	php
909	Boolean literals should not be redundant	S1125	S1125	php	<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($booleanVariable == true) { /* ... */ }\nif ($booleanVariable != true) { /* ... */ }\nif ($booleanVariable || false) { /* ... */ }\ndoSomething(!false);\n\n$booleanVariable = condition ? true : exp;\n$booleanVariable = condition ? false : exp;\n$booleanVariable = condition ?  exp : true;\n$booleanVariable = condition ?  exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ($booleanVariable) { /* ... */ }\nif (!$booleanVariable) { /* ... */ }\nif ($booleanVariable) { /* ... */ }\ndoSomething(true);\n\n$booleanVariable = condition || exp;\n$booleanVariable = !condition &amp;&amp; exp;\n$booleanVariable = !condition ||  exp;\n$booleanVariable = condition &amp;&amp; exp;\n</pre>\n<h2>Exceptions</h2>\n<p>The use of literal booleans in comparisons which use identity operators (<code>===</code> and <code>!==</code>) are ignored.</p>	1	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224543276	1576224543277	1	php
973	Classes should not be empty	S2094	\N	squid	<p>There is no good excuse for an empty class. If it's being used simply as a common extension point, it should be replaced with an\n<code>interface</code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Nothing {  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Nothing {\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Empty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.</p>\n<pre>\n@Configuration\n@EnableWebMvc\npublic final class ApplicationConfiguration {\n\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224544837	1576224544839	1	java
974	"equals(Object obj)" should test argument type	S2097	\N	squid	<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method\nshould not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224544842	1576224544844	2	java
975	"main" should not "throw" anything	S2096	\N	squid	<p>There's no reason for a <code>main</code> method to <code>throw</code> anything. After all, what's going to catch it? </p>\n<p>Instead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and\nperform whatever logging or user communication is necessary, and <code>exit</code> with a non-zero (i.e. non-success) exit code if necessary.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String args[]) throws Exception { // Noncompliant\n  doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String args[]) {\n try {\n    doSomething();\n  } catch (Throwable t) {\n    log.error(t);\n    System.exit(1);  // Default exit code, 0, indicates success. Non-zero value means failure.\n  }\n}\n</pre>	4	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	error-handling	0	HTML	1576224544847	1576224544849	1	java
976	Packages containing only "package-info.java" should be removed	S4032	\N	squid	<p>There is no reason to have a package that is empty except for "package-info.java". Such packages merely clutter a project, taking up space but\nadding no value. </p>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	unused	0	HTML	1576224544852	1576224544854	1	java
795	Multiline blocks should be enclosed in curly braces	S2681	\N	csharpsquid	<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  FirstActionInBlock();\n  SecondAction();  // Noncompliant; executed unconditionally\nThirdAction();\n\nif(condition) FirstActionInBlock(); SecondAction();  // Noncompliant; secondAction executed unconditionally\n\nif(condition) FirstActionInBlock();  // Noncompliant\n  SecondAction();  // Executed unconditionally\n\nstring str = null;\nfor (int i = 0; i &lt; array.Length; i++)\n  str = array[i];\n  DoTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition)\n{\n  FirstActionInBlock();\n  SecondAction();\n}\nThirdAction();\n\nstring str = null;\nfor (int i = 0; i &lt; array.Length; i++)\n{\n  str = array[i];\n  DoTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert,cwe	0	HTML	1576224540162	1576224540207	2	csharp
796	Operator overloads should have named alternatives	S4069	\N	csharpsquid	<p>Operator overloading is convenient but unfortunately not portable across languages. To be able to access the same functionality from another\nlanguage you need to provide an alternate named method following the convention:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operator</th>\n      <th>Method Name</th>\n    </tr>\n    <tr>\n      <th><code>+</code> (binary)</th>\n      <th>Add</th>\n    </tr>\n    <tr>\n      <th><code>&amp;</code></th>\n      <th>BitwiseAnd</th>\n    </tr>\n    <tr>\n      <th><code>|</code></th>\n      <th>BitwiseOr</th>\n    </tr>\n    <tr>\n      <th><code>/</code></th>\n      <th>Divide</th>\n    </tr>\n    <tr>\n      <th><code>==</code></th>\n      <th>Equals</th>\n    </tr>\n    <tr>\n      <th><code>^</code></th>\n      <th>Xor</th>\n    </tr>\n    <tr>\n      <th><code>&gt;</code></th>\n      <th>Compare</th>\n    </tr>\n    <tr>\n      <th><code>&gt;=</code></th>\n      <th>Compare</th>\n    </tr>\n    <tr>\n      <th><code>!=</code></th>\n      <th>Equals</th>\n    </tr>\n    <tr>\n      <th><code>&lt;</code></th>\n      <th>Compare</th>\n    </tr>\n    <tr>\n      <th><code>&lt;=</code></th>\n      <th>Compare</th>\n    </tr>\n    <tr>\n      <th><code>!</code></th>\n      <th>LogicalNot</th>\n    </tr>\n    <tr>\n      <th><code>%</code></th>\n      <th>Mod</th>\n    </tr>\n    <tr>\n      <th><code>*</code> (binary)</th>\n      <th>Multiply</th>\n    </tr>\n    <tr>\n      <th><code>~</code></th>\n      <th>OnesComplement</th>\n    </tr>\n    <tr>\n      <th><code>-</code> (binary)</th>\n      <th>Subtract</th>\n    </tr>\n    <tr>\n      <th><code>-</code> (unary)</th>\n      <th>Negate</th>\n    </tr>\n    <tr>\n      <th><code>+</code> (unary)</th>\n      <th>Plus</th>\n    </tr>\n  </tbody>\n</table>\n<p>This rule raises an exception when there is an operator overload without the expected named alternative method.</p>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224540252	1576224540296	1	csharp
854	Objects should not be created to be dropped immediately without being used	S1848	S1848	php	<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could\nlead to an unexpected behavior in production.</p>\n<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate, static method and\ncalled directly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($x &lt; 0) {\n  new foo;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$var = NULL;\nif ($x &lt; 0) {\n  $var = new foo;\n}\n</pre>	2	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224541969	1576224541970	2	php
855	"global" should not be used	S2011	S2011	php	<p>Global variables are a useful construct, but they should not be abused. Functions can access the global scope either through the\n<code>global</code> keyword or though the <code>$GLOBALS</code> array, but these practices considerably reduce the function's readability and\nreusability. Instead, the global variable should be passed as a parameter to the function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$myGlobalVariable;\n\nfunction foo()\n{\n  global $myGlobalVariable; // Noncompliant\n  $GLOBALS['myGlobalVariable']; // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo($myStateVariable)\n{\n  // ...\n}\n</pre>	3	\N	READY	php	CONSTANT_ISSUE	\N	30min	\N	convention	0	HTML	1576224541971	1576224541972	1	php
856	"&&" and "||" should be used	S2010	S2010	php	<p>PHP has two sets of logical operators: <code>&amp;&amp;</code> / <code>||</code>, and <code>and</code> / <code>or</code>. The difference between\nthe sets is precedence. Because <code>and</code> / <code>or</code> have a lower precedence than almost any other operator, using them instead of\n<code>&amp;&amp;</code> / <code>||</code> may not have the result you expect.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$have_time = true;\n$have_money = false;\n$take_vacation = $have_time and $have_money;  // Noncompliant. $take_vacation == true.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$have_time = true;\n$have_money = false;\n$take_vacation = $have_time &amp;&amp; $have_money;  // $take_vacation == false.\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224541974	1576224541976	1	php
910	Local variables should not be declared and then immediately returned or thrown	S1488	S1488	php	<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction computeDurationInMilliseconds() {\n  $duration = ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000 ;\n  return $duration;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction computeDurationInMilliseconds() {\n  return ((($hours * 60) + $minutes) * 60 + $seconds ) * 1000;\n}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	clumsy	0	HTML	1576224543278	1576224543279	1	php
911	Jump statements should not be followed by other statements	S1763	S1763	php	<p>Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, and <code>goto</code>) and <code>throw</code> expressions move\ncontrol flow out of the current code block. Typically, any statements in a block that come after a jump or <code>throw</code> are simply wasted\nkeystrokes lying in wait to confuse the unwary. </p>\n<p>Rarely, as illustrated below, code after a jump or <code>throw</code> is reachable. However, such code is difficult to understand, and should be\nrefactored. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction fun($a) {\n  $i = 10;\n  return $i + $a;\n  $i++;             // this is never executed\n}\n\nfunction foo($a) {\n  if ($a == 5) {\n    goto error;\n  } else {\n    // do the job\n  }\n  return;\n\n  error:\n    printf("don't use 5"); // this is reachable but unreadable\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction fun($a) {\n  $i = 10;\n  return $i + $a;\n}\n\nfunction foo($a) {\n  if ($a == 5) {\n    handleError();\n  } else {\n    // do the job\n  }\n  return;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>\n  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>\n  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/561.html">MITRE, CWE-561</a> - Dead Code </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/OYIyAQ">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,misra,unused	0	HTML	1576224543280	1576224543323	2	php
912	Return of boolean expressions should not be wrapped into an "if-then-else" statement	S1126	S1126	php	<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	clumsy	0	HTML	1576224543368	1576224543369	1	php
977	"getClass" should not be used for synchronization	S3067	\N	squid	<p><code>getClass</code> should not be used for synchronization in non-<code>final</code> classes because child classes will synchronize on a\ndifferent object than the parent or each other, allowing multiple threads into the code block at once, despite the <code>synchronized</code>\nkeyword.</p>\n<p>Instead, hard code the name of the class on which to synchronize or make the class <code>final</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  public void doSomethingSynchronized(){\n    synchronized (this.getClass()) {  // Noncompliant\n      // ...\n    }\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public void doSomethingSynchronized(){\n    synchronized (MyClass.class) {\n      // ...\n    }\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/bwCaAg">CERT, LCK02-J.</a> - Do not synchronize on the class object returned by\n  getClass() </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,multi-threading	0	HTML	1576224544856	1576224544858	2	java
978	"enum" fields should not be publicly mutable	S3066	\N	squid	<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is\nnot only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the\nconstructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	bad-practice	0	HTML	1576224547866	1576224547868	3	java
979	"Stream" call chains should be simplified when possible	S4034	\N	squid	<p>The Stream API provides the <code>boolean anyMatch(Predicate&lt;? super T&gt; predicate)</code> method, which is a very convenient and efficient\nway to check whether any elements of a stream match the provided predicate.</p>\n<p>This rule raises an issue when a <code>Stream</code> chain could be replaced by this method call. Specifically:</p>\n<ul>\n  <li> <code>filter(Predicate&lt;? super T&gt; predicate).findFirst().isPresent()</code> </li>\n  <li> <code>filter(Predicate&lt;? super T&gt; predicate).findAny().isPresent()</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean hasRed = widgets.stream().filter(w -&gt; w.getColor() == RED).findFirst().isPresent(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean hasRed = widgets.stream().anyMatch(w -&gt; w.getColor() == RED);\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	clumsy	0	HTML	1576224547871	1576224547873	1	java
797	Return values from functions without side effects should not be ignored	S2201	\N	csharpsquid	<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected.</p>\n<p>This rule raises an issue when the results of the following methods are ignored:</p>\n<ul>\n  <li> LINQ method, </li>\n  <li> <code>[Pure]</code> method, </li>\n  <li> any method on <code>string</code>, <code>int</code>, ..., <code>System.Collections.Immutable.ImmutableArray&lt;T&gt;</code>,\n  <code>ImmutableHashSet&lt;T&gt;</code>, ... </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncoll.Where(i =&gt; i &gt; 5).Select(i =&gt; i*i); // Noncompliant\n"this string".Equals("other string"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar res = coll.Where(i =&gt; i &gt; 5).Select(i =&gt; i*i);\nvar isEqual = "this string".Equals("other string");\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't report issues on method calls with <code>out</code> or <code>ref</code> arguments.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/eoAyAQ">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	cert,misra	0	HTML	1576224540341	1576224540384	2	csharp
798	Empty "default" clauses should be removed	S3532	\N	csharpsquid	<p>The <code>default</code> clause should take appropriate action. Having an empty <code>default</code> is a waste of keystrokes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nenum Fruit\n{\n  Apple,\n  Orange,\n  Banana\n}\n\nvoid PrintName(Fruit fruit)\n{\n  switch(fruit)\n  {\n    case Fruit.Apple:\n      Console.WriteLine("apple");\n      break;\n    default:  //Noncompliant\n      break;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nenum Fruit\n{\n  Apple,\n  Orange,\n  Banana\n}\n\nvoid PrintName(Fruit fruit)\n{\n  switch(fruit)\n  {\n    case Fruit.Apple:\n      Console.WriteLine("apple");\n      break;\n    default:\n      throw new NotSupportedException();\n  }\n}\n</pre>\n<p>or</p>\n<pre>\nvoid PrintName(Fruit fruit)\n{\n  switch(fruit)\n  {\n    case Fruit.Apple:\n      Console.WriteLine("apple");\n      break;\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	1min	\N	clumsy,finding,unused	0	HTML	1576224540433	1576224540435	1	csharp
857	Classes should not be coupled to too many other classes (Single Responsibility Principle)	S1200	S1200	php	<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book "Principles of Object Oriented Design", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  class Foo {            // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n    /**\n     * @var T1\n     */\n    public $a1;          // Foo is coupled to T1\n    /**\n     * @var T2\n     */\n    protected $a2;       // Foo is coupled to T2\n    /**\n     * @var T3\n     */\n    private $a3;         // Foo is coupled to T3\n\n    /**\n     * @param T5\n     * @param T6\n     *\n     * @return T4\n     */\n    public function compute(T5 $a, $b) { // Foo is coupled to T4, T5 and T6\n      $result = new T7();     // Foo is coupled to T7\n      return $result;\n  }\n}\n</pre>	2	\N	READY	php	CONSTANT_ISSUE	\N	2h	\N	brain-overload	0	HTML	1576224541978	1576224542020	1	php
858	"$this" should not be used in a static context	S2014	S2014	php	<p><code>$this</code> refers to the current class instance. But static methods can be accessed without instantiating the class, and <code>$this</code>\nis not available to them. Using <code>$this</code> in a static context will result in a fatal error at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Clazz {\n  $name=NULL;  // instance variable\n\n  public static function foo(){\n    if ($this-&gt;name != NULL) {\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Clazz {\n  $name=NULL;  // instance variable\n\n  public static function foo($nameParam){\n    if ($nameParam != NULL) {\n      // ...\n    }\n  }\n}\n</pre>	4	\N	READY	php	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224542069	1576224542069	2	php
859	Switch cases should end with an unconditional "break" statement	S128	S128	php	<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch ($myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    do_something();\n  default:\n    do_something_else();\n   break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch ($myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    do_something();\n    break;\n  default:\n    do_something_else();\n   break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed in following cases:</p>\n<pre>\nswitch ($myVariable) {\n  case 0:                  // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    do_something();\n    break;\n  case 2:                  // Use of continue statement\n    continue;\n  case 3:                  // Case includes a jump statement (exit, return, break &amp;etc)\n    exit(0);\n  case 4:\n    echo 'Second case, which falls through';\n    // no break        &lt;- comment is used when fall-through is intentional in a non-empty case body\n  default:                 // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/YIFLAQ">CERT, MSC17-C.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZoFLAQ">CERT, MSC18-CPP.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/ewHAAQ">CERT, MSC52-J.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n</ul>	4	\N	READY	php	CONSTANT_ISSUE	\N	10min	\N	cert,cwe,misra,suspicious	0	HTML	1576224542070	1576224542115	1	php
913	Identical expressions should not be used on both sides of a binary operator	S1764	S1764	php	<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( $a == $a ) { // always true\n  doZ();\n}\nif ( $a != $a ) { // always false\n  doY();\n}\nif ( $a == $b &amp;&amp; $a == $b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( $a == $b || $a == $b ) { // if the first one is true, the second one is too\n  doW();\n}\n\n$j = 5 / 5; //always 1\n$k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>Left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\n$i = 1 &lt;&lt; 1; // Compliant\n$j = $a &lt;&lt; $a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> {rule:php:S1656} - Implements a check on <code>=</code>. </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	cert	0	HTML	1576224543371	1576224543416	2	php
914	String literals should not be duplicated	S1192	S1192	php	<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nfunction run() {\n  prepare('action1');                              // Non-Compliant - 'action1' is duplicated 3 times\n  execute('action1');\n  release('action1');\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nACTION_1 = 'action1';\n\nfunction run() {\n  prepare(ACTION_1);\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>	3	\N	READY	php	LINEAR_OFFSET	2min	2min	per duplicate instance	design	0	HTML	1576224543460	1576224543461	1	php
915	Classes should not have too many lines	S2042	S2042	php	<p>A class that grows too much tends to aggregate too many responsibilities, and inevitably becomes harder to understand and to maintain. Above a\nspecific threshold, it is strongly advised to refactor the class into smaller ones which focus on well-defined topics.</p>	2	\N	READY	php	CONSTANT_ISSUE	\N	1h	\N	brain-overload	0	HTML	1576224543465	1576224543465	1	php
916	Parentheses should not be used for calls to "echo"	S2041	S2041	php	<p><code>echo</code> can be called with or without parentheses, but it is best practice to leave parentheses off the call because using parentheses\nwith multiple arguments will result in a parse error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\necho("Hello");  // Noncompliant, but it works\necho("Hello", "World"); // Noncompliant. Parse error\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\necho "Hello";\necho "Hello","World!";\n</pre>	3	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	pitfall	0	HTML	1576224543467	1576224543467	1	php
980	Modifiers should be declared in the correct order	ModifiersOrderCheck	S1124	squid	<p>The Java Language Specification recommends listing modifiers in the following order:</p>\n<p>1. Annotations</p>\n<p>2. public</p>\n<p>3. protected</p>\n<p>4. private</p>\n<p>5. abstract</p>\n<p>6. static</p>\n<p>7. final</p>\n<p>8. transient</p>\n<p>9. volatile</p>\n<p>10. synchronized</p>\n<p>11. native</p>\n<p>12. strictfp</p>\n<p>Not following this convention has no technical impact, but will reduce the code's readability because most developers are used to the standard\norder.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic public void main(String[] args) {   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {   // Compliant\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224547877	1576224547879	1	java
981	Equality operators should not be used in "for" loop termination conditions	S888	\N	squid	<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an\ninfinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an\ninfinite loop.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i += 2)  // Compliant\n{\n  //...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>\n<ul>\n  <li> starts below the ending value and is incremented by 1 on each iteration. </li>\n  <li> starts above the ending value and is decremented by 1 on each iteration. </li>\n</ul>\n<p>Equality operators are also ignored when the test is against <code>null</code>.</p>\n<pre>\nfor (int i = 0; arr[i] != null; i++) {\n  // ...\n}\n\nfor (int i = 0; (item = arr[i]) != null; i++) {\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 6-5-2 </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/835">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/EwDJAQ">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/GwDJAQ">CERT, MSC21-CPP.</a> - Use inequality to terminate a loop whose counter changes\n  by more than one </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	cert,cwe,misra,suspicious	0	HTML	1576224547883	1576224547929	1	java
982	Duplicate values should not be passed as arguments	S4142	\N	squid	<p>There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was\nintended for one of the arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (compare(myPoint.x, myPoint.x) != 0) { // Noncompliant\n&nbsp;&nbsp;//...\n}\n\nif (compare(getNextValue(), getNextValue()) != 0) { // Noncompliant\n&nbsp;&nbsp;// ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (compare(myPoint.x, myPoint.y) != 0) {\n&nbsp;&nbsp;//...\n}\n\nObject v1 = getNextValue();\nObject v2 = getNextValue();\nif (compare(v1, v2) != 0) {\n&nbsp;&nbsp;// ...\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224547974	1576224547977	1	java
799	"NaN" should not be used in comparisons	S2688	\N	csharpsquid	<p><code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results,\nbut probably not the ones you want. </p>\n<p>Instead, the best way to see whether a variable is equal to <code>NaN</code> is to use <code>Number.isNaN()</code>, since ES2015, or (perhaps\ncounter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = double.NaN;\n\nif (a == double.NaN) // Noncompliant; always false\n{\n  Console.WriteLine("a is not a number");  // this is dead code\n}\nif (a != double.NaN)  // Noncompliant; always true\n{\n  Console.WriteLine("a is not NaN"); // this statement is not necessarily true\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (double.IsNaN(a))\n{\n  console.log("a is not a number");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/7AEqAQ">CERT, NUM07-J.</a> - Do not attempt comparisons with NaN </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert	0	HTML	1576224540437	1576224540439	2	csharp
800	Methods and properties that don't access instance data should be static	S2325	\N	csharpsquid	<p>Class methods and properties that don't access instance data can be <code>static</code> to prevent any misunderstanding about the contract of the\nmethod. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Utilities\n{\n  public int MagicNum // Noncompliant\n  {\n    get\n    {\n      return 42;\n    }\n  }\n\n  private static string magicWord = "please";\n  public string MagicWord  // Noncompliant\n  {\n    get\n    {\n      return magicWord;\n    }\n    set\n    {\n      magicWord = value;\n    }\n  }\n\n  public int Sum(int a, int b)  // Noncompliant\n  {\n    return a + b;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Utilities\n{\n  public static int MagicNum\n  {\n    get\n    {\n      return 42;\n    }\n  }\n\n  private static string magicWord = "please";\n  public static string MagicWord\n  {\n    get\n    {\n      return magicWord;\n    }\n    set\n    {\n      magicWord = value;\n    }\n  }\n\n  public static int Sum(int a, int b)\n  {\n    return a + b;\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224540441	1576224540442	1	csharp
801	Value types should implement "IEquatable<T>"	S3898	\N	csharpsquid	<p>If you're using a <code>struct</code>, it is likely because you're interested in performance. But by failing to implement\n<code>IEquatable&lt;T&gt;</code> you're loosing performance when comparisons are made because without <code>IEquatable&lt;T&gt;</code>, boxing and\nreflection are used to make comparisons. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstruct MyStruct  // Noncompliant\n{\n  private int i;\n  public int I\n  {\n    //...\n  }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	performance	0	HTML	1576224540445	1576224540446	1	csharp
860	"if ... else if" constructs should end with "else" clauses	S126	S126	php	<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>\nshould be followed by an <code>else</code> statement.</p>\n<p>The requirement for a final <code>else</code> statement is defensive programming.</p>\n<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  do_something();\n} else if (condition2) {\n  do_something_else();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  do_something();\n} else if (condition2) {\n  do_something_else();\n} else {\n  throw new InvalidArgumentException('message');\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC57-J.</a> - Strive for logical completeness </li>\n</ul>	3	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	cert,misra	0	HTML	1576224542160	1576224542203	1	php
861	"for" loop stop conditions should be invariant	S127	S127	php	<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>\n  <li> When the stop condition depend upon a method call </li>\n  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++) {\n  echo $i;\n  if(condition) {\n    $i = 20;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor ($i = 0; $i &lt; 10; $i++) {\n  echo $i;\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the\n  loop. </li>\n  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>. </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	10min	\N	misra,pitfall	0	HTML	1576224542248	1576224542292	1	php
917	"switch" statements should not have too many "case" clauses	S1479	S1479	php	<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>	2	\N	READY	php	CONSTANT_ISSUE	\N	30min	\N	brain-overload	0	HTML	1576224543468	1576224543468	1	php
918	Empty statements should be removed	S1116	S1116	php	<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething() {\n  ;                                              // Noncompliant - was used as a kind of TODO marker\n}\n\nfunction doSomethingElse($p) {\n  echo $p;;                                      // Noncompliant - double ;\n}\n\nfor ($i = 1; $i &lt;= 10; doSomething($i), $i++);   // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething() {}\n\nfunction doSomethingElse($p) {\n  echo $p;\n\n  for ($i = 1; $i &lt;= 10; $i++) {\n    doSomething($i);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. </li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/7gCTAw">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,\n  or while condition </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/i4FtAg">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,\n  or while statement </li>\n</ul>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	cert,misra,unused	0	HTML	1576224543470	1576224543511	1	php
919	Files should contain only one top-level class or interface each	S1996	S1996	php	<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This\nis doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or\ninterface per file.</p>	2	\N	READY	php	LINEAR	10min	\N	per extra "class" or "interface"	brain-overload	0	HTML	1576224543558	1576224543560	1	php
920	Local variables should not have the same name as class fields	S1117	S1117	php	<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public $myField;\n\n  public function doSomething() {\n    $myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/2ADEAw">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	cert,pitfall	0	HTML	1576224543564	1576224543566	1	php
921	Files should not contain inline HTML	S1997	S1997	php	<p>Shared coding conventions allow teams to collaborate efficiently. To avoid the confusion that can be caused by tangling two coding languages in the\nsame file, inline HTML should be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php\n$name = "George";\n?&gt;\n&lt;p&gt; Hello &lt;?php echo $name ?&gt;!&lt;/p&gt;\n</pre>\n<h2>Exceptions</h2>\n<p>File having the extension <code>.phtml</code> are ignored by this rule because they are expected to have mixed PHP and HTML.</p>	2	\N	READY	php	CONSTANT_ISSUE	\N	10min	\N	brain-overload,convention	0	HTML	1576224543569	1576224543572	1	php
922	"sleep" should not be called	S2964	S2964	php	<p><code>sleep</code> is sometimes used in a mistaken attempt to prevent Denial of Service (DoS) attacks by throttling response rate. But because it\nties up a thread, each request takes longer to serve that it otherwise would, making the application <em>more</em> vulnerable to DoS attacks, rather\nthan less.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (is_bad_ip($requester)) {\n  sleep(5);  // Noncompliant\n}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224543575	1576224543577	3	php
983	Fields should not be initialized to default values	S3052	\N	squid	<p>The compiler automatically initializes class fields to their default values before setting them with any initialization values, so there is no need\nto explicitly set a field to its default value. Further, under the logic that cleaner code is better code, it's considered poor style to do so.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  int count = 0;  // Noncompliant\n  // ...\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  int count;\n  // ...\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>final</code> fields are ignored.</p>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	convention,finding	0	HTML	1576224547981	1576224547983	1	java
984	Map values should not be replaced unconditionally	S4143	\N	squid	<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nletters.put("a", "Apple");\nletters.put("a", "Boy");  // Noncompliant\n\ntowns[i] = "London";\ntowns[i] = "Chicago";  // Noncompliant\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224547986	1576224547988	2	java
985	Methods should not have identical implementations	S4144	\N	squid	<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may\nbe confusing to maintainers. In the latter case, one implementation should invoke the other.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate final static String CODE = "bounteous";\n\npublic String calculateCode() {\n  doTheThing();\n  return CODE;\n}\n\npublic String getName() {  // Noncompliant\n  doTheThing();\n  return CODE;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate final static String CODE = "bounteous";\n\npublic String getCode() {\n  doTheThing();\n  return CODE;\n}\n\npublic String getName() {\n  return getCode();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods that are not accessors (getters and setters), with fewer than 2 statements are ignored.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	confusing,duplicate,suspicious	0	HTML	1576224547991	1576224547993	1	java
986	HTTP referers should not be relied on	S2089	\N	squid	<p>The fields in an HTTP request are putty in the hands of an attacker, and you cannot rely on them to tell you the truth about anything. While it may\nbe safe to store such values after they have been neutralized, decisions should never be made based on their contents.</p>\n<p>This rule flags uses of the referer header field.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  protected void doPost(HttpServletRequest request, HttpServletResponse response)\n        throws ServletException, IOException {\n    String referer = request.getHeader("referer");  // Noncompliant\n    if(isTrustedReferer(referer)){\n      //..\n    }\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/807">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/293">MITRE, CWE-293</a> - Using Referer Field for Authentication </li>\n  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management">OWASP Top Ten 2013 Category A2</a> -\n  Broken Authentication and Session Management </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cwe,owasp-a2,sans-top25-porous	0	HTML	1576224547995	1576224548044	3	java
802	Classes that provide "Equals(<T>)" should implement "IEquatable<T>"	S3897	\N	csharpsquid	<p>The <code>IEquatable&lt;T&gt;</code> interface has only one method in it: <code>Equals(&lt;T&gt;)</code>. If you've already written\n<code>Equals(T)</code>, there's no reason not to explicitly implement <code>IEquatable&lt;T&gt;</code>. Doing so expands the utility of your class by\nallowing it to be used where an <code>IEquatable</code> is called for.</p>\n<p><strong></strong>Note**: Classes that implement <code>IEquatable&lt;T&gt;</code> should also be <code>sealed</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass  // Noncompliant\n{\n  public override bool Equals(object other)\n  {\n    //...\n  }\n}\n</pre>\n<pre>\nclass MyClass  // Noncompliant\n{\n  public bool Equals(MyClass other)\n  {\n    //...\n  }\n}\n</pre>\n<pre>\nclass MyClass : IEquatable&lt;T&gt;  // Noncompliant\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nsealed class MyClass : IEquatable&lt;MyClass&gt;\n{\n  public override bool Equals(object other)\n  {\n    return Equals(other as MyClass);\n  }\n\n  public bool Equals(MyClass other)\n  {\n    //...\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	api-design	0	HTML	1576224540448	1576224540450	1	csharp
803	Cognitive Complexity of methods should not be too high	S3776	\N	csharpsquid	<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>\n</ul>	3	\N	READY	cs	\N	\N	\N	\N	brain-overload	0	HTML	1576224540452	1576224540452	1	csharp
804	Empty nullable value should not be accessed	S3655	\N	csharpsquid	<p>Nullable value types can hold either a value or <code>null</code>. The value held in the nullable type can be accessed with the <code>Value</code>\nproperty, but <code>.Value</code> throws an <code>InvalidOperationException</code> when the value is <code>null</code>. To avoid the exception, a\nnullable type should always be tested before <code>.Value</code> is accessed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint? nullable = null;\n...\nUseValue(nullable.Value); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint? nullable = null;\n...\nif (nullable.HasValue)\n{\n  UseValue(nullable.Value);\n}\n</pre>\n<p>or</p>\n<pre>\nint? nullable = null;\n...\nif (nullable != null)\n{\n  UseValue(nullable.Value);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	cwe	0	HTML	1576224540459	1576224540460	2	csharp
805	Inheritance list should not be redundant	S1939	\N	csharpsquid	<p>An inheritance list entry is redundant if:</p>\n<ul>\n  <li> It is <code>Object</code> - all classes extend <code>Object</code> implicitly. </li>\n  <li> It is <code>int</code> for an <code>enum</code> </li>\n  <li> It is a base class of another listed inheritance. </li>\n</ul>\n<p>Such redundant declarations should be removed because they needlessly clutter the code and can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass : Object  // Noncompliant\n\nenum MyEnum : int  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass\n\nenum MyEnum\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	1min	\N	clumsy	0	HTML	1576224540462	1576224540464	1	csharp
862	"switch case" clauses should not have too many lines	S1151	S1151	php	<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nswitch ($var) {\n  case 0:  // 6 lines till next case\n    methodCall1();\n    methodCall2();\n    methodCall3();\n    methodCall4();\n    break;\n  default:\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch ($var) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    break;\n}\n\nfunction doSomething(){\n  methodCall1("");\n  methodCall2("");\n  methodCall3("");\n  methodCall4("");\n}\n</pre>	2	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	brain-overload	0	HTML	1576224542338	1576224542340	1	php
863	Sections of code should not be "commented out"	S125	S125	php	<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be "commented out". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out" </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	misra,unused	0	HTML	1576224542348	1576224542350	1	php
864	Configuration should not be changed dynamically	S2918	S2918	php	<p><code>ini_set</code> changes the value of the given configuration option for the duration of the script's execution. While there may be a reason to\ndo this, you should make sure that it's a very good reason indeed, because this is the sort of "magic" change which can cause severe teeth-gnashing\nand hair tearing when the script needs to be debugged. </p>\n<p>For instance, if the user explicitly turns logging on for a script, but then the script itself uses <code>ini_set('display_errors', 0);</code> to\nturn logging back off, it is likely that every other aspect of the environment will be examined before, in desperation, the script is read to figure\nout where the logging is going.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nini_set('display_errors', 0);  // Noncompliant\n</pre>	2	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224542353	1576224542356	1	php
923	References should not be passed to function calls	S1998	S1998	php	<p>Passing a reference to a function parameter means that any modifications the method makes to the parameter will be made to the original value as\nwell, since references have the effect of pointing two variables at the same memory space. This feature can be difficult to use correctly,\nparticularly if the callee is not expecting a reference, and the improper use of references in function calls can make code less efficient rather than\nmore efficient. </p>\n<p>Further, according to the PHP manual: </p>\n<blockquote>\n  As of PHP 5.3.0, you will get a warning saying that "call-time pass-by-reference" is deprecated... And as of PHP 5.4.0, call-time pass-by-reference\n  was removed, so using it will raise a fatal error.\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyfun(&amp;$name);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyfun($name);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/374">MITRE, CWE-374</a> - Weakness Base Passing Mutable Objects to an Untrusted Method </li>\n</ul>	3	\N	READY	php	CONSTANT_ISSUE	\N	15min	\N	cwe,obsolete,performance,pitfall	0	HTML	1576224543580	1576224543582	1	php
924	"<?php" and "<?=" tags should be used	S1757	S1757	php	<p>Coding conventions allow teams to collaborate effectively. For maximum standardization and readability, PHP code should use the long <code>&lt;?php\n?&gt;</code> tags or the short-echo <code>&lt;?= ?&gt;</code> tags; it should not use the other tag variations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?\n$foo = 1;\n?&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\n$foo = 1;\n?&gt;\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	convention,psr1	0	HTML	1576224543585	1576224543587	1	php
925	"php_sapi_name()" should not be used	S2044	S2044	php	<p>Both <code>php_sapi_name()</code> and the <code>PHP_SAPI</code> constant give the same value. But calling the method is less efficient that simply\nreferencing the constant. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (php_sapi_name() == 'test') { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (PHP_SAPI == 'test') { ... }\n</pre>	2	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	performance	0	HTML	1576224543590	1576224543592	1	php
926	Superglobals should not be accessed directly	S2043	S2043	php	<p>Superglobal variables are predefined variables available in all scopes throughout a script. However, accessing them directly is considered bad\npractice. Instead, they should be accessed through an object or framework that handles sanitation and validation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$name = $_POST['name'];\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$name = $this-&gt;params()-&gt;fromPost('name');\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	15min	\N	bad-practice	0	HTML	1576224543595	1576224543597	1	php
987	Local constants should follow naming conventions for constants	S4174	\N	squid	<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all local, <code>final</code>, initialized, primitive\nvariables, have names that match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic void doSomething() {\n  final int local = 42;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  final int LOCAL = 42;\n  ...\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224548088	1576224548089	1	java
988	"java.nio.Files#delete" should be preferred	S4042	\N	squid	<p>When <code>java.io.File#delete</code> fails, this <code>boolean</code> method simply returns <code>false</code> with no indication of the cause. On\nthe other hand, when <code>java.nio.Files#delete</code> fails, this <code>void</code> method returns one of a series of exception types to better\nindicate the cause of the failure. And since more information is generally better in a debugging situation, <code>java.nio.Files#delete</code> is the\npreferred option.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void cleanUp(Path path) {\n  File file = new File(path);\n  if (!file.delete()) {  // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void cleanUp(Path path) throws NoSuchFileException, DirectoryNotEmptyException, IOException{\n  Files.delete(path);\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	api-design,error-handling	0	HTML	1576224548093	1576224548094	1	java
989	Comments should not be located at the end of lines of code	TrailingCommentCheck	S139	squid	<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint a1 = b + c; // This is a trailing comment that can be very very long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\nint a2 = b + c;\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224548094	1576224548095	1	java
990	Assignments should not be redundant	S4165	\N	squid	<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, there's no point in\nassigning <code>a</code> to <code>c</code> or vice versa because they're already equivalent. </p>\n<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = b;\nc = a;\nb = c; // Noncompliant: c and b are already the same\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = b;\nc = a;\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	redundant	0	HTML	1576224548096	1576224548097	2	java
806	Right operands of shift operators should be integers	S3449	\N	csharpsquid	<p>Numbers can be shifted with the <code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators, but the right operand of the operation needs to be an\n<code>int</code> or a type that has an implicit conversion to <code>int</code>. However, with <code>dynamic</code>, the compiler's type checking is\nturned off, so you can pass anything to a shift operator and have it compile. And if the argument can't be converted to <code>int</code> at runtime,\nthen a <code>RuntimeBinderException</code> will be raised.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndynamic d = 5;\nvar x = d &gt;&gt; 5.4; // Noncompliant\nx = d &gt;&gt; null; // Noncompliant\nx &lt;&lt;= new object(); // Noncompliant\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224540466	1576224540467	2	csharp
807	Inappropriate casts should not be made	S1944	\N	csharpsquid	<p>Inappropriate casts are issues that will lead to unexpected behavior or runtime errors, such as <code>InvalidCastException</code>s. The compiler\nwill catch bad casts from one class to another, but not bad casts to interfaces. Nor will it catch nullable values that are known to be null but that\nare cast to their underlying value types anyway.</p>\n<p>It is much better to use the <code>as</code> operator because it will return <code>null</code> instead of throwing an exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface IMyInterface\n{ /* ... */ }\n\npublic class Implementer : IMyInterface\n{ /* ... */ }\n\npublic class MyClass\n{ /* ... */ }\n\npublic static class Program\n{\n  public static void Main()\n  {\n    var myclass = new MyClass();\n    var x = (IMyInterface) myclass; // Noncompliant, InvalidCastException is being thrown\n    var b = myclass is IMyInterface; // Noncompliant, always false\n\n    int? i = null;\n    var ii = (int)i; // Noncompliant, InvalidOperationException is being thrown\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface IMyInterface\n{ /* ... */ }\n\npublic class Implementer : IMyInterface\n{ /* ... */ }\n\npublic class MyClass\n{ /* ... */ }\n\npublic static class Program\n{\n  public static void Main()\n  {\n    var myclass = new MyClass();\n    var x = myclass as IMyInterface; // Compliant, but will always be null\n    var b = false;\n\n    int? i = null;\n    if (i.HasValue)\n    {\n      var ii = (int)i;\n    }\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported if the interface has no implementing class in the assembly.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 11.4 - A cast should not be performed between a pointer to object type and an integral type. </li>\n  <li> MISRA C++:2008, 5-2-3 - Casts to a base class from a derived class should not be performed on polymorphic types. </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/tgAV">CERT, EXP36-C.</a> - Do not cast pointers into more strictly aligned pointer\n  types </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/588.html">MITRE, CWE-588</a> - Attempt to Access Child of a Non-structure Pointer </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/704.html">MITRE, CWE-704</a> - Incorrect Type Conversion or Cast </li>\n</ul>	3	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	cert,cwe,misra,suspicious	0	HTML	1576224540471	1576224540516	1	csharp
808	Redundant property names should be omitted in anonymous classes	S3441	\N	csharpsquid	<p>When an anonymous type's properties are copied from properties or variables with the same names, it yields cleaner code to omit the new type's\nproperty name and the assignment operator.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar X = 5;\n\nvar anon = new\n{\n  X = X, //Noncompliant, the new object would have the same property without the "X =" part.\n  Y = "my string"\n};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar X = 5;\n\nvar anon = new\n{\n  X,\n  Y = "my string"\n};\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	clumsy,finding	0	HTML	1576224540560	1576224540561	1	csharp
809	Variables should not be checked against the values they're about to be assigned	S3440	\N	csharpsquid	<p>There's no point in checking a variable against the value you're about to assign it. Save the cycles and lines of code, and simply perform the\nassignment.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x != a)  // Noncompliant; why bother?\n{\n  x = a;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx = a;\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	confusing	0	HTML	1576224540563	1576224540565	1	csharp
810	Type should not be examined on "System.Type" instances	S3443	\N	csharpsquid	<p>If you call <code>GetType()</code> on a <code>Type</code> variable, the return value will always be <code>typeof(System.Type)</code>. So there's no\nreal point in making that call. The same applies to passing a type argument to <code>IsInstanceOfType</code>. In both cases the results are entirely\npredictable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar type = typeof(int);\nvar ttype = type.GetType(); //Noncompliant, always typeof(System.Type)\n\nvar s = "abc";\n\nif (s.GetType().IsInstanceOfType(typeof(string))) //Noncompliant; false\n{ /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar s = "abc";\n\nif (s.GetType().IsInstanceOfType("ssss"))\n{ /* ... */ }\n</pre>	4	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224540567	1576224540568	1	csharp
811	"abstract" classes should not have "public" constructors	S3442	\N	csharpsquid	<p>Since <code>abstract</code> classes can't be instantiated, there's no point in their having <code>public</code> or <code>internal</code>\nconstructors. If there is basic initialization logic that should run when an extending class instance is created, you can by all means put it in a\nconstructor, but make that constructor <code>private</code> or <code>protected</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nabstract class Base\n{\n    public Base() // Noncompliant, should be private or protected\n    {\n      //...\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nabstract class Base\n{\n    protected Base()\n    {\n      //...\n    }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	confusing	0	HTML	1576224540571	1576224540572	1	csharp
865	"exit(...)" and "die(...)" statements should not be used	S1799	S1799	php	<p>The <code>exit(...)</code> and <code>die(...)</code> statements should absolutely not be used in Web PHP pages as this might lead to a very bad\nuser experience. In such case, the end user might have the feeling that the web site is down or has encountered a fatal error. </p>\n<p>But of course PHP can also be used to develop command line application and in such case use of <code>exit(...)</code> or <code>die(...)</code>\nstatement can be justified but must remain limited and not spread all over the application. We expect exceptions to be used to handle errors and those\nexceptions should be caught just before leaving the application to specify the exit code with help of <code>exit(...)</code> or <code>die(...)</code>\nstatements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n    public function bar($param)  {\n        if ($param === 42) {\n            exit(23);\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n    public function bar($param)  {\n        if ($param === 42) {\n            throw new Exception('Value 42 is not expected.');\n        }\n    }\n}\n</pre>	4	\N	READY	php	CONSTANT_ISSUE	\N	20min	\N	\N	0	HTML	1576224542359	1576224542361	2	php
866	Functions and variables should not be defined outside of classes	S2007	S2007	php	<p>Defining and using global variables and global functions, when the convention dictates OOP can be confusing and difficult to use properly for\nmultiple reasons:</p>\n<ul>\n  <li> You run the risk of name clashes. </li>\n  <li> Global functions must be stateless, or they can cause difficult-to-track bugs. </li>\n  <li> Global variables can be updated from anywhere and may no longer hold the value you expect. </li>\n  <li> It is difficult to properly test classes that use global functions. </li>\n</ul>\n<p>Instead of being declared globally, such variables and functions should be moved into a class, potentially marked <code>static</code>, so they can\nbe used without a class instance. </p>\n<p>This rule checks that only object-oriented programming is used and that no functions or procedures are declared outside of a class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php\n\n$name = "Bob"; // Noncompliant\n\nfunction doSomething($arg) {   // Noncompliant\n  //...\n}\n\nclass MyClass {\n    //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\nclass MyClass {\n\n  public static $name = "Bob"; // Compliant\n\n  public static function doSomething($arg) {              // Compliant\n    //...\n  }\n  //...\n}\n</pre>	4	\N	READY	php	CONSTANT_ISSUE	\N	15min	\N	design	0	HTML	1576224542365	1576224542367	1	php
867	"file_uploads" should be disabled	S3338	S3338	php	<p><code>file_uploads</code> is an on-by-default PHP configuration that allows files to be uploaded to your site. Since accepting <del>candy</del>\nfiles from strangers is inherently dangerous, this feature should be disabled unless it is absolutely necessary for your site.</p>\n<p>This rule raises an issue when <code>file_uploads</code> is not explicitly disabled.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n; php.ini\nfile_uploads=1  ; Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n; php.ini\nfile_uploads=0\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://cwe.mitre.org/data/definitions/434.html">MITRE, CWE-434</a> - Unrestricted Upload of File with Dangerous Type </li>\n  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>	4	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	cwe,php-ini,sans-top25-insecure	0	HTML	1576224542371	1576224542374	3	php
927	Multiline blocks should be enclosed in curly braces	S2681	S2681	php	<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\n$str = null;\nfor ($i = 0; $i &lt; count($array); $i++)\n  $str = $array[$i];\n  doTheThing($str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ($condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\n$str = null;\nfor ($i = 0; $i &lt; count($array); $i++) {\n  $str = $array[$i];\n  doTheThing($str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	cert,cwe	0	HTML	1576224543599	1576224543644	1	php
928	Perl-style comments should not be used	S2046	S2046	php	<p>Shared coding conventions allow teams to collaborate effectively. This rule flags all Perl-style comments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$myvar; # Noncompliant; this comment should have started with "//"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$myvar; // Compliant; this comment started with "//"\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224543690	1576224543692	1	php
929	"final" should not be used redundantly	S1990	S1990	php	<p>There is no need to use the <code>final</code> modifier inside a <code>final</code> class. Everything in it is <code>final</code> by default.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfinal class MyClass {\n\n  public final String getName() {  // Noncompliant\n    return name;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfinal class MyClass {\n\n  public String getName() {  // Compliant\n    return name;\n  }\n}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224543695	1576224543697	1	php
930	Two branches in a conditional structure should not have exactly the same implementation	S1871	S1871	php	<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch ($i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif ($a &gt;= 0 &amp;&amp; $a &lt; 10) {\n  doTheThing();\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n\nif ($b == 0) {\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing(); // Noncompliant; duplicates then-branch\n}\n\nvar b = a ? 12 &gt; 4 : 4;  // Noncompliant; always results in the same value\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch ($i) {\n  case 1:\n  case 3:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif (($a &gt;= 0 &amp;&amp; $a &lt; 10) || ($a &gt;= 20 &amp;&amp; $a &lt; 50)) {\n  doTheThing();\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n\ndoOneMoreThing();\n\nb = 4;\n</pre>\n<p>or </p>\n<pre>\nswitch ($i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif ($a &gt;= 0 &amp;&amp; $a &lt; 10) {\n  doTheThing();\nelse if ($a &gt;= 10 &amp;&amp; $a &lt; 20) {\n  doTheOtherThing();\n}\nelse if ($a &gt;= 20 &amp;&amp; $a &lt; 50) {\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n\nif ($b == 0) {\n  doOneMoreThing();\n}\nelse {\n  doTheRest();\n}\n\nint b = a ? 12 &gt; 4 : 8;\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>	2	\N	READY	php	CONSTANT_ISSUE	\N	10min	\N	design,suspicious	0	HTML	1576224543701	1576224543745	1	php
931	The names of methods with boolean return values should start with "is" or "has"	S2047	S2047	php	<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the\ndocumentation. Toward that end, methods returning a boolean property should have names that start with "is" or "has" rather than with "get".</p>\n<p>Note that this rule will only apply to functions that are documented to return a boolean.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @return boolean\n */\npublic function getFoo() // Noncompliant\n{\n  return foo;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n * @return boolean\n */\npublic function isFoo()\n{\n  return true;\n}\n</pre>	2	\N	READY	php	CONSTANT_ISSUE	\N	15min	\N	convention	0	HTML	1576224543791	1576224543793	1	php
932	Variable variables should not be used	S1599	S1599	php	<p>PHP's "variable variables" feature (dynamically-named variables) is temptingly powerful, but can lead to unmaintainable code. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$var = 'foo';\n$$var = 'bar';      //Noncompliant\n$$$var = 'hello';  //Noncompliant\n\necho $foo; //will display 'bar'\necho $bar; //will display 'hello'\n</pre>	4	\N	READY	php	CONSTANT_ISSUE	\N	10min	\N	brain-overload	0	HTML	1576224543797	1576224543799	1	php
991	"throws" declarations should not be superfluous	RedundantThrowsDeclarationCheck	S1130	squid	<p>An exception in a <code>throws</code> declaration in Java is superfluous if it is:</p>\n<ul>\n  <li> listed multiple times </li>\n  <li> a subclass of another listed exception </li>\n  <li> a <code>RuntimeException</code>, or one of its descendants </li>\n  <li> completely unnecessary because the declared exception type cannot actually be thrown </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() throws MyException, MyException {}  // Noncompliant; should be listed once\nvoid bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable\nvoid baz() throws RuntimeException {}  // Noncompliant; RuntimeException can always be thrown\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() throws MyException {}\nvoid bar() throws Throwable {}\nvoid baz() {}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	clumsy,redundant,unused	0	HTML	1576224548098	1576224548098	1	java
992	The diamond operator ("<>") should be used	S2293	\N	squid	<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare\na <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,\nand the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	1min	\N	clumsy	0	HTML	1576224548099	1576224548102	1	java
993	"toArray" should be passed an array of the proper type	S3020	\N	squid	<p>Given no arguments, the <code>Collections.toArray</code> method returns an <code>Object []</code>, which will cause a\n<code>ClassCastException</code> at runtime if you try to cast it to an array of the proper class. Instead, pass an array of the correct type in to the\ncall.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return (String []) strings.toArray();  // Noncompliant; ClassCastException thrown\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return strings.toArray(new String[0]);\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224548104	1576224548105	2	java
994	An open curly brace should be located at the beginning of a line	LeftCurlyBraceStartLineCheck	S1106	squid	<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning\nof a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod {  // Noncompliant\n  if(something) {  // Noncompliant\n    executeTask();\n  } else {  // Noncompliant\n    doSomethingElse();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod\n{\n  if(something)\n  {\n    executeTask();\n  } else\n  {\n    doSomethingElse();\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224548106	1576224548107	1	java
812	Unused private types or members should be removed	S1144	\N	csharpsquid	<p><code>private</code> or <code>internal</code> types or <code>private</code> members that are never executed or referenced are dead code:\nunnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to\nunderstand the program and preventing bugs from being introduced.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  private void UnusedPrivateMethod() {...} // Noncompliant\n\n  private class UnusedClass {...} // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  private Foo()\n  {\n    UsedPrivateMethod();\n  }\n\n  private void UsedPrivateMethod()\n  {\n    var c = new UsedClass();\n  }\n\n  private class UsedClass {...}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on:</p>\n<ul>\n  <li> Empty constructors </li>\n  <li> Attributed members </li>\n  <li> Empty serialization constructor on type with <code>System.SerializableAttribute</code> attribute. </li>\n  <li> Internals in assemblies that have a <code>System.Runtime.CompilerServices.InternalsVisibleToAttribute</code> attribute. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/OYIyAQ">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert,unused	0	HTML	1576224540574	1576224540616	1	csharp
813	Collections should not be passed as arguments to their own methods	S2114	\N	csharpsquid	<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in an\nunexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar list = new List&lt;int&gt;();\n\nlist.AddRange(list); // Noncompliant\nlist.Concat(list); // Noncompliant\n\nlist.Union(list); // Noncompliant; always returns list\nlist.Except(list); // Noncompliant; always empty\nlist.Intersect(list); // Noncompliant; always list\nlist.SequenceEqual(list); // Noncompliant; always true\n\nvar set = new HashSet&lt;int&gt;();\nset.UnionWith(set); // Noncompliant; no changes\nset.ExceptWith(set); // Noncompliant; always empty\nset.IntersectWith(set); // Noncompliant; no changes\nset.IsProperSubsetOf(set); // Noncompliant; always false\nset.IsProperSupersetOf(set); // Noncompliant; always false\nset.IsSubsetOf(set); // Noncompliant; always true\nset.IsSupersetOf(set); // Noncompliant; always true\nset.Overlaps(set); // Noncompliant; always true\nset.SetEquals(set); // Noncompliant; always true\nset.SymmetricExceptWith(set); // Noncompliant; always empty\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224540661	1576224540704	2	csharp
814	Exceptions should not be explicitly rethrown	S3445	\N	csharpsquid	<p>When rethrowing an exception, you should do it by simply calling <code>throw;</code> and not <code>throw exc;</code>, because the stack trace is\nreset with the second syntax, making debugging a lot harder.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry\n{}\ncatch(ExceptionType1 exc)\n{\n  Console.WriteLine(exc);\n  throw exc; // Noncompliant; stacktrace is reset\n}\ncatch (ExceptionType2 exc)\n{\n  throw new Exception("My custom message", exc);  // Compliant; stack trace preserved\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry\n{}\ncatch(ExceptionType1 exc)\n{\n  Console.WriteLine(exc);\n  throw;\n}\ncatch (ExceptionType2 exc)\n{\n  throw new Exception("My custom message", exc);\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	confusing,error-handling	0	HTML	1576224540749	1576224540751	1	csharp
868	Files should not contain characters before "<?php"	S2000	S2000	php	<p>Having characters before <code>&lt;?php</code> can cause "Cannot modify header information" errors and similar problems with Ajax requests.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntest&lt;?php  //Noncompliant\n// ...\n</pre>\n<p>and</p>\n<pre>\n// Noncompliant; newline before opening tag\n&lt;?php\n// ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php\n// ...\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	user-experience	0	HTML	1576224542378	1576224542380	2	php
869	Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply	S134	S134	php	<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making\nwhat's known as "Spaghetti code".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\n  if (condition1) {                  // Compliant - depth = 1\n    ...\n    if (condition2) {                // Compliant - depth = 2\n      ...\n      for($ = 0; $i &lt; 10; $i++) {  // Compliant - depth = 3, not exceeding the limit\n        ...\n        if (condition4) {            // Non-Compliant - depth = 4\n          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            ...\n          }\n          return;\n        }\n      }\n    }\n  }\n</pre>	3	\N	READY	php	CONSTANT_ISSUE	\N	10min	\N	brain-overload	0	HTML	1576224542384	1576224542387	1	php
870	Statements should end with a "case default" clause	S131	S131	php	<p>The requirement for a final <code>case default</code> clause is defensive programming. The clause should either take appropriate action, or contain\na suitable comment as to why no action is taken. Even when the <code>switch</code> covers all current values of an <code>enum</code>, a default case\nshould still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch ($param) {  //missing default clause\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n}\n\nswitch ($param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch ($param) {\n  case 0:\n    do_something();\n    break;\n  case 1:\n    do_something_else();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n</ul>	3	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,misra	0	HTML	1576224542394	1576224542439	1	php
871	Errors should not be silenced	S2002	S2002	php	<p>Just as pain is your body's way of telling you something is wrong, errors are PHP's way of telling you there's something you need to fix. Neither\npain, nor PHP errors should be ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@doSomethingDangerous($password);  // Noncompliant; '@' silences errors from function call\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndoSomethingDangerous($password);\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	30min	\N	pitfall	0	HTML	1576224542486	1576224542489	2	php
933	Cognitive Complexity of functions should not be too high	S3776	S3776	php	<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>\n</ul>	3	\N	READY	php	LINEAR_OFFSET	1min	5min	per complexity point over the threshold	brain-overload	0	HTML	1576224543802	1576224543805	1	php
934	Local variable and function parameter names should comply with a naming convention	S117	S117	php	<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic function doSomething($my_param){\n  $LOCAL;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic function doSomething($myParam){\n  $local;\n  ...\n}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224543811	1576224543814	1	php
935	Constant names should comply with a naming convention	S115	S115	php	<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\ndefine("const1", true);\n\nclass Foo {\n    const const2 = "bar";\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndefine("CONST1", true);\n\nclass Foo {\n    const CONST2 = "bar";\n}\n</pre>	3	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224543820	1576224543822	1	php
936	Field names should comply with a naming convention	S116	S116	php	<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass MyClass {\n  $my_field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  $myField;\n}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224543829	1576224543831	1	php
937	Files should contain an empty newline at the end	S113	S113	php	<p>Some tools work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224543838	1576224543841	1	php
938	Interface names should comply with a naming convention	S114	S114	php	<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\ninterface myInterface {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ninterface MyInterface {...}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	10min	\N	convention	0	HTML	1576224543843	1576224543845	1	php
939	Classes should not have too many fields	S1820	S1820	php	<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.</p>\n<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>	2	\N	READY	php	CONSTANT_ISSUE	\N	1h	\N	brain-overload	0	HTML	1576224543850	1576224543852	1	php
995	Class variable fields should not have public accessibility	ClassVariableVisibilityCheck	S1104	squid	<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/493.html">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	cwe	0	HTML	1576224548109	1576224548155	3	java
996	Close curly brace and the next "else", "catch" and "finally" keywords should be on two different lines	RightCurlyBraceDifferentLineAsNextBlockCheck	S1108	squid	<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on\ntwo different lines.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Noncompliant\n    doSomethingElse();\n  }\n  else {                               // Compliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  }\n  else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  }\n  catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224548200	1576224548245	1	java
815	Useless "if(true) {...}" and "if(false){...}" blocks should be removed	S1145	\N	csharpsquid	<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. </li>\n  <li> Some value was left unset. </li>\n  <li> Some logic is not doing what the programmer thought it did. </li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true)\n{\n  DoSomething();\n}\n...\nif (false)\n{\n  DoSomethingElse();\n}\n\nif (2 &lt; 3 ) { ... }  // Noncompliant; always false\n\nint i = 0;\nint j = 0;\n// ...\nj = Foo();\n\nif (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization\n\nbool b = true;\n//...\nif (b || !b) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDoSomething();\n...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:csharpsquid:S2583} instead.</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	cwe,misra	0	HTML	1576224540754	1576224540796	2	csharp
816	Interfaces should not simply inherit from base interfaces with colliding members	S3444	\N	csharpsquid	<p>When an interface inherits from two interfaces that both define a member with the same name, trying to access that member through the derived\ninterface will result in the compiler error <code>CS0229 Ambiguity between 'IBase1.SomeProperty' and 'IBase2.SomeProperty'</code>.</p>\n<p>So instead, every caller will be forced to cast instances of the derived interface to one or the other of its base interfaces to resolve the\nambiguity and be able to access the member. Instead, it is better to resolve the ambiguity in the definition of the derived interface either by:</p>\n<ul>\n  <li> renaming the member in one of the base interfaces to remove the collision </li>\n  <li> also defining that member in the derived interface. Use this only if all copies of the member are meant to hold the same value. </li>\n</ul>\n<p> </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface IBase1\n{\n  string SomeProperty { get; set; }\n}\n\npublic interface IBase2\n{\n  string SomeProperty { get; set; }\n}\n\npublic interface IDerived : IBase1, IBase2 // Noncompliant, accessing IDerived.SomeProperty is ambiguous\n{\n}\n\npublic class MyClass : IDerived\n{\n  // Implements both IBase1.SomeProperty and IBase2.SomeProperty\n  public string SomeProperty { get; set; } = "Hello";\n\n  public static void Main()\n  {\n    MyClass myClass = new MyClass();\n    Console.WriteLine(myClass.SomeProperty); // Writes "Hello" as expected\n    Console.WriteLine(((IBase1)myClass).SomeProperty); // Writes "Hello" as expected\n    Console.WriteLine(((IBase2)myClass).SomeProperty); // Writes "Hello" as expected\n    Console.WriteLine(((IDerived)myClass).SomeProperty); // Error CS0229 Ambiguity between 'IBase1.SomeProperty' and 'IBase2.SomeProperty'\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface IDerived : IBase1, IBase2\n{\n  new string SomeProperty { get; set; }\n}\n\npublic class MyClass : IDerived\n{\n  // Implements IBase1.SomeProperty, IBase2.SomeProperty and IDerived.SomeProperty\n  public string SomeProperty { get; set; } = "Hello";\n\n  public static void Main()\n  {\n    MyClass myClass = new MyClass();\n    Console.WriteLine(myClass.SomeProperty); // Writes "Hello" as expected\n    Console.WriteLine(((IBase1)myClass).SomeProperty); // Writes "Hello" as expected\n    Console.WriteLine(((IBase2)myClass).SomeProperty); // Writes "Hello" as expected\n    Console.WriteLine(((IDerived)myClass).SomeProperty); // Writes "Hello" as expected\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic interface IBase1\n{\n  string SomePropertyOne { get; set; }\n}\n\npublic interface IBase2\n{\n  string SomePropertyTwo { get; set; }\n}\n\npublic interface IDerived : IBase1, IBase2\n{\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	design	0	HTML	1576224540840	1576224540885	1	csharp
817	Parameters should be passed in the correct order	S2234	\N	csharpsquid	<p>When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when\nthe names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead\nto unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic double Divide(int divisor, int dividend)\n{\n  return divisor/dividend;\n}\n\npublic void DoTheThing()\n{\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = Divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic double Divide(int divisor, int dividend)\n{\n  return divisor/dividend;\n}\n\npublic void DoTheThing()\n{\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = Divide(divisor, dividend);\n  //...\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224540935	1576224540938	2	csharp
872	"open_basedir" should limit file access	S3333	S3333	php	<p>The <code>open_basedir</code> configuration in <em>php.ini</em> limits the files the script can access using, for example, <code>include</code> and\n<code>fopen()</code>. Leave it out, and there is no default limit, meaning that any file can be accessed. Include it, and PHP will refuse to access\nfiles outside the allowed path.</p>\n<p><code>open_basedir</code> should be configured with a directory, which will then be accessible recursively. However, the use of <code>.</code>\n(current directory) as an <code>open_basedir</code> value should be avoided since it's resolved dynamically during script execution, so a\n<code>chdir('/')</code> command could lay the whole server open to the script.</p>\n<p>This is not a fool-proof configuration; it can be reset or overridden at the script level. But its use should be seen as a minimum due diligence\nstep. This rule raises an issue when <code>open_basedir</code> is not present in <em>php.ini</em>, and when <code>open_basedir</code> contains root,\nor the current directory (<code>.</code>) symbol.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n; php.ini try 1\n; open_basedir="${USER}/scripts/data"  Noncompliant; commented out\n\n; php.ini try 2\nopen_basedir="/:${USER}/scripts/data"  ; Noncompliant; root directory in the list\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n; php.ini try 1\nopen_basedir="${USER}/scripts/data"\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://cwe.mitre.org/data/definitions/23.html">MITRE, CWE-23</a> - Relative Path Traversal </li>\n  <li> <a href="https://cwe.mitre.org/data/definitions/36.html">MITRE, CWE-36</a> - Absolute Path Traversal </li>\n</ul>	4	\N	READY	php	CONSTANT_ISSUE	\N	15min	\N	cwe,php-ini	0	HTML	1576224542493	1576224542538	3	php
873	"elseif" keyword should be used in place of "else if" keywords	S1793	S1793	php	<p>According to the PSR2 coding standard:</p>\n<blockquote>\n  <p>The keyword <code>elseif</code> SHOULD be used instead of <code>else if</code> so that all control keywords look like single words.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ($expr1) {\n  ...\n} else if ($expr2) {\n  ...\n} else {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ($expr1) {\n  ...\n} elseif ($expr2) {\n  ...\n} else {...}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	convention,psr2	0	HTML	1576224542580	1576224542581	1	php
874	Deprecated functions should not be used	S2001	S2001	php	<p>Deprecated language features are those that have been retained temporarily for backward compatibility, but which will eventually be removed from\nthe language. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no\nuse of the deprecated features should be added to the code, and all existing uses should be gradually removed.</p>\n<p>The following functions were deprecated in PHP 5:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Deprecated</th>\n      <th>Use Instead</th>\n    </tr>\n    <tr>\n      <td><code>call_user_method()</code></td>\n      <td><code>call_user_func()</code></td>\n    </tr>\n    <tr>\n      <td><code>call_user_method_array()</code></td>\n      <td><code>call_user_func_array()</code></td>\n    </tr>\n    <tr>\n      <td><code>define_syslog_variables()</code></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>dl()</code></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>ereg()</code></td>\n      <td><code>preg_match()</code></td>\n    </tr>\n    <tr>\n      <td><code>ereg_replace()</code></td>\n      <td><code>preg_replace()</code> (note that this is deprecated in PHP 5.5)</td>\n    </tr>\n    <tr>\n      <td><code>eregi()</code></td>\n      <td><code>preg_match()</code> with 'i' modifier</td>\n    </tr>\n    <tr>\n      <td><code>eregi_replace()</code></td>\n      <td><code>preg_replace()</code> with 'i' modifier</td>\n    </tr>\n    <tr>\n      <td><code>set_magic_quotes_runtime()</code> and its alias, <code>magic_quotes_runtime()</code></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>session_register()</code></td>\n      <td><code>$_SESSION</code> superglobal</td>\n    </tr>\n    <tr>\n      <td><code>session_unregister()</code></td>\n      <td><code>$_SESSION</code> superglobal</td>\n    </tr>\n    <tr>\n      <td><code>session_is_registered()</code></td>\n      <td><code>$_SESSION</code> superglobal</td>\n    </tr>\n    <tr>\n      <td><code>set_socket_blocking()</code></td>\n      <td><code>stream_set_blocking()</code></td>\n    </tr>\n    <tr>\n      <td><code>split()</code></td>\n      <td><code>preg_split()</code></td>\n    </tr>\n    <tr>\n      <td><code>spliti()</code></td>\n      <td><code>preg_split()</code> with 'i' modifier</td>\n    </tr>\n    <tr>\n      <td><code>sql_regcase()</code></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>mysql_db_query()</code></td>\n      <td><code>mysql_select_db()</code> and <code>mysql_query()</code></td>\n    </tr>\n    <tr>\n      <td><code>mysql_escape_string()</code></td>\n      <td><code>mysql_real_escape_string()</code></td>\n    </tr>\n    <tr>\n      <td>Passing locale category names as strings</td>\n      <td>Use the LC_* family of constants</td>\n    </tr>\n  </tbody>\n</table>\n<p>The following functions were deprecated in PHP 7:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Deprecated</th>\n      <th>Use Instead</th>\n    </tr>\n    <tr>\n      <td><code>__autoload()</code></td>\n      <td><code>spl_autoload_register()</code></td>\n    </tr>\n    <tr>\n      <td><code>create_function()</code></td>\n      <td>anonymous function</td>\n    </tr>\n    <tr>\n      <td><code>parse_str()</code> without second argument</td>\n      <td><code>parse_str()</code> with second argument</td>\n    </tr>\n    <tr>\n      <td><code>gmp_random()</code></td>\n      <td><code>gmp_random_bits()</code> or <code>gmp_random_range()</code></td>\n    </tr>\n    <tr>\n      <td><code>each()</code></td>\n      <td><code>foreach</code></td>\n    </tr>\n    <tr>\n      <td><code>assert()</code> with string argument</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>	2	\N	READY	php	CONSTANT_ISSUE	\N	15min	\N	obsolete	0	HTML	1576224542583	1576224542628	1	php
875	Session-management cookies should not be persistent	S3332	S3332	php	<p>Cookies without fixed lifetimes or expiration dates are known as non-persistent, or "session" cookies, meaning they last only as long as the\nbrowser session, and poof away when the browser closes. Cookies with expiration dates, "persistent" cookies, are stored/persisted until those\ndates.</p>\n<p>Non-persistent cookies should be used for the management of logged-in sessions on web sites. To make a cookie non-persistent, simply omit the\n<code>expires</code> attribute.</p>\n<p>This rule raises an issue when <code>expires</code> is set for a session cookie, either programmatically or via configuration, such as\n<code>session.cookie_lifetime</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting\n  (XSS) </li>\n  <li> <a href="https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Expire_and_Max-Age_Attributes">OWASP, Session Management Cheat\n  Sheet</a> - Expire and Max-Age Attributes </li>\n</ul>	3	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	owasp-a3,php-ini	0	HTML	1576224542673	1576224542675	3	php
940	Method arguments with default values should be last	S1788	S1788	php	<p>The ability to define default values for method arguments can make a method easier to use. Default argument values allow callers to specify as many\nor as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code. </p>\n<p>But all method arguments with default values should be declared after the method arguments without default values. Otherwise, it makes it\nimpossible for callers to take advantage of defaults; they must re-specify the defaulted values in order to "get to" the non-default arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction makeyogurt($type = "acidophilus", $flavor){...}  // Noncompliant\n\nmakeyogurt("raspberry")}}  // Runtime error: Missing argument 2 in call to makeyogurt()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction makeyogurt($flavor, $type = "acidophilus", ){...}\n\nmakeyogurt("raspberry")}} // Works as expected\n</pre>	2	\N	READY	php	CONSTANT_ISSUE	\N	20min	\N	psr2	0	HTML	1576224543860	1576224543861	1	php
941	Statements should be on separate lines	S122	S122	php	<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Anonymous functions containing a single statement are ignored.</p>\n<pre>\n$max_comparator = function ($v) { return $v &gt; 2; };           // Compliant\n$max_comparator = function ($v) { echo $v; return $v &gt; 2; };  // Noncompliant\n</pre>	2	\N	READY	php	CONSTANT_ISSUE	\N	1min	\N	psr2,style	0	HTML	1576224543864	1576224543865	1	php
997	The non-serializable super class of a "Serializable" class should have a no-argument constructor	S2055	\N	squid	<p>When a <code>Serializable</code> object has a non-serializable ancestor in its inheritance chain, object deserialization (re-instantiating the\nobject from file) starts at the first non-serializable class, and proceeds down the chain, adding the properties of each subsequent child class, until\nthe final object has been instantiated. </p>\n<p>In order to create the non-serializable ancestor, its no-argument constructor is called. Therefore the non-serializable ancestor of a\n<code>Serializable</code> class must have a no-arg constructor. Otherwise the class is <code>Serializable</code> but not deserializable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {  // Noncompliant; nonserializable ancestor doesn't have no-arg constructor\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit () {...};  // Compliant; no-arg constructor added to ancestor\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) {...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	serialization	0	HTML	1576224548291	1576224548336	2	java
998	Class names should not shadow interfaces or superclasses	S2176	\N	squid	<p>While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's\nconfusing and could cause problems in the future. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224548380	1576224548382	1	java
999	Inappropriate "Collection" calls should not be made	S2175	\N	squid	<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of\nusing the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is\nunrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/QwFlAQ">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections\n  Framework methods that are a different type than the collection parameter type </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert	0	HTML	1576224548383	1576224548385	2	java
818	"[Optional]" should not be used on "ref" or "out" parameters	S3447	\N	csharpsquid	<p>The use of <code>ref</code> or <code>out</code> in combination with <code>[Optional]</code> is both confusing and contradictory.\n<code>[Optional]</code> indicates that the parameter doesn't have to be provided, while <code>out</code> and <code>ref</code> mean that the parameter\nwill be used to return data to the caller (<code>ref</code> additionally indicates that the parameter may also be used to pass data into the\nmethod).</p>\n<p>Thus, making it <code>[Optional]</code> to provide the parameter in which you will be passing back the method results doesn't make sense. In fact,\nthe compiler will raise an error on such code. Unfortunately, it raises the error on method calls where the <code>[Optional]</code> parameter has been\nomitted, not the source of the problem, the method declaration. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n    public void DoStuff([Optional] ref int i) // Noncompliant\n    {\n        Console.WriteLine(i);\n    }\n\n    public static void Main()\n    {\n        new MyClass().DoStuff(); // This doesn't compile, CS7036 shows\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass\n{\n  public void DoStuff(ref int i)\n  {\n    Console.WriteLine(i);\n  }\n\n  public static void Main()\n  {\n    var i = 42;\n    new MyClass().DoStuff(ref i);\n  }\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	pitfall	0	HTML	1576224540942	1576224540988	1	csharp
819	Boolean checks should not be inverted	S1940	\N	csharpsquid	<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( !(a == 2)) { ...}  // Noncompliant\nbool b = !(i &lt; 10);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a != 2) { ...}\nbool b = (i &gt;= 10);\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	pitfall	0	HTML	1576224541034	1576224541036	1	csharp
820	Fields should be private	S2357	\N	csharpsquid	<p>Fields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and\nvalidation cannot be added later on without breaking backward compatibility. Instead, developers should encapsulate their fields into properties.\nExplicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  public int MagicNumber = 42;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  public int MagicNumber\n  {\n    get { return 42; }\n  }\n}\n</pre>\n<p>or </p>\n<pre>\npublic class Foo\n{\n  private int MagicNumber = 42;\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>struct</code>s are ignored, as are <code>static</code> and <code>const</code> fields in classes. </p>\n<p>Further, an issue is only raised when the real accessibility is <code>public</code>, taking into account the class accessibility.</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	30min	\N	pitfall	0	HTML	1576224541039	1576224541040	1	csharp
821	Console logging should not be used	S2228	\N	csharpsquid	<p>Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you\nrun the risk of inadvertently exposing sensitive information.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void DoSomething ()\n{\n  // ...\n  Console.WriteLine ("so far, so good..."); // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	owasp-a6	0	HTML	1576224541042	1576224541044	3	csharp
876	Functions should not be nested too deeply	S2004	S2004	php	<p>Nesting functions can quickly turn your code into "spaghetti code". Such code is hard to read, refactor and therefore to maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nfunction f () {\n  function f_inner () {\n    function f_inner_inner() {\n      function f_inner_inner_inner() { // Noncompliant\n      }\n    }\n  }\n}\n</pre>	3	\N	READY	php	CONSTANT_ISSUE	\N	20min	\N	brain-overload	0	HTML	1576224542678	1576224542679	1	php
877	"cgi.force_redirect" should be enabled	S3335	S3335	php	<p>The <code>cgi.force_redirect</code> <em>php.ini</em> configuration is on by default, and it prevents unauthenticated access to scripts when PHP is\nrunning as a CGI. Unfortunately, it must be disabled on IIS, OmniHTTPD and Xitami, but in all other cases it should be on.</p>\n<p>This rule raises an issue when when <code>cgi.force_redirect</code> is explicitly disabled.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n; php.ini\ncgi.force_redirect=0  ; Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/305">MITRE, CWE-305</a> - Authentication Bypass by Primary Weakness </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration">OWASP Top Ten 2013 Category A5</a> - Security\n  Misconfiguration </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	cwe,owasp-a5,php-ini	0	HTML	1576224542685	1576224542687	3	php
878	Classes should not be too complex	S1311	S1311	php	<p>The cyclomatic complexity of a class should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to\nunderstand and therefore to maintain.</p>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>	3	\N	DEPRECATED	php	LINEAR_OFFSET	1min	10min	per complexity point over the threshold	\N	0	HTML	1576224542689	1576224542690	1	php
879	"require_once" and "include_once" should be used instead of "require" and "include"	S2003	S2003	php	<p>At root, <code>require</code>, <code>require_once</code>, <code>include</code>, and <code>include_once</code> all perform the same task of\nincluding one file in another. However, the way they perform that task differs, and they should not be used interchangeably.</p>\n<p><code>require</code> includes a file but generates a fatal error if an error occurs in the process.</p>\n<p><code>include</code> also includes a file, but generates only a warning if an error occurs.</p>\n<p>Predictably, the difference between <code>require</code> and <code>require_once</code> is the same as the difference between <code>include</code>\nand <code>include_once</code> - the "_once" versions ensure that the specified file is only included once. </p>\n<p>Because including the same file multiple times could have unpredictable results, the "once" versions are preferred.</p>\n<p>Because <code>include_once</code> generates only warnings, it should be used only when the file is being included conditionally, i.e. when all\npossible error conditions have been checked beforehand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninclude 'code.php';  //Noncompliant; not a "_once" usage and not conditional\ninclude $user.'_history.php'; // Noncompliant\nrequire 'more_code.php';  // Noncompliant; not a "_once" usage\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nrequire_once 'code.php';\nif (is_member($user)) {\n  include_once $user.'_history.php';\n}\nrequire_once 'more_code.php';\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224542695	1576224542740	2	php
942	Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression	S881	S881	php	<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$u8a = ++$u8b + $u8c--;\n$foo = $bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++$u8b;\n$u8a = $u8b + $u8c;\n$u8c--;\n$foo = $bar / 4;\n$bar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwE">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/fYAyAQ">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/yQC7AQ">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	cert,misra	0	HTML	1576224543868	1576224543912	1	php
943	Functions should not contain too many return statements	S1142	S1142	php	<p>Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the function.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nfunction myFunction(){ // Noncompliant as there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>	2	\N	READY	php	CONSTANT_ISSUE	\N	20min	\N	brain-overload	0	HTML	1576224543957	1576224543959	1	php
944	Closing tag "?>" should be omitted on files containing only PHP	S1780	S1780	php	<p>According to the PSR2 coding standard:</p>\n<blockquote>\n  <p>The closing <code>?&gt;</code> tag should be omitted from files containing only PHP.</p>\n</blockquote>\n<p>According to the PHP manual:</p>\n<blockquote>\n  <p>in some cases omitting it is helpful when using include or require, so unwanted whitespace will not occur at the end of files, and you will still\n  be able to add headers to the response later. It is also handy if you use output buffering, and would not like to see added unwanted whitespace at\n  the end of the parts generated by the included files.</p>\n</blockquote>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	bad-practice,psr2	0	HTML	1576224543964	1576224543966	1	php
1000	Short-circuit logic should be used in boolean contexts	S2178	\N	squid	<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/g4FtAg">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert	0	HTML	1576224548386	1576224548387	1	java
1001	"Serializable" classes should have a version id	S2057	\N	squid	<p>A <code>serialVersionUID</code> field is required in all <code>Serializable</code> classes. If you do not provide one, one will be calculated for\nyou by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an entirely new id,\nand you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the class.</p>\n<p><code>serialVersionUID</code>'s should be declared with all of these modifiers: <code>static final long</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.\n        implements Serializable {\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID = 1;\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and <code>Error</code>s),\nand classes marked with <code>@SuppressWarnings("serial")</code> are ignored.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYCpAQ">CERT, SER00-J.</a> - Enable serialization compatibility during class evolution\n  </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,pitfall,serialization	0	HTML	1576224548389	1576224548432	1	java
822	Conditionally executed blocks should be reachable	S2583	\N	csharpsquid	<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never\nbe used in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = false;\nif (a) // Noncompliant\n{\n  DoSomething(); // never executed\n}\n\nif (!a || b) // Noncompliant; "!a" is always "true", "b" is never evaluated\n{\n  DoSomething();\n}\nelse\n{\n  DoSomethingElse(); // never executed\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	cert,cwe,misra,pitfall,unused	0	HTML	1576224541046	1576224541047	2	csharp
823	"Exception" should not be caught when not required by called methods	S2221	\N	csharpsquid	<p>Catching <code>System.Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception\ntypes, including the ones that were not intended to be caught. To prevent any misunderstandings, the exception filters should be used. Alternatively\neach exception type should be in a separate <code>catch</code> block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry\n{\n  // do something that might throw a FileNotFoundException or IOException\n}\ncatch (Exception e) // Noncompliant\n{\n  // log exception ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry\n{\n  // do something\n}\ncatch (Exception e) when (e is FileNotFoundException || e is IOException)\n{\n  // do something\n}\n\n</pre>\n<h2>Exceptions</h2>\n<p>The final option is to catch <code>System.Exception</code> and <code>throw</code> it in the last statement in the <code>catch</code> block. This is\nthe least-preferred option, as it is an old-style code, which also suffers from performance penalty compared to exception filters.</p>\n<pre>\ntry\n{\n  // do something\n}\ncatch (Exception e)\n{\n  if (e is FileNotFoundException || e is IOException)\n  {\n    // do something\n  }\n  else\n  {\n    throw;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/396.html">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	cwe,error-handling	0	HTML	1576224541049	1576224541091	1	csharp
880	"allow_url_fopen" and "allow_url_include" should be disabled	S3334	S3334	php	<p><code>allow_url_fopen</code> and <code>allow_url_include</code> allow code to be read into a script from URL's. The ability to suck in executable\ncode from outside your site, coupled with imperfect input cleansing could lay your site bare to attackers. Even if your input filtering is perfect\ntoday, are you prepared to bet your site that it will always be perfect in the future?</p>\n<p>This rule raises an issue when either property is explicitly enabled in <em>php.ini</em> and when <code>allow_url_fopen</code>, which defaults to\nenabled, is not explicitly disabled.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n; php.ini  Noncompliant; allow_url_fopen not explicitly disabled\nallow_url_include=1  ; Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n; php.ini\nallow_url_fopen=0\nallow_url_include=0\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://cwe.mitre.org/data/definitions/829.html">MITRE, CWE-829</a> - Inclusion of Functionality from Untrusted Control Sphere </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection </li>\n  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Risky Resource Management </li>\n</ul>	4	\N	READY	php	CONSTANT_ISSUE	\N	15min	\N	cwe,owasp-a1,php-ini,sans-top25-risky	0	HTML	1576224542785	1576224542829	3	php
881	"enable_dl" should be disabled	S3337	S3337	php	<p><code>enable_dl</code> is on by default and allows <code>open_basedir</code> restrictions, which limit the files a script can access, to be\nignored. For that reason, it's a dangerous option and should be explicitly turned off.</p>\n<p>This rule raises an issue when <code>enable_dl</code> is not explicitly set to 0 in <em>php.ini</em>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n; php.ini\nenable_dl=1  ; Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n; php.ini\nenable_dl=0\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://cwe.mitre.org/data/definitions/23.html">MITRE, CWE-23</a> - Relative Path Traversal </li>\n  <li> <a href="https://cwe.mitre.org/data/definitions/36.html">MITRE, CWE-36</a> - Absolute Path Traversal </li>\n</ul>	4	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	cwe,php-ini	0	HTML	1576224542874	1576224542877	3	php
882	String literals should not be concatenated	S2005	S2005	php	<p>There is no reason to concatenate literal strings. Doing so is an exercise in reducing code readability. Instead, the strings should be\ncombined.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$msg = "Hello " . "${name}" . "!";  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$msg = "Hello ${name}!";\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224542880	1576224542883	1	php
945	A "while" loop should be used instead of a "for" loop	S1264	S1264	php	<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a\n<code>while</code> loop should be used instead to increase readability. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224543969	1576224543972	1	php
946	PHP keywords and constants "true", "false", "null" should be lower case	S1781	S1781	php	<p>Using indifferently lower or upper case for PHP keywords and constants "true", "false" and "null" can impact the readability of PHP source\ncode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;?php ECHO 'Hello World'; ?&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;?php echo 'Hello World'; ?&gt;\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	1min	\N	convention,psr2	0	HTML	1576224543975	1576224543977	1	php
947	Control structures should use curly braces	S121	S121	php	<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>	3	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	cert,misra,pitfall	0	HTML	1576224543980	1576224544024	1	php
948	Unused "private" methods should be removed	S1144	S1144	php	<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  private function Foo() {}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n\n  public static function doSomething()\n  {\n    $foo = new Foo();\n    ...\n  }\n\n  private function unusedPrivateFunction() {  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  private function Foo(){}   // Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n\n  public static function doSomething()\n  {\n    $foo = new Foo();\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/OYIyAQ">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	cert,unused	0	HTML	1576224544068	1576224544069	1	php
1002	Child class methods named for parent class methods should be overrides	S2177	\N	squid	<p>When a method in a child class has the same signature as a method in a parent class, it is assumed to be an override. However, that's not the case\nwhen:</p>\n<ul>\n  <li> the parent class method is <code>static</code> and the child class method is not. </li>\n  <li> the arguments or return types of the child method are in different packages than those of the parent method. </li>\n  <li> the parent class method is <code>private</code>. </li>\n</ul>\n<p>Typically, these things are done unintentionally; the private parent class method is overlooked, the <code>static</code> keyword in the parent\ndeclaration is overlooked, or the wrong class is imported in the child. But if the intent is truly for the child class method to be different, then\nthe method should be renamed to prevent confusion. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport fruit.Pear;\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // Noncompliant; this is not an override\n    // ...\n  }\n\n\n  public void doSomethingElse() {  // Noncompliant; parent method is static\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport computer.Pear;  // import corrected\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // true override (see import)\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	pitfall	0	HTML	1576224548478	1576224548525	2	java
1003	"Serializable" inner classes of "Serializable" classes should be static	S2059	\N	squid	<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is actually\nserializable, then the serialization will succeed but possibly write out far more data than was intended. </p>\n<p>Making the inner class <code>static</code> (i.e. "nested") avoids this problem, therefore inner classes should be <code>static</code> if possible.\nHowever, you should be aware that there are semantic differences between an inner class and a nested one: </p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public class Drupelet implements Serializable {  // Noncompliant; output may be too large\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public static class Drupelet implements Serializable {\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/O4CpAQ">CERT, SER05-J.</a> - Do not serialize instances of inner classes </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert,pitfall,serialization	0	HTML	1576224548568	1576224548615	1	java
824	Enumeration types should comply with a naming convention	S2342	\N	csharpsquid	<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all <code>enum</code> names match a provided regular\nexpression.</p>\n<p>The default configuration is the one recommended by Microsoft:</p>\n<ul>\n  <li> Pascal casing, starting with an upper case character, e.g. BackColor </li>\n  <li> Short abbreviations of 2 letters can be capitalized, e.g. GetID </li>\n  <li> Longer abbreviations need to be lower case, e.g. GetHtml </li>\n  <li> If the enum is marked as [Flags] then its name should be plural (e.g. MyOptions), otherwise, names should be singular (e.g. MyOption) </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression for non-flags enums: <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?$</code></p>\n<pre>\npublic enum foo // Noncompliant\n{\n    FooValue = 0\n}\n</pre>\n<p>With the default regular expression for flags enums: <code>^([A-Z]{1,3}[a-z0-9]+)*([A-Z]{2})?s$</code></p>\n<pre>\n[Flags]\npublic enum Option // Noncompliant\n{\n    None = 0,\n    Option1 = 1,\n    Option2 = 2\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Foo\n{\n    FooValue = 0\n}\n</pre>\n<pre>\n[Flags]\npublic enum Options\n{\n    None = 0,\n    Option1 = 1,\n    Option2 = 2\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224541140	1576224541140	1	csharp
825	"[ExpectedException]" should not be used	S3431	\N	csharpsquid	<p>It should be clear to a casual reader what code a test is testing and what results are expected. Unfortunately, that's not usually the case with\nthe <code>[ExpectedException]</code> attribute since an exception could be thrown from almost any line in the method.</p>\n<p>This rule detects MSTest and NUnit <code>ExpectedException</code> attribute.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[TestMethod]\n[ExpectedException(typeof(ArgumentNullException))]  // Noncompliant\npublic void TestNullArg()\n{\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[TestMethod]\npublic void TestNullArg()\n{\n  bool callFailed = false;\n  try\n  {\n    //...\n  }\n  catch (ArgumentNullException)\n  {\n    callFailed = true;\n  }\n  Assert.IsTrue(callFailed, "Expected call to MyMethod to fail with ArgumentNullException");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores one-line test methods, since it is obvious in such methods where the exception is expected to be thrown. </p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	tests	0	HTML	1576224541144	1576224541145	1	csharp
826	Track uses of "FIXME" tags	S1134	\N	csharpsquid	<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate int Divide(int numerator, int denominator)\n{\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>	2	\N	READY	cs	\N	\N	\N	\N	cwe	0	HTML	1576224541146	1576224541146	1	csharp
883	"session.use_trans_sid" should not be enabled	S3336	S3336	php	<p>PHP's <code>session.use_trans_sid</code> automatically appends the user's session id to urls when cookies are disabled. On the face of it, this\nseems like a nice way to let uncookie-able users use your site anyway. In reality, it makes those users vulnerable to having their sessions hijacked\nby anyone who might:</p>\n<ul>\n  <li> see the URL over the user's shoulder </li>\n  <li> be sent the URL by the user </li>\n  <li> retrieve the URL from browser history </li>\n  <li> ... </li>\n</ul>\n<p>For that reason, it's better to practice a little "tough love" with your users and force them to turn on cookies.</p>\n<p>Since <code>session.use_trans_sid</code> is off by default, this rule raises an issue when it is explicitly enabled.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n; php.ini\nsession.use_trans_sid=1  ; Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration">OWASP Top Ten 2013 Category A5</a> - Security\n  Misconfiguration </li>\n</ul>	4	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	owasp-a5,php-ini	0	HTML	1576224542886	1576224542889	3	php
884	An open curly brace should be located at the end of a line	S1105	S1105	php	<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224542894	1576224542896	1	php
885	An open curly brace should be located at the beginning of a line	S1106	S1106	php	<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning\nof a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction myMethod() {  // Noncompliant\n  if(something) {  // Noncompliant\n    executeTask();\n  } else {  //Noncompliant\n    doSomethingElse();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction myMethod()\n{\n  if(something)\n  {\n    executeTask();\n  } else\n  {\n    doSomethingElse();\n  }\n}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224542900	1576224542903	1	php
886	A close curly brace should be located at the beginning of a line	S1109	S1109	php	<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition) {\n  doSomething();}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224542907	1576224542909	1	php
949	Useless "if(true) {...}" and "if(false){...}" blocks should be removed	S1145	S1145	php	<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. </li>\n  <li> Some value was left unset. </li>\n  <li> Some logic is not doing what the programmer thought it did. </li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {  // Noncompliant\n  doSomething();\n}\n...\nif (false) {  // Noncompliant\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	cwe,misra	0	HTML	1576224544070	1576224544111	2	php
950	Functions should not be too complex	S1541	S1541	php	<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.</p>	3	\N	READY	php	LINEAR_OFFSET	1min	10min	per complexity point above the threshold	brain-overload	0	HTML	1576224544156	1576224544157	1	php
951	Method visibility should be explicitly declared	S1784	S1784	php	<p>Class methods may be defined as public, private, or protected. Methods declared without any explicit visibility keyword are defined as public. To\nprevent any misunderstanding, this visibility should always be explicitly declared.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic function foo(){...}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	convention,psr2	0	HTML	1576224544159	1576224544159	2	php
952	"switch" statements should have at least 3 "case" clauses	S1301	S1301	php	<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch ($variable) {\n  case 0:\n    do_something();\n    break;\n  default:\n    do_something_else();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ($variable == 0) {\n  do_something();\n} else {\n  do_something_else();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>\n  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>\n  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>\n</ul>	1	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	bad-practice,misra	0	HTML	1576224544160	1576224544161	1	php
1004	String function use should be optimized for single characters	S3027	\N	squid	<p>An <code>indexOf</code> or <code>lastIndexOf</code> call with a single letter <code>String</code> can be made more performant by switching to a\ncall with a <code>char</code> argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myStr = "Hello World";\n// ...\nint pos = myStr.indexOf("W");  // Noncompliant\n// ...\nint otherPos = myStr.lastIndexOf("r"); // Noncompliant\n// ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString myStr = "Hello World";\n// ...\nint pos = myStr.indexOf('W');\n// ...\nint otherPos = myStr.lastIndexOf('r');\n// ...\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	clumsy,performance	0	HTML	1576224548664	1576224548665	1	java
1005	Future keywords should not be used as names	S1190	\N	squid	<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions. </p>\n<p>Following keywords are marked as invalid identifiers </p>\n<table>\n  <tbody>\n    <tr>\n      <th>Keyword</th>\n      <th>Added</th>\n    </tr>\n    <tr>\n      <td><code>_</code></td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <td><code>enum</code></td>\n      <td>5.0</td>\n    </tr>\n  </tbody>\n</table>\n<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, however as\ndocumented in SONARJAVA-285, it is not easily possible to support parsing of the code for such old versions, therefore they are not supported by this\nrule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n  String _ = "";   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>	4	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	obsolete,pitfall	0	HTML	1576224548666	1576224548667	1	java
1006	Classes from "sun.*" packages should not be used	S1191	\N	squid	<p>Classes in the <code>sun.*</code> or <code>com.sun.*</code> packages are considered implementation details, and are not part of the Java API.</p>\n<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause\nproblems when moving to a different Java vendor, such as OpenJDK.</p>\n<p>Such classes are almost always wrapped by Java API classes that should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport com.sun.jna.Native;     // Noncompliant\nimport sun.misc.BASE64Encoder; // Noncompliant\n</pre>	2	\N	READY	java	LINEAR	20min	\N	per "sun" import	lock-in,pitfall	0	HTML	1576224548668	1576224548669	1	java
827	Flags enumerations should explicitly initialize all their members	S2345	\N	csharpsquid	<p>Flags enumerations should not rely on the language to initialize the values of their members. Implicit initialization will set the first member to\n0, and increment the value by one for each subsequent member. This implicit behavior does not allow members to be combined using the bitwise or\noperator in a useful way.</p>\n<p>Instead, 0 and powers of two (i.e. 1, 2, 4, 8, 16, ...) should be used to explicitly initialize all the members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[Flags]\nenum FruitType    // Noncompliant\n{\n  None,\n  Banana,\n  Orange,\n  Strawberry\n}\nclass Program\n{\n    static void Main()\n    {\n        var bananaAndStrawberry = FruitType.Banana | FruitType.Strawberry;\n        // Will display only Strawberry!\n        Console.WriteLine(bananaAndStrawberry.ToString());\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[Flags]\nenum FruitType\n{\n  None = 0,\n  Banana = 1,\n  Orange = 2,\n  Strawberry = 4\n}\nclass Program\n{\n    static void Main()\n    {\n        var bananaAndStrawberry = FruitType.Banana | FruitType.Strawberry;\n        // Will display Banana and Strawberry, as expected.\n        Console.WriteLine(bananaAndStrawberry.ToString());\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The default initialization of 0, 1, 2, 3, 4, ... matches 0, 1, 2, 4, 8 ... in the first three values, so no issue is reported if the first three\nmembers of the enumeration is not initialized.</p>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224541147	1576224541192	2	csharp
828	Track uses of "TODO" tags	S1135	\N	csharpsquid	<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void DoSomething()\n{\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>	0	\N	READY	cs	\N	\N	\N	\N	cwe	0	HTML	1576224541236	1576224541236	1	csharp
829	Enumeration type names should not have "Flags" or "Enum" suffixes	S2344	\N	csharpsquid	<p>The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nenum FooFlags // Noncompliant\n{\n    Foo = 1\n    Bar = 2\n    Baz = 4\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nenum Foo\n{\n    Foo = 1\n    Bar = 2\n    Baz = 4\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224541238	1576224541240	1	csharp
887	Overriding methods should do more than simply call the same method in the super class	S1185	S1185	php	<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Child extends Parent {\n\n  public function func($n,$m) {\n    parent::func($n$m);  // Noncompliant\n  }\n}\n\nclass Parent {\n  public function func($n, $m) {\n    // do something\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Child extends Parent {\n\n  public function func($n,$m) {\n    parent::func($n$m);\n    // do additional things...\n  }\n}\n\nclass Parent {\n  public function func($n, $m) {\n    // do something\n  }\n}\n</pre>\n<p>or</p>\n<pre>\nclass Child extends Parent {\n  // function eliminated\n}\n\nclass Parent {\n  public function func($n, $m) {\n    // do something\n  }\n}\n</pre>	1	\N	READY	php	CONSTANT_ISSUE	\N	2min	\N	clumsy,redundant	0	HTML	1576224542913	1576224542916	1	php
888	Collapsible "if" statements should be merged	S1066	S1066	php	<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  if (condition2) {\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1 &amp;&amp; condition2) {\n  ...\n}\n</pre>	2	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224542920	1576224542922	1	php
889	Expressions should not be too complex	S1067	S1067	php	<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3</p>\n<pre>\nif ((($condition1 &amp;&amp; $condition2) || ($condition3 &amp;&amp; $condition4)) &amp;&amp; $condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (my_first_condition() || my_second_condition()) &amp;&amp; my_last_condition()) { ... }\n</pre>	3	\N	READY	php	LINEAR_OFFSET	1min	5min	per complexity point above the threshold	brain-overload	0	HTML	1576224542926	1576224542928	1	php
890	Unused "private" fields should be removed	S1068	S1068	php	<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private $foo = 4;                       //foo is unused\n\n  public function compute($a) {\n    return $a * 4;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  public function compute($a) {\n    return $a * 4;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	php	CONSTANT_ISSUE	\N	5min	\N	cert,unused	0	HTML	1576224542936	1576224542939	1	php
779	Floating point numbers should not be tested for equality	S1244	\N	csharpsquid	<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.100000001f; // 0.1\ndouble d = 0.10000000000000001; // 0.1\n</pre>\n<p>(Results will vary based on compiler and compiler settings)</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error.</p>\n<p>This rule checks for the use of direct and indirect equality/inequality tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146f;\nif ( myNumber == 3.146f ) //Noncompliant. Because of floating point imprecision, this will be false\n{\n  // ...\n}\n\nif (myNumber &lt;= 3.146f &amp;&amp; mNumber &gt;= 3.146f) // Noncompliant indirect equality test\n{\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) // Noncompliant indirect inequality test\n{\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	misra	0	HTML	1576224539684	1576224539727	2	csharp
780	"Obsolete" attributes should include explanations	S1123	\N	csharpsquid	<p>The <code>Obsolete</code> attribute can be applied with or without arguments, but marking something <code>Obsolete</code> without including advice\nas to why it's obsolete or on what to use instead will lead maintainers to waste time trying to figure those things out - every single time the\nwarning is encountered.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Car\n{\n\n  [Obsolete]  // Noncompliant\n  public void CrankEngine(int turnsOfCrank)\n  { ... }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Car\n{\n\n  [Obsolete("Replaced by the automatic starter")]\n  public void CrankEngine(int turnsOfCrank)\n  { ... }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	bad-practice,obsolete	0	HTML	1576224539772	1576224539773	1	csharp
781	Redundant modifiers should not be used	S2333	\N	csharpsquid	<p>Unnecessary keywords simply clutter the code and should be removed. Specifically:</p>\n<ul>\n  <li> <code>partial</code> on type declarations that are completely defined in one place </li>\n  <li> <code>sealed</code> on members of <code>sealed</code> classes </li>\n  <li> <code>unsafe</code> method or block inside construct already marked with <code>unsafe</code>, or when there are no <code>unsafe</code>\n  constructs in the block </li>\n  <li> <code>checked</code> and <code>unchecked</code> blocks with no integral-type arithmetic operations </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic partial class MyClass // Noncompliant\n{\n  public virtual void Method()\n  {\n  }\n}\n\npublic sealed class MyOtherClass : MyClass\n{\n  public sealed override void Method() // Noncompliant\n  {\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass\n{\n  public virtual void Method()\n  {\n  }\n}\n\npublic sealed class MyOtherClass : MyClass\n{\n  public override void Method()\n  {\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	clumsy,finding,unused	0	HTML	1576224539774	1576224539775	1	csharp
638	Extensions should be in separate namespaces	S4226	\N	csharpsquid	<p>It makes little sense to create an extension method when it is possible to just add that method to the type itself.</p>\n<p>This rule raises an issue when an extension is declared in the same namespace as the type it is extending.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        // ...\n    }\n\n    public static MyExtensions\n    {\n        public static void Bar(this Foo a) // Noncompliant\n        {\n            // ...\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        // ...\n        public void Bar()\n        {\n            // ...\n        }\n    }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	confusing	0	HTML	1576224534336	1576224534338	1	csharp
639	Recursion should not be infinite	S2190	\N	csharpsquid	<p>Recursion happens when control enters a loop that has no exit. This can happen a method invokes itself, when a pair of methods invoke each other,\nor when <code>goto</code>s are used to move between two segments of code. It can be a useful tool, but unless the method includes a provision to break\nout of the recursion and <code>return</code>, the recursion will continue until the stack overflows and the program crashes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint Pow(int num, int exponent)   // Noncompliant; no condition under which pow isn't re-called\n{\n  num = num * Pow(num, exponent-1);\n  return num;  // this is never reached\n}\n\nvoid InternalRecursion(int i)\n{\n  start:\n    goto end;\n  end:\n    goto start; // Noncompliant; there's no way to break out of this method\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint Pow(int num, int exponent)\n{\n  if (exponent &gt; 1) // recursion now conditional and stop-able\n  {\n    num = num * Pow(num, exponent-1);\n  }\n  return num;\n}\n</pre>	4	\N	READY	cs	CONSTANT_ISSUE	\N	30min	\N	\N	0	HTML	1576224534340	1576224534342	2	csharp
640	SHA-1 and Message-Digest hash algorithms should not be used	S2070	\N	csharpsquid	<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,\nit takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash\nvalue gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,\nMD4, MD6.</p>\n<p>This rule tracks usage of the <code>System.Security.Cryptography.CryptoConfig.CreateFromName()</code>, and\n<code>System.Security.Cryptography.HashAlgorithm.Create()</code> methods to instantiate MD5 or SHA-1 algorithms, and of derived class instances of\n<code>System.Security.Cryptography.SHA1</code> and <code>System.Security.Cryptography.MD5</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar hashProvider1 = new MD5CryptoServiceProvider(); //Noncompliant\nvar hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName("MD5"); //Noncompliant\nvar hashProvider3 = new SHA1Managed(); //Noncompliant\nvar hashProvider4 = HashAlgorithm.Create("SHA1"); //Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar hashProvider1 = new SHA256Managed();\nvar hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName("SHA256Managed");\nvar hashProvider3 = HashAlgorithm.Create("SHA256Managed");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/328">MITRE, CWE-328</a> - Reversible One-Way Hash </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/327">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#WEAK_MESSAGE_DIGEST">MessageDigest Is Weak</a> </li>\n</ul>	3	\N	READY	cs	CONSTANT_ISSUE	\N	30min	\N	cwe,owasp-a6,sans-top25-porous	0	HTML	1576224534346	1576224534388	3	csharp
641	Objects should not be disposed more than once	S3966	\N	csharpsquid	<p>A proper implementation of <code>IDisposable.Dispose</code> should allow for it to be called multiple times on the same object, however this is not\nguaranteed and could result in an exception being thrown.</p>\n<p>It is best not to rely on this behaviour and therefore make sure an object is disposed only once on all execution paths. This is particularly true\nwhen dealing with nested <code>using</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing (Stream stream = new FileStream("file.txt", FileMode.OpenOrCreate))\n{\n    using (StreamWriter writer = new StreamWriter(stream))  // Noncompliant: 'stream' will be disposed twice\n    {\n        // Use the writer object...\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStream stream = null;\ntry\n{\n    stream = new FileStream("file.txt", FileMode.OpenOrCreate);\n    using (StreamWriter writer = new StreamWriter(stream))\n    {\n        stream = null;\n        // Use the writer object...\n    }\n}\nfinally\n{\n    if(stream != null)\n        stream.Dispose();\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	pitfall	0	HTML	1576224534434	1576224534436	1	csharp
686	"System.Uri" arguments should be used instead of strings	S4005	\N	csharpsquid	<p>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The <code>System.Uri</code>\nclass is a safe alternative and should be preferred.</p>\n<p>This rule raises an issue when a called method has a string parameter with a name containing "uri", "Uri", "urn", "Urn", "url" or "Url" and the\ndeclaring type contains a corresponding overload that takes a <code>System.Uri</code> as a parameter.</p>\n<p>When there is a choice between two overloads that differ only regarding the representation of a URI, the user should choose the overload that takes\na <code>System.Uri</code> argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class Foo\n   {\n      public void FetchResource(string uriString) { }\n      public void FetchResource(Uri uri) { }\n\n      public string ReadResource(string uriString, string name, bool isLocal) { }\n      public string ReadResource(Uri uri, string name, bool isLocal) { }\n\n      public void Main() {\n        FetchResource("http://www.mysite.com"); // Noncompliant\n        ReadResource("http://www.mysite.com", "foo-resource", true); // Noncompliant\n      }\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class Foo\n   {\n      public void FetchResource(string uriString) { }\n      public void FetchResource(Uri uri) { }\n\n      public string ReadResource(string uriString, string name, bool isLocal) { }\n      public string ReadResource(Uri uri, string name, bool isLocal) { }\n\n      public void Main() {\n        FetchResource(new Uri("http://www.mysite.com"));\n        ReadResource(new Uri("http://www.mysite.com"), "foo-resource", true);\n      }\n   }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224535336	1576224535381	1	csharp
687	Static fields should not be used in generic types	S2743	\N	csharpsquid	<p>A static field in a generic type is not shared among instances of different closed constructed types, thus\n<code>LengthLimitedSingletonCollection&lt;int&gt;.instances</code> and <code>LengthLimitedSingletonCollection&lt;string&gt;.instances</code> will\npoint to different objects, even though <code>instances</code> is seemingly shared among all <code>LengthLimitedSingletonCollection&lt;&gt;</code>\ngeneric classes.</p>\n<p>If you need to have a static field shared among instances with different generic arguments, define a non-generic base class to store your static\nmembers, then set your generic type to inherit from the base class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class LengthLimitedSingletonCollection&lt;T&gt; where T : new()\n{\n  protected const int MaxAllowedLength = 5;\n  protected static Dictionary&lt;Type, object&gt; instances = new Dictionary&lt;Type, object&gt;(); // Noncompliant\n\n  public static T GetInstance()\n  {\n    object instance;\n\n    if (!instances.TryGetValue(typeof(T), out instance))\n    {\n      if (instances.Count &gt;= MaxAllowedLength)\n      {\n        throw new Exception();\n      }\n      instance = new T();\n      instances.Add(typeof(T), instance);\n    }\n    return (T)instance;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class SingletonCollectionBase\n{\n  protected static Dictionary&lt;Type, object&gt; instances = new Dictionary&lt;Type, object&gt;();\n}\n\npublic class LengthLimitedSingletonCollection&lt;T&gt; : SingletonCollectionBase where T : new()\n{\n  protected const int MaxAllowedLength = 5;\n\n  public static T GetInstance()\n  {\n    object instance;\n\n    if (!instances.TryGetValue(typeof(T), out instance))\n    {\n      if (instances.Count &gt;= MaxAllowedLength)\n      {\n        throw new Exception();\n      }\n      instance = new T();\n      instances.Add(typeof(T), instance);\n    }\n    return (T)instance;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If the static field or property uses a type parameter, then the developer is assumed to understand that the static member is not shared among the\nclosed constructed types.</p>\n<pre>\npublic class Cache&lt;T&gt;\n{\n   private static Dictionary&lt;string, T&gt; CacheDictionary { get; set; } // Compliant\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224535427	1576224535472	1	csharp
688	Exceptions should not be thrown from property getters	S2372	\N	csharpsquid	<p>Property getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a\nmethod. </p>\n<p>It is valid to throw exceptions from indexed property getters and from property setters, which are not detected by this rule.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int Foo\n{\n    get\n    {\n        throw new Exception(); // Noncompliant\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int Foo\n{\n    get\n    {\n        return 42;\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is raised when the thrown exception derives from or is of type <code>NotImplementedException</code>, <code>NotSupportedException</code> or\n<code>InvalidOperationException</code>.</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	error-handling	0	HTML	1576224535516	1576224535517	1	csharp
735	Generic parameters not constrained to reference types should not be compared to "null"	S2955	\N	csharpsquid	<p>When constraints have not been applied to restrict a generic type parameter to be a reference type, then a value type, such as a\n<code>struct</code>, could also be passed. In such cases, comparing the type parameter to <code>null</code> would always be false, because a\n<code>struct</code> can be empty, but never <code>null</code>. If a value type is truly what's expected, then the comparison should use\n<code>default()</code>. If it's not, then constraints should be added so that no value type can be passed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate bool IsDefault&lt;T&gt;(T value)\n{\n  if (value == null) // Noncompliant\n  {\n    // ...\n  }\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate bool IsDefault&lt;T&gt;(T value)\n{\n  if(object.Equals(value, default(T)))\n  {\n    // ...\n  }\n  // ...\n}\n</pre>\n<p>or</p>\n<pre>\nprivate bool IsDefault&lt;T&gt;(T value) where T : class\n{\n  if (value == null)\n  {\n    // ...\n  }\n  // ...\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224536943	1576224536945	2	csharp
736	Deserialization methods should be provided for "OptionalField" members	S3926	\N	csharpsquid	<p>Fields marked with <code>System.Runtime.Serialization.OptionalFieldAttribute</code> are serialized just like any other field. But such fields are\nignored on deserialization, and retain the default values associated with their types. Therefore, deserialization event handlers should be declared to\nset such fields during the deserialization process.</p>\n<p>This rule raises when at least one field with the <code>System.Runtime.Serialization.OptionalFieldAttribute</code> attribute is declared but one\n(or both) of the following event handlers <code>System.Runtime.Serialization.OnDeserializingAttribute</code> or\n<code>System.Runtime.Serialization.OnDeserializedAttribute</code> are not present.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[Serializable]\npublic class Foo\n{\n    [OptionalField(VersionAdded = 2)]\n    int optionalField = 5;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[Serializable]\npublic class Foo\n{\n    [OptionalField(VersionAdded = 2)]\n    int optionalField = 5;\n\n    [OnDeserializing]\n    void OnDeserializing(StreamingContext context)\n    {\n\t    optionalField = 5;\n    }\n\n    [OnDeserialized]\n    void OnDeserialized(StreamingContext context)\n    {\n        // Set optionalField if dependent on other deserialized values.\n    }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	serialization	0	HTML	1576224536948	1576224536992	2	csharp
737	"ISerializable" should be implemented correctly	S3925	\N	csharpsquid	<p>The <code>ISerializable</code> interface is the mechanism to control the type serialization process. If not implemented correctly this could result\nin an invalid serialization and hard to detect bugs.</p>\n<p>This rules raises an issue on types that implement <code>ISerializable</code> without following the serialization pattern recommended by\nMicrosoft.</p>\n<p>Specifically this rule checks for these problems:</p>\n<ul>\n  <li> The <code>System.SerializableAttribute</code> attribute is missing. </li>\n  <li> Non-serializable fields are not marked with the <code>System.NonSerializedAttribute</code> attribute. </li>\n  <li> There is no serialization constructor. </li>\n  <li> An unsealed type has a serialization constructor that is not <code>protected</code>. </li>\n  <li> A sealed type has a serialization constructor that is not <code>private</code>. </li>\n  <li> An unsealed type has a <code>ISerializable.GetObjectData</code> that is not both <code>public</code> and <code>virtual</code>. </li>\n  <li> A derived type has a serialization constructor that does not call the <code>base</code> constructor. </li>\n  <li> A derived type has a <code>ISerializable.GetObjectData</code> method that does not call the <code>base</code> method. </li>\n  <li> A derived type has serializable fields but the <code>ISerializable.GetObjectData</code> method is not overridden. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo : ISerializable // Noncompliant the [Serializable] attribute is missing\n{\n}\n</pre>\n<p>or</p>\n<pre>\npublic class Bar\n{\n}\n\n[Serializable]\npublic class Foo : ISerializable // Noncompliant the serialization constructor is missing\n{\n    private readonly Bar bar; // Noncompliant the field is not marked with [NonSerialized]\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Bar\n{\n}\n\n[Serializable]\npublic class Foo : ISerializable\n{\n    [NonSerialized]\n    private readonly Bar bar;\n\n    public Foo()\n    {\n        // ...\n    }\n\n    protected Foo(SerializationInfo info, StreamingContext context)\n    {\n        // ...\n    }\n\n    public virtual void GetObjectData(SerializationInfo info, StreamingContext context)\n    {\n        // ...\n    }\n}\n\n[Serializable]\npublic sealed class SubFoo : Foo\n{\n    private int val;\n\n    public SubFoo()\n    {\n        // ...\n    }\n\n    private SubFoo(SerializationInfo info, StreamingContext context)\n        : base(info, context)\n    {\n        // ...\n    }\n\n    public override void GetObjectData(SerializationInfo info, StreamingContext context)\n    {\n        base.GetObjectData(info, context);\n        // ...\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Classes in test projects are not checked. </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	pitfall	0	HTML	1576224537044	1576224537092	1	csharp
782	Instance members should not write to "static" fields	S2696	\N	csharpsquid	<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. </p>\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method or property.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  private static int count = 0;\n\n  public void DoSomething()\n  {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	multi-threading	0	HTML	1576224539777	1576224539778	1	csharp
783	Boolean literals should not be redundant	S1125	\N	csharpsquid	<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n\nfor (var x = 0; true; x++)\n{\n ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n\nfor (var x = 0; ; x++)\n{\n ...\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224539779	1576224539781	1	csharp
784	Tests should include assertions	S2699	\N	csharpsquid	<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the\ncode under test.</p>\n<p>This rule raises an exception when no assertions from any of the following frameworks are found in a test:</p>\n<ul>\n  <li> <code>MSTest</code> </li>\n  <li> <code>NUnit</code> </li>\n  <li> <code>XUnit</code> </li>\n  <li> <code>FluentAssertions</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[TestMethod]\npublic void MyMethod_WhenSomething_ExpectsSomething()\n{\n    var myClass = new Class();\n    var result = myClass.GetFoo();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[TestMethod]\npublic void MyMethod_WhenSomething_ExpectsSomething()\n{\n    var myClass = new Class();\n    var result = myClass.GetFoo();\n    Assert.IsTrue(result);\n}\n</pre>	4	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	tests	0	HTML	1576224539782	1576224539783	1	csharp
642	Methods with "Pure" attribute should return a value	S3603	\N	csharpsquid	<p>Marking a method with the <code>[Pure]</code> attribute specifies that the method doesn't make any visible changes; thus, the method should return\na result, otherwise the call to the method should be equal to no-operation. So <code>[Pure]</code> on a <code>void</code> method is either a mistake,\nor the method doesn't do any meaningful task.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Person\n{\n  private int age;\n  [Pure] // Noncompliant. In this case the method makes a possibly visible state change\n  void ConfigureAge(int age)\n  {\n    ...\n    this.age = age;\n  }\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Person\n{\n  private int age;\n\n  void ConfigureAge(int age)\n  {\n    ...\n    this.age = age;\n  }\n  ...\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224534439	1576224534441	2	csharp
643	"IDisposables" created in a "using" statement should not be returned	S2997	\N	csharpsquid	<p>Typically you want to use <code>using</code> to create a local <code>IDisposable</code> variable; it will trigger disposal of the object when\ncontrol passes out of the block's scope. The exception to this rule is when your method returns that <code>IDisposable</code>. In that case\n<code>using</code> disposes of the object before the caller can make use of it, likely causing exceptions at runtime. So you should either remove\n<code>using</code> or avoid returning the <code>IDisposable</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic FileStream WriteToFile(string path, string text)\n{\n  using (var fs = File.Create(path)) // Noncompliant\n  {\n    var bytes = Encoding.UTF8.GetBytes(text);\n    fs.Write(bytes, 0, bytes.Length);\n    return fs;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic FileStream WriteToFile(string path, string text)\n{\n  var fs = File.Create(path);\n  var bytes = Encoding.UTF8.GetBytes(text);\n  fs.Write(bytes, 0, bytes.Length);\n  return fs;\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224534442	1576224534444	2	csharp
644	The ternary operator should not return the same value regardless of the condition	S2758	\N	csharpsquid	<p>When the second and third operands of a ternary operator are the same, the operator will always return the same value regardless of the condition.\nEither the operator itself is pointless, or a mistake was made in coding it. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic bool CanVote(Person person)\n{\n  return person.GetAge() &gt; 18 ? true : true; // Noncompliant; is this what was intended?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic bool CanVote(Person person)\n{\n  return person.GetAge() &gt; 18 ? true : false;\n  // or even better:\n  // return person.GetAge() &gt; 18;\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:csharpsquid:S1871} instead.</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224534445	1576224534446	2	csharp
645	Member initializer values should not be redundant	S3604	\N	csharpsquid	<p>Fields, properties and events can be initialized either inline or in the constructor. Initializing them inline and in the constructor at the same\ntime is redundant; the inline initialization will be overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Person\n{\n  int age = 42; // Noncompliant\n  public Person(int age)\n  {\n    this.age = age;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Person\n{\n  int age;\n  public Person(int age)\n  {\n    this.age = age;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't report an issue if not all constructors initialize the field. If the field is initialized inline to its default value, then\n{rule:csharpsquid:S3052} already reports an issue on the initialization. </p>	1	\N	READY	cs	CONSTANT_ISSUE	\N	1min	\N	\N	0	HTML	1576224534448	1576224534449	1	csharp
689	Literal suffixes should be upper case	S818	\N	csharpsquid	<p>Using upper case literal suffixes removes the potential ambiguity between "1" (digit 1) and "l" (letter el) for declaring literals.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst long b = 0l;      // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst long b = 0L;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case </li>\n  <li> MISRA C:2012, 7.3 - The lowercase character "l" shall not be used in a literal suffix </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/koAtAQ">CERT DCL16-C.</a> - Use "L," not "l," to indicate a long value </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/n4AtAQ">CERT DCL16-CPP.</a> - Use "L," not "l," to indicate a long value </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/hYClBg">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	cert,convention,misra,pitfall	0	HTML	1576224535519	1576224535520	1	csharp
690	Arguments of public methods should be validated against null	S3900	\N	csharpsquid	<p>A public method can be called from anywhere, which means you should validate parameters to be within the expected constraints. In general, checking\nagainst <code>null</code> is recommended defensive programming.</p>\n<p>This rule raises an issue when a parameter of public method is not validated against <code>null</code> before being dereferenced.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n    private MyOtherClass other;\n\n    public void Foo(MyOtherClass other)\n    {\n        this.other = other; // Compliant: other not being dereferenced\n    }\n\n    public void Bar(MyOtherClass other)\n    {\n        this.other = other.Clone(); // Noncompliant\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass\n{\n    private MyOtherClass other;\n\n    public void Foo(MyOtherClass other)\n    {\n        this.other = other; // Compliant: other not being dereferenced\n    }\n\n    public void Bar(MyOtherClass other)\n    {\n        if (other != null)\n        {\n            this.other = other.Clone();\n        }\n    }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224535521	1576224535522	1	csharp
738	Parameter names used into ArgumentException constructors should match an existing one	S3928	\N	csharpsquid	<p>Some constructors of the <code>ArgumentException</code>, <code>ArgumentNullException</code>, <code>ArgumentOutOfRangeException</code> and\n<code>DuplicateWaitObjectException</code> classes must be fed with a valid parameter name. This rule raises an issue in two cases:</p>\n<ul>\n  <li> When this parameter name doesn't match any existing ones. </li>\n  <li> When a call is made to the default (parameterless) constructor </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void Foo(Bar a, int[] b)\n{\n  throw new ArgumentException(); // Noncompliant\n  throw new ArgumentException("My error message", "c"); // Noncompliant\n  throw new ArgumentException("My error message", "c", innerException); // Noncompliant\n  throw new ArgumentNullException("c"); // Noncompliant\n  throw new ArgumentNullException("My error message", "c"); // Noncompliant\n  throw new ArgumentOutOfRangeException("c");\n  throw new ArgumentOutOfRangeException("c", "My error message"); // Noncompliant\n  throw new ArgumentOutOfRangeException("c", b, "My error message"); // Noncompliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule won't raise an issue if the parameter name is not a constant value (inline declaration, nameof() or const variable).</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224537139	1576224537185	1	csharp
739	Serialization event handlers should be implemented correctly	S3927	\N	csharpsquid	<p>Serialization event handlers that don't have the correct signature will simply not be called, thus bypassing any attempts to augment the automated\nde/serialization.</p>\n<p>This rule raises issue when a method marked with one of the following attributes is not <code>private</code>, does not return <code>void</code>,\nhas type parameters, or does not have a single parameter of type <code>System.Runtime.Serialization.StreamingContext</code>:</p>\n<ul>\n  <li> <code>System.Runtime.Serialization.OnSerializingAttribute</code> </li>\n  <li> <code>System.Runtime.Serialization.OnSerializedAttribute</code> </li>\n  <li> <code>System.Runtime.Serialization.OnDeserializingAttribute</code> </li>\n  <li> <code>System.Runtime.Serialization.OnDeserializedAttribute</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[Serializable]\npublic class Foo\n{\n    [OnSerializing]\n    public void OnSerializing(StreamingContext context) {} // Noncompliant should be private\n\n    [OnSerialized]\n    int OnSerialized(StreamingContext context) {} // Noncompliant should return void\n\n    [OnDeserializing]\n    void OnDeserializing() {} // Noncompliant should have a single parameter of type StreamingContext\n\n    [OnSerializing]\n    public void OnSerializing2&lt;T&gt;(StreamingContext context) {} // Noncompliant should have no type parameters\n\n    [OnDeserialized]\n    void OnDeserialized(StreamingContext context, string str) {} // Noncompliant should have a single parameter of type StreamingContext\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[Serializable]\npublic class Foo\n{\n    [OnSerializing]\n    void OnSerializing(StreamingContext context) {}\n\n    [OnSerialized]\n    void OnSerialized(StreamingContext context) {}\n\n    [OnDeserializing]\n    void OnDeserializing(StreamingContext context) {}\n\n    [OnDeserialized]\n    void OnDeserialized(StreamingContext context) {}\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224537231	1576224537277	2	csharp
592	Parameter names should not duplicate the names of their methods	S3872	\N	csharpsquid	<p>The name of a method should communicate what it does, and the names of its parameters should indicate how they're used. If a method and its\nparameter have the same name it is an indication that one of these rules of thumb has been broken, if not both. Even if by some trick of language\nthat's not the case, it is still likely to confuse callers and maintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void Login(string login)  // Noncompliant\n{\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void Login(string userName)\n{\n  //...\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	confusing,convention	0	HTML	1576224533247	1576224533249	1	csharp
593	Custom attributes should be marked with "System.AttributeUsageAttribute"	S3993	\N	csharpsquid	<p>When defining custom attributes, <code>System.AttributeUsageAttribute</code> must be used to indicate where the attribute can be applied. This will\ndetermine its valid locations in the code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n\n   public sealed class MyAttribute :Attribute // Noncompliant\n   {\n      string text;\n\n      public MyAttribute(string myText)\n      {\n         text = myText;\n      }\n      public string Text\n      {\n         get\n         {\n            return text;\n         }\n      }\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n\n   [AttributeUsage(AttributeTargets.Class | AttributeTargets.Enum | AttributeTargets.Interface | AttributeTargets.Delegate)]\n   public sealed class MyAttribute :Attribute\n   {\n      string text;\n\n      public MyAttribute(string myText)\n      {\n         text = myText;\n      }\n      public string Text\n      {\n         get\n         {\n            return text;\n         }\n      }\n   }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	api-design	0	HTML	1576224533251	1576224533253	1	csharp
594	An abstract class should have both abstract and concrete methods	S1694	\N	csharpsquid	<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>\n<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the\n<code>abstract</code> keyword) with a private constructor.</p>\n<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Animal //Noncompliant; should be an interface\n{\n  abstract void Move();\n  abstract void Feed();\n}\n\npublic abstract class Color //Noncompliant; should be concrete with a private constructor\n{\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  public int GetRed()\n  {\n    return red;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Animal\n{\n  void Move();\n  void Feed();\n}\n\npublic class Color\n{\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  private Color()\n  {}\n\n  public int GetRed()\n  {\n    return red;\n  }\n}\n\npublic abstract class Lamp\n{\n  private bool switchLamp = false;\n\n  public abstract void Glow();\n\n  public void FlipSwitch()\n  {\n    switchLamp = !switchLamp;\n    if (switchLamp)\n    {\n      Glow();\n    }\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224533255	1576224533299	1	csharp
646	Multidimensional arrays should not be used	S3967	\N	csharpsquid	<p>A jagged array is an array whose elements are arrays. It is recommended over a multidimensional array because the arrays that make up the elements\ncan be of different sizes, which avoids wasting memory space.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint [,] myArray =  // Noncompliant\n    {\n        {1,2,3,4},\n        {5,6,7,0},\n        {8,0,0,0},\n        {9,0,0,0}\n    };\n// ...\nmyArray[1,1] = 0;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint[][] myArray =\n    {\n        new int[] {1,2,3,4},\n        new int[] {5,6,7},\n        new int[] {8},\n        new int[] {9}\n    };\n// ...\nmyArray[1][1] = 0;\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	design	0	HTML	1576224534451	1576224534451	1	csharp
647	"=+" should not be used instead of "+="	S2757	\N	csharpsquid	<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=\\!</code> ) where the reversed, single operator was meant (<code>+=</code>,\n<code>-=</code> or <code>\\!=</code>) will compile and run, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when\nthere is at least one whitespace character after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget =- num;  // Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; // Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget = -num;  // Compliant; intent to assign inverse value of num is clear\ntarget += num;\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224534452	1576224534453	2	csharp
648	Track uses of in-source issue suppressions	S1309	\N	csharpsquid	<p>This rule allows you to track the usage of the <code>SuppressMessage</code> attributes and <code>#pragma warning disable</code> mechanism.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[SuppressMessage("", "S100")]\n...\n\n#pragma warning disable S100\n...\n#pragma warning restore S100\n</pre>	0	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224534455	1576224534457	1	csharp
649	Statements should be on separate lines	S122	\N	csharpsquid	<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) DoSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition)\n{\n  DoSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Anonymous functions containing a single statement are ignored. Block statements are not considered either.</p>\n<pre>\nFunc&lt;object, bool&gt; item1 = o =&gt; { return true; }; // Compliant\nFunc&lt;object, bool&gt; item1 = o =&gt; { var r = false; return r; }; // Noncompliant\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	1min	\N	style	0	HTML	1576224534458	1576224534459	1	csharp
691	Classes with "IDisposable" members or native resources should implement "IDisposable"	S2931	\N	csharpsquid	<p>Classes with <code>IDisposable</code> members or native resources (<code>IntPtr</code>, <code>UIntPtr</code>, and <code>HandleRef</code>) are\nresponsible for cleaning up those members. Native resources shoudl be released, and <code>Dispose</code> should be called for <code>IDisposable</code>\nmethods. The best practice here is for the owning class to itself implement <code>IDisposable</code> and handle member cleanup in its own\n<code>Dispose</code> method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ResourceHolder   // Noncompliant; doesn't implement IDisposable\n{\n  private FileStream fs;  // This member is never Disposed\n  public void OpenResource(string path)\n  {\n    this.fs = new FileStream(path, FileMode.Open);\n  }\n  public void CloseResource()\n  {\n    this.fs.Close();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class ResourceHolder : IDisposable\n{\n&nbsp;&nbsp;private FileStream fs;\n&nbsp;&nbsp;public void OpenResource(string path)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;this.fs = new FileStream(path, FileMode.Open);\n&nbsp;&nbsp;}\n&nbsp;&nbsp;public void CloseResource()\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;this.fs.Close();\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;public void Dispose()\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;this.fs.Dispose();\n&nbsp;&nbsp;}\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n</ul>	4	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	cwe,denial-of-service	0	HTML	1576224535524	1576224535568	2	csharp
692	"Assembly.GetExecutingAssembly" should not be called	S3902	\N	csharpsquid	<p>Using <code>Type.Assembly</code> to get the current assembly is nearly free in terms of performance; it's a simple property access. On the other\nhand, <code>Assembly.GetExecutingAssembly()</code> can take up to 30 times as long because it walks up the call stack to find the assembly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Example\n{\n   public static void Main()\n   {\n      Assembly assem = Assembly.GetExecutingAssembly(); // Noncompliant\n      Console.WriteLine("Assembly name: {0}", assem.FullName);\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Example\n{\n   public static void Main()\n   {\n      Assembly assem = typeof(Example).Assembly; // Here we use the type of the current class\n      Console.WriteLine("Assembly name: {0}", assem.FullName);\n   }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	performance	0	HTML	1576224535614	1576224535617	1	csharp
740	Overriding members should do more than simply call the same member in the base class	S1185	\N	csharpsquid	<p>Overriding a method just to call the same method from the base class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>sealed</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores overrides\nof <code>Equals</code> and <code>GetHashCode</code>.</p>\n<p>NOTE: In some cases it might be dangerous to add or remove empty overrides, as they might be breaking changes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic override void Method() // Noncompliant\n{\n  base.Method();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic override void Method()\n{\n  //do something else\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If there is an attribute in any level of the overriding chain, then the overridden member is ignored.</p>\n<pre>\npublic class Base\n{\n  [Required]\n  public virtual string Name { get; set; }\n}\n\npublic class Derived : Base\n{\n  public override string Name\n  {\n    get\n    {\n      return base.Name;\n    }\n    set\n    {\n      base.Name = value;\n    }\n  }\n}\n</pre>\n<p>If there is a documentation comment on the overriding method, it will be ignored:</p>\n<pre>\npublic class Foo : Bar\n{\n    /// &lt;summary&gt;\n    /// Keep this method for backwards compatibility.\n    /// &lt;/summary&gt;\n    public override void DoSomething()\n    {\n        base.DoSomething();\n    }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	clumsy,redundant	0	HTML	1576224537322	1576224537369	1	csharp
741	Composite format strings should not lead to unexpected behavior at runtime	S2275	\N	csharpsquid	<p>Because composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected\nbehaviors or runtime errors. This rule statically validates the good behavior of composite formats when calling the methods of\n<code>String.Format</code>, <code>StringBuilder.AppendFormat</code>, <code>Console.Write</code>, <code>Console.WriteLine</code>,\n<code>TextWriter.Write</code>, <code>TextWriter.WriteLine</code>, <code>Debug.WriteLine(String, Object[])</code>,\n<code>Trace.TraceError(String, Object[])</code>, <code>Trace.TraceInformation(String, Object[])</code>,\n<code>Trace.TraceWarning(String, Object[])</code> and <code>TraceSource.TraceInformation(String, Object[])</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ns = string.Format("[0}", arg0);\ns = string.Format("{{0}", arg0);\ns = string.Format("{0}}", arg0);\ns = string.Format("{-1}", arg0);\ns = string.Format("{0} {1}", arg0);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ns = string.Format("{0}", 42); // Compliant\ns = string.Format("{0,10}", 42); // Compliant\ns = string.Format("{0,-10}", 42); // Compliant\ns = string.Format("{0:0000}", 42); // Compliant\ns = string.Format("{2}-{0}-{1}", 1, 2, 3); // Compliant\ns = string.Format("no format"); // Compliant\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> No issue is raised if the format string is not a <code>const</code>. </li>\n</ul>\n<pre>\nvar pattern = "{0} {1} {2}";\nvar res = string.Format(pattern, 1, 2); // Compliant, not const string are not recognized\n</pre>\n<ul>\n  <li> No issue is raised if the argument is not an inline creation array. </li>\n</ul>\n<pre>\nvar array = new int[] {};\nvar res = string.Format("{0} {1}", array); // Compliant we don't know the size of the array\n</pre>\n<ul>\n  <li> This rule doesn't check whether the format specifier (defined after the <code>:</code>) is actually valid. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/wQA1">CERT, FIO47-C.</a> - Use valid format strings </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/e4EyAQ">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>\n</ul>	4	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	cert,pitfall	0	HTML	1576224537414	1576224537462	2	csharp
742	Methods should not be empty	S1186	\N	csharpsquid	<p>There are several reasons for a method not to have a method body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed. </li>\n  <li> It is not yet, or never will be, supported. In this case a <code>NotSupportedException</code> should be thrown. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic override void DoSomething()\n{\n}\n\npublic override void DoSomethingElse()\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic override void DoSomething()\n{\n  // Do nothing because of X and Y.\n}\n\npublic override void DoSomethingElse()\n{\n  throw new NotSupportedException();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The following methods are ignored:</p>\n<ul>\n  <li> empty <code>virtual</code> methods, </li>\n  <li> empty methods that override an <code>abstract</code> method, </li>\n  <li> empty overrides in test assemblies. </li>\n</ul>	3	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224537511	1576224537514	1	csharp
595	"Equals" and the comparison operators should be overridden when implementing "IComparable"	S1210	\N	csharpsquid	<p>When you implement <code>IComparable</code> or <code>IComparable&lt;T&gt;</code> on a class you should also override <code>Equals(object)</code>\nand overload the comparison operators (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>,\n<code>&gt;=</code>). That's because the CLR cannot automatically call your <code>CompareTo</code> implementation from <code>Equals(object)</code> or\nfrom the base comparison operator implementations. Additionally, it is best practice to override <code>GetHashCode</code> along with\n<code>Equals</code>.</p>\n<p>This rule raises an issue when a class implements <code>IComparable</code> without also overriding <code>Equals(object)</code> and the comparison\noperators.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo: IComparable  // Noncompliant\n{\n  public int CompareTo(object obj) { /* ... */ }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo: IComparable\n{\n  public int CompareTo(object obj) { /* ... */ }\n  public override bool Equals(object obj)\n  {\n    var other = obj as Foo;\n    if (object.ReferenceEquals(other, null))\n    {\n      return false;\n    }\n    return this.CompareTo(other) == 0;\n  }\n  public int GetHashCode() { /* ... */ }\n  public static bool operator == (Foo left, Foo right)\n  {\n    if (object.ReferenceEquals(left, null))\n    {\n      return object.ReferenceEquals(right, null);\n    }\n    return left.Equals(right);\n  }\n  public static bool operator &gt; (Foo left, Foo right)\n  {\n    return Compare(left, right) &gt; 0;\n  }\n  public static bool operator &lt; (Foo left, Foo right)\n  {\n    return Compare(left, right) &lt; 0;\n  }\n  public static bool operator != (Foo left, Foo right)\n  {\n    return !(left == right);\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224533344	1576224533388	1	csharp
596	Exception types should be "public"	S3871	\N	csharpsquid	<p>The point of having custom exception types is to convey more information than is available in standard types. But custom exception types must be\n<code>public</code> for that to work. </p>\n<p>If a method throws a non-public exception, the best you can do on the caller's side is to <code>catch</code> the closest <code>public</code> base\nof the class. That is, you lose all that custom information you created the exception type to pass. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninternal class MyException : Exception   // Noncompliant\n{\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException : Exception\n{\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores Exception types that are not derived directly from <code>System.Exception</code>, <code>System.SystemException</code>, or\n<code>System.ApplicationException</code>.</p>	3	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	api-design,error-handling	0	HTML	1576224533435	1576224533438	1	csharp
597	Assemblies should explicitly specify COM visibility	S3992	\N	csharpsquid	<p>Assemblies should explicitly indicate whether they are meant to be COM visible or not. If the <code>ComVisibleAttribute</code> is not present, the\ndefault is to make the content of the assembly visible to COM clients.</p>\n<p>Note that COM visibility can be overridden for individual types and members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary  // Noncompliant\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\n[assembly: System.Runtime.InteropServices.ComVisible(false)]\nnamespace MyLibrary\n{\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	1min	\N	api-design	0	HTML	1576224533442	1576224533445	1	csharp
650	Modulus results should not be checked for direct equality	S2197	\N	csharpsquid	<p>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for\nequality with a positive number (or a negative one) could result in unexpected results. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic bool IsOdd(int x)\n{\n  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic bool IsOdd(int x)\n{\n  return x %2 != 0;\n}\n</pre>\n<p>or</p>\n<pre>\npublic bool IsOdd(uint x)\n{\n  return x %2 == 1;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/xAHAAQ">CERT, NUM51-J.</a> - Do not assume that the remainder operator always returns a\n  nonnegative result for integral operands </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NQBi">CERT, INT10-C</a> - Do not assume a positive remainder when using the % operator\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/_YBLAQ">CERT, INT10-CPP.</a> - Do not assume a positive remainder when using the %\n  operator </li>\n</ul>	3	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert,suspicious	0	HTML	1576224534461	1576224534462	1	csharp
651	"async" methods should not return "void"	S3168	\N	csharpsquid	<p>An <code>async</code> method with a <code>void</code> return type is a "fire and forget" method best reserved for event handlers because there's no\nway to wait for the method's execution to complete and respond accordingly. There's also no way to <code>catch</code> exceptions thrown from the\nmethod.</p>\n<p>Having an <code>async void</code> method that is not an event handler could mean your program works some times and not others because of timing\nissues. Instead, <code>async</code> methods should return <code>Task</code>.</p>\n<p>This rule raises an issue when non-event handler methods are both <code>async</code> and <code>void</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass HttpPrinter\n{\n  private string content;\n\n  public async void CallNetwork(string url) //Noncompliant\n  {\n    var client = new HttpClient();\n    var response = await client.GetAsync(url);\n    content = await response.Content.ReadAsStringAsync();\n  }\n\n  public async Task PrintContent(string url)  // works correctly if web request finishes in under 1 second, otherwise content will be null\n  {\n    CallNetwork(url);\n    await Task.Delay(1000);\n    Console.Write(content);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass HttpPrinter\n{\n  private string content;\n\n  public async Task CallNetwork(string url)\n  {\n    var client = new HttpClient();\n    var response = await client.GetAsync(url);\n    content = await response.Content.ReadAsStringAsync();\n  }\n\n  public async Task PrintContent(string url)\n  {\n    await CallNetwork(url); // &lt;----- call changed here. If await is not added warning CS4014 will be triggered\n    await Task.Delay(1000);\n    Console.Write(content);\n  }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	multi-threading	0	HTML	1576224534463	1576224534507	2	csharp
693	Property assignments should not be made for "readonly" fields not constrained to reference types	S2934	\N	csharpsquid	<p>While the properties of a <code>readonly</code> reference type field can still be changed after initialization, those of a <code>readonly</code>\nvalue field, such as a <code>struct</code>, cannot. </p>\n<p>If the member could be either a <code>class</code> or a <code>struct</code> then assignment to its properties could be unreliable, working\nsometimes but not others.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface IPoint\n{\n  int X { get; set; }\n  int Y { get; set; }\n}\n\nclass PointManager&lt;T&gt; where T: IPoint\n{\n  readonly T point;  // this could be a struct\n  public PointManager(T point)\n  {\n    this.point = point;\n  }\n\n  public void MovePointVertically(int newX)\n  {\n    point.X = newX; //Noncompliant; if point is a struct, then nothing happened\n    Console.WriteLine(point.X);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ninterface IPoint\n{\n  int X { get; set; }\n  int Y { get; set; }\n}\n\nclass PointManager&lt;T&gt; where T : IPoint\n{\n  readonly T point;  // this could be a struct\n  public PointManager(T point)\n  {\n    this.point = point;\n  }\n\n  public void MovePointVertically(int newX) // assignment has been removed\n  {\n    Console.WriteLine(point.X);\n  }\n}\n</pre>\n<p>or</p>\n<pre>\ninterface IPoint\n{\n  int X { get; set; }\n  int Y { get; set; }\n}\n\nclass PointManager&lt;T&gt; where T : class, IPoint\n{\n  readonly T point;  // this can only be a class\n  public PointManager(T point)\n  {\n    this.point = point;\n  }\n\n  public void MovePointVertically(int newX)\n  {\n    point.X = newX;  // this assignment is guaranteed to work\n    Console.WriteLine(point.X);\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	\N	0	HTML	1576224535621	1576224535664	2	csharp
694	Fields that are only assigned in the constructor should be "readonly"	S2933	\N	csharpsquid	<p><code>readonly</code> fields can only be assigned in a class constructor. If a class has a field that's not marked <code>readonly</code> but is\nonly set in the constructor, it could cause confusion about the field's intended use. To avoid confusion, such fields should be marked\n<code>readonly</code> to make their intended use explicit, and to prevent future maintainers from inadvertently changing their use.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Person\n{\n  int _birthYear;  // Noncompliant\n  Person(int birthYear)\n  {\n    _birthYear = birthYear;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Person\n{\n  readonly int _birthYear;\n  Person(int birthYear)\n  {\n    _birthYear = birthYear;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Fields with attributes are ignored.</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	confusing	0	HTML	1576224535708	1576224535709	1	csharp
695	Assemblies should have version information	S3904	\N	csharpsquid	<p>If no <code>AssemblyVersionAttribute</code> is provided, the same default version will be used for every build. Since the version number is used by\nThe .NET Framework to uniquely identify an assembly this can lead to broken dependencies.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Reflection;\n\n[assembly: AssemblyTitle("MyAssembly")] // Noncompliant\n\nnamespace MyLibrary\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Reflection;\n\n[assembly: AssemblyTitle("MyAssembly")]\n[assembly: AssemblyVersionAttribute("1.2.125.0")]\n\nnamespace MyLibrary\n{\n}\n</pre>\n<h2>See</h2>\n<p><a href="https://msdn.microsoft.com/en-us/library/51ket42z.aspx">Assembly Versioning (MSDN)</a></p>	3	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	pitfall	0	HTML	1576224535710	1576224535711	1	csharp
743	Method parameters should be declared with base types	S3242	\N	csharpsquid	<p>When a derived type is used as a parameter instead of the base type, it limits the uses of the method. If the additional functionality that is\nprovided in the derived type is not requires then that limitation isn't required, and should be removed.</p>\n<p>This rule raises an issue when a method declaration includes a parameter that is a derived type and accesses only members of the base type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.IO;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void ReadStream(FileStream stream) // Noncompliant: Uses only System.IO.Stream methods\n    {\n      int a;\n      while ((a = stream.ReadByte()) != -1)\n      {\n            // Do something.\n      }\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.IO;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void ReadStream(Stream stream)\n    {\n      int a;\n      while ((a = stream.ReadByte()) != -1)\n      {\n            // Do something.\n      }\n    }\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	api-design	0	HTML	1576224537520	1576224537524	1	csharp
744	Collapsible "if" statements should be merged	S1066	\N	csharpsquid	<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1)\n{\n  if (condition2)\n  {\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1 &amp;&amp; condition2)\n{\n  ...\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224537528	1576224537530	1	csharp
745	"sealed" classes should not have "protected" members	S2156	\N	csharpsquid	<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>\nmembers, but they cannot see <code>private</code> ones. Since a <code>sealed</code> class cannot have children, marking its members\n<code>protected</code> is confusingly pointless.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic sealed class MySealedClass\n{\n    protected string name = "Fred";  // Noncompliant\n    protected void SetName(string name) // Noncompliant\n    {\n        // ...\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic sealed class MySealedClass\n{\n    private string name = "Fred";\n    public void SetName(string name)\n    {\n        // ...\n    }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	confusing	0	HTML	1576224537532	1576224537534	1	csharp
746	Anonymous delegates should not be used to unsubscribe from Events	S3244	\N	csharpsquid	<p>It is possible to subscribe to events with anonymous delegates, but having done so, it is impossible to unsubscribe from them. That's because the\nprocess of subscribing adds the delegate to a list. The process of unsubscribing essentially says: remove <em>this item</em> from the subscription\nlist. But because an anonymous delegate was used in both cases, the unsubscribe attempt tries to remove a different item from the list than was added.\nThe result: <code>NOOP</code>.</p>\n<p>Instead, save the delegate to a variable and use the variable to subscribe and unsubscribe.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlistView.PreviewTextInput += (obj,args) =&gt;\n        listView_PreviewTextInput(obj,args,listView);\n\n// ...\n\nlistView.PreviewTextInput -= (obj, args) =&gt;\n        listView_PreviewTextInput(obj, args, listView); // Noncompliant; this delegate was never subscribed\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nEventHandler func = (obj,args) =&gt; listView_PreviewTextInput(obj,args,listView);\n\nlistView.PreviewTextInput += func;\n\n// ...\n\nlistView.PreviewTextInput -= func;\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224537536	1576224537537	2	csharp
598	Generics should be used when appropriate	S4047	\N	csharpsquid	<p>When a reference parameter (keyword <code>ref</code>) is used, the passed argument type must exactly match the reference parameter type. This means\nthat to be able to pass a derived type, it must be cast and assigned to a variable of the proper type. Use of generic methods eliminates that\ncumbersome down casting and should therefore be preferred.</p>\n<p>This rule raises an issue when a method contains a <code>ref</code> parameter of type <code>System.Object</code>.</p>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void Bar&lt;T&gt;(ref T ref1, ref T ref2)\n    {\n    }\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224533448	1576224533451	1	csharp
599	"out" and "ref" parameters should not be used	S3874	\N	csharpsquid	<p>Passing a parameter by reference, which is what happens when you use the <code>out</code> or <code>ref</code> parameter modifiers, means that the\nmethod will receive a pointer to the argument, rather than the argument itself. If the argument was a value type, the method will be able to change\nthe argument's values. If it was a reference type, then the method receives a pointer to a pointer, which is usually not what was intended. Even when\nit is what was intended, this is the sort of thing that's difficult to get right, and should be used with caution.</p>\n<p>This rule raises an issue when <code>out</code> or <code>ref</code> is used on a non-<code>Optional</code> parameter in a public method.\n<code>Optional</code> parameters are covered by S3447.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void GetReply(\n         ref MyClass input, // Noncompliant\n         out string reply)  // Noncompliant\n{ ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic string GetReply(MyClass input)\n{ ... }\n\npublic bool TryGetReply(MyClass input, out string reply)\n{ ... }\n\npublic ReplyData GetReply(MyClass input)\n{ ... }\n\ninternal void GetReply(ref MyClass input, out string reply)\n{ ... }\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise issues for:</p>\n<p>- non-public methods</p>\n<p>- methods with only 'out' parameters, name starting with "Try" and return type bool.</p>	3	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	suspicious	0	HTML	1576224533455	1576224533501	1	csharp
600	URI return values should not be strings	S3995	\N	csharpsquid	<p>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The <code>System.Uri</code>\nclass is a safe alternative and should be preferred.</p>\n<p>This rule raises an issue when a method has a <code>string</code> return type and its name contains "Uri", "Urn", or "Url" or begins with "uri",\n"urn", or "url".</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      public string GetParentUri() // Noncompliant\n      {\n         return "http://www.mysite.com";\n      }\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n\n      public Uri GetParentUri()\n      {\n         return new URI("http://www.mysite.com");\n      }\n   }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224533546	1576224533548	1	csharp
652	Inherited member visibility should not be decreased	S4015	\N	csharpsquid	<p>Changing an inherited member to <code>private</code> will not prevent access to the base class implementation.</p>\n<p>This rule raises an issue when a <code>private</code> method in an unsealed type has a signature that is identical to a <code>public</code> method\ndeclared in a base type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void SomeMethod(int count) { }\n  }\n  public class Bar:Foo\n  {\n    private void SomeMethod(int count) { } // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void SomeMethod(int count) { }\n  }\n  public sealed class Bar : Foo\n  {\n    private void SomeMethod(int count) { }\n  }\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	pitfall	0	HTML	1576224534554	1576224534556	1	csharp
653	Control structures should use curly braces	S121	\N	csharpsquid	<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// the two statements seems to be attached to the if statement, but that is only true for the first one:\nif (condition)\n  ExecuteSomething();\n  CheckSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition)\n{\n  ExecuteSomething();\n  CheckSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>	3	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	cert,misra,pitfall	0	HTML	1576224534559	1576224534604	1	csharp
654	Method signatures should not contain nested generic types	S4017	\N	csharpsquid	<p>A nested type is a type argument that is also a generic type. Calling a method with such a nested type argument requires complicated and confusing\ncode. It should be avoided as much as possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Collections.Generic;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void DoSomething(ICollection&lt;ICollection&lt;int&gt;&gt; outerCollect) // Noncompliant\n    {\n    }\n  }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	30min	\N	confusing	0	HTML	1576224534650	1576224534653	1	csharp
655	Methods and properties should not be too complex	S1541	\N	csharpsquid	<p>The cyclomatic complexity of methods and properties should not exceed a defined threshold. Complex code can perform poorly and will in any case be\ndifficult to understand and therefore to maintain.</p>	3	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	brain-overload	0	HTML	1576224534657	1576224534660	1	csharp
696	Types should be defined in named namespaces	S3903	\N	csharpsquid	<p>Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are\ndefined outside any named namespace are in a global namespace that cannot be referenced in code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo // Noncompliant\n{\n}\n\npublic struct Bar // Noncompliant\n{\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224535713	1576224535714	2	csharp
697	Event Handlers should have the correct signature	S3906	\N	csharpsquid	<p>Delegate event handlers (i.e. delegates used as type of an event) should have a very specific signature:</p>\n<ul>\n  <li> Return type <code>void</code>. </li>\n  <li> First argument of type <code>System.Object</code> and named 'sender'. </li>\n  <li> Second argument of type <code>System.EventArgs</code> (or any derived type) and is named 'e'. </li>\n</ul>\n<p>This rule raises an issue whenever a <code>delegate</code> declaration doesn't match that signature.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic delegate void AlarmEventHandler(object s);\n\npublic class Foo\n{\n    public event AlarmEventHandler AlarmEvent; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic delegate void AlarmEventHandler(object sender, AlarmEventArgs e);\n\npublic class Foo\n{\n    public event AlarmEventHandler AlarmEvent; // Compliant\n}\n</pre>\n<h2>See</h2>\n<p><a href="https://msdn.microsoft.com/en-us/library/edzehd2t.aspx">Handling and Raising Events</a></p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224535715	1576224535716	1	csharp
698	Objects should not be created to be dropped immediately without being used	S1848	\N	csharpsquid	<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could\nlead to an unexpected behavior in production.</p>\n<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate, static method and\ncalled directly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x &lt; 0)\n  new ArgumentException("x must be nonnegative");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x &lt; 0)\n  throw new ArgumentException("x must be nonnegative");\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224535718	1576224535719	2	csharp
699	Tests should not be ignored	S1607	\N	csharpsquid	<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.</p>\n<p>This rule raises an issue for each ignored test that does not have a <code>WorkItem</code> attribute nor a comment about why it is being skipped on\nthe right side of the <code>Ignore</code> attribute.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[TestMethod]\n[Ignore]  // Noncompliant\npublic void Test_DoTheThing()\n{\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[TestMethod]\n[Ignore]  // renable when TCKT-1234 is fixed\npublic void Test_DoTheThing()\n{\n  // ...\n}\n</pre>\n<p>or</p>\n<pre>\n[TestMethod]\n[Ignore]\n[WorkItem(1234)]\npublic void Test_DoTheThing()\n{\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule doesn't raise an issue if:</p>\n<p>- the test method is also marked with <code>WorkItem</code> attribute</p>\n<p>- there is a comment on the right side of the <code>Ignore</code> attribute</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	suspicious,tests	0	HTML	1576224535720	1576224535721	1	csharp
747	Expressions should not be too complex	S1067	\N	csharpsquid	<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ((MyFirstCondition() || MySecondCondition()) &amp;&amp; MyLastCondition()) { ... }\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	3min	\N	brain-overload	0	HTML	1576224537539	1576224537540	1	csharp
748	Duplicate casts should not be made	S3247	\N	csharpsquid	<p>Because the <code>is</code> operator performs a cast if the object is not null, using <code>is</code> to check type and then casting the same\nargument to that type, necessarily performs two casts. The same result can be achieved more efficiently with a single cast using <code>as</code>,\nfollowed by a null-check.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x is Fruit)  // Noncompliant\n{\n  var f = (Fruit)x; // or x as Fruit\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar f = x as Fruit;\nif (f != null)\n{\n  // code\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	performance	0	HTML	1576224537544	1576224537545	1	csharp
749	"ThreadStatic" should not be used on non-static fields	S3005	\N	csharpsquid	<p>When a non-<code>static</code> class field is annotated with <code>ThreadStatic</code>, the code seems to show that the field can have different\nvalues for different calling threads, but that's not the case, since the <code>ThreadStatic</code> attribute is simply ignored on\nnon-<code>static</code> fields. </p>\n<p>So <code>ThreadStatic</code> should either be removed or replaced with a use of the <code>ThreadLocal&lt;T&gt;</code> class, which gives a similar\nbehavior for non-<code>static</code> fields.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  [ThreadStatic]  // Noncompliant\n  private int count = 0;\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass\n{\n  private int count = 0;\n\n  // ...\n}\n</pre>\n<p>or</p>\n<pre>\npublic class MyClass\n{\n  private readonly ThreadLocal&lt;int&gt; count = new ThreadLocal&lt;int&gt;();\n  public int Count\n  {\n    get { return count.Value; }\n    set { count.Value = value; }\n  }\n  // ...\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	unused	0	HTML	1576224537546	1576224538553	2	csharp
601	NullReferenceException should not be caught	S1696	\N	csharpsquid	<p><code>NullReferenceException</code> should be avoided, not caught. Any situation in which <code>NullReferenceException</code> is explicitly caught\ncan easily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the "is null" branch\nof the conditional.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int GetLengthPlusTwo(string str)\n{\n    int length = 2;\n    try\n    {\n       length += str.Length;\n    }\n    catch (NullReferenceException e)\n    {\n        log.info("argument was null");\n    }\n    return length;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int GetLengthPlusTwo(string str)\n{\n    int length = 2;\n\n    if (str != null)\n    {\n        length += str.Length;\n    }\n    else\n    {\n        log.info("argument was null");\n    }\n    return length;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/395.html">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer\n  Dereference </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/BIB3AQ">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors\n  </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,error-handling	0	HTML	1576224533553	1576224533557	1	csharp
602	Properties should be preferred	S4049	\N	csharpsquid	<p>Properties are accessed like fields which makes them easier to use.</p>\n<p>This rule raises an issue when the name of a <code>public</code> or <code>protected</code> method starts with <code>Get</code>, takes no parameter,\nand returns a value that is not an array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    private string name;\n\n    public string GetName()  // Noncompliant\n    {\n      return name;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    private string name;\n\n    public string Name\n    {\n      get\n      {\n        return name;\n      }\n    }\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224533562	1576224533565	1	csharp
603	URI Parameters should not be strings	S3994	\N	csharpsquid	<p>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The <code>System.Uri</code>\nclass is a safe alternative and should be preferred. At minimum, an overload of the method taking a <code>System.Uri</code> as a parameter should be\nprovided in each class that contains a method with an apparent Uri passed as a <code>string</code>.</p>\n<p>This rule raises issues when a method has a string parameter with a name containing "uri", "Uri", "urn", "Urn", "url" or "Url", and the type\ndoesn't declare a corresponding overload taking an <code>System.Uri</code> parameter instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n\n      public void FetchResource(string uriString) { } // Noncompliant\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n\n      public void FetchResource(string uriString)\n      {\n          FetchResource(new Uri(uriString));\n      }\n\n      public void FetchResource(Uri uri) { }\n   }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224533569	1576224533573	1	csharp
656	"static readonly" constants should be "const" instead	S3962	\N	csharpsquid	<p>The value of a <code>static readonly</code> field is computed at runtime while the value of a <code>const</code> field is calculated at compile\ntime, which improves performance.</p>\n<p>This rule raises an issue when a <code>static readonly</code> field is initialized with a value that is computable at compile time.</p>\n<p>As specified by Microsoft, the list of types that can have a constant value are:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>C# type</th>\n      <th>.Net Fwk type</th>\n    </tr>\n    <tr>\n      <td>bool</td>\n      <td>System.Boolean</td>\n    </tr>\n    <tr>\n      <td>byte</td>\n      <td>System.Byte</td>\n    </tr>\n    <tr>\n      <td>sbyte</td>\n      <td>System.SByte</td>\n    </tr>\n    <tr>\n      <td>char</td>\n      <td>System.Char</td>\n    </tr>\n    <tr>\n      <td>decimal</td>\n      <td>System.Decimal</td>\n    </tr>\n    <tr>\n      <td>double</td>\n      <td>System.Double</td>\n    </tr>\n    <tr>\n      <td>float</td>\n      <td>System.Single</td>\n    </tr>\n    <tr>\n      <td>int</td>\n      <td>System.Int32</td>\n    </tr>\n    <tr>\n      <td>uint</td>\n      <td>System.UInt32</td>\n    </tr>\n    <tr>\n      <td>long</td>\n      <td>System.Int64</td>\n    </tr>\n    <tr>\n      <td>ulong</td>\n      <td>System.UInt64</td>\n    </tr>\n    <tr>\n      <td>short</td>\n      <td>System.Int16</td>\n    </tr>\n    <tr>\n      <td>ushort</td>\n      <td>System.UInt16</td>\n    </tr>\n    <tr>\n      <td>string</td>\n      <td>System.String</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnamespace myLib\n{\n  public class Foo\n  {\n    static readonly int x = 1;  // Noncompliant\n    static readonly int y = x + 4; // Noncompliant\n    static readonly string s = "Bar";  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnamespace myLib\n{\n  public class Foo\n  {\n    const int x = 1;\n    const int y = x + 4;\n    const string s = "Bar";\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	performance	0	HTML	1576224534667	1576224534715	1	csharp
657	Enumeration members should not be named "Reserved"	S4016	\N	csharpsquid	<p>If an <code>enum</code> member's name contains the word "reserved" it implies it is not currently used and will be change in the future. However\nchanging an <code>enum</code> member is a breaking change and can create significant problems. There is no need to reserve an <code>enum</code> member\nsince a new member can be added in the future, and such an addition will usually not be a breaking change.</p>\n<p>This rule raises an issue when the name of an enumeration member contains "reserved".</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public enum Color\n  {\n        None,\n        Red,\n        Orange,\n        Yellow,\n        ReservedColor  // Noncompliant\n    }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224534760	1576224534761	1	csharp
700	Exceptions should not be thrown in finally blocks	S1163	\N	csharpsquid	<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code>\nblock, and the masked's exception message and stack trace will be lost.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry\n{\n  /* some work which end up throwing an exception */\n  throw new ArgumentException();\n}\nfinally\n{\n  /* clean up */\n  throw new InvalidOperationException();       // Noncompliant; will mask the ArgumentException\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry\n{\n  /* some work which end up throwing an exception */\n  throw new ArgumentException();\n}\nfinally\n{\n  /* clean up */                       // Compliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/soUbAQ">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block\n  </li>\n</ul>	3	\N	READY	cs	CONSTANT_ISSUE	\N	30min	\N	cert,error-handling,suspicious	0	HTML	1576224535722	1576224535723	1	csharp
701	Method calls should not resolve ambiguously to overloads with "params"	S3220	\N	csharpsquid	<p>The rules for method resolution are complex and perhaps not properly understood by all coders. The <code>params</code> keyword can make method\ndeclarations overlap in non-obvious ways, so that slight changes in the argument types of an invocation can resolve to different methods.</p>\n<p>This rule raises an issue when an invocation resolves to a method declaration with <code>params</code>, but could also resolve to another\nnon-<code>params</code> method too.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  private void Format(string a, params object[] b) { }\n\n  private void Format(object a, object b, object c) { }\n}\n\n// ...\nMyClass myClass = new MyClass();\n\nmyClass.Format("", null, null); //Noncompliant, resolves to the first Format with params, but was that intended?\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	pitfall	0	HTML	1576224535725	1576224535726	1	csharp
702	Write-only properties should not be used	S2376	\N	csharpsquid	<p>Properties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be\nreplaced with a setter method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Program\n{\n    public int Foo  //Non-Compliant\n    {\n        set\n        {\n            // ... some code ...\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Program\n{\n    private int foo;\n\n    public void SetFoo(int value)\n    {\n        // ... some code ...\n        foo = value;\n    }\n}\n</pre>\n<p>or</p>\n<pre>\nclass Program\n{\n  public int Foo { get; set; } // Compliant\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	pitfall	0	HTML	1576224535727	1576224535728	1	csharp
750	Generic type parameters should be co/contravariant when possible	S3246	\N	csharpsquid	<p>In the interests of making code as usable as possible, interfaces and delegates with generic parameters should use the <code>out</code> and\n<code>in</code> modifiers when possible to make the interfaces and delegates covariant and contravariant, respectively.</p>\n<p>The <code>out</code> keyword can be used when the type parameter is used only as a return type in the interface or delegate. Doing so makes the\nparameter covariant, and allows interface and delegate instances created with a sub-type to be used as instances created with a base type. The most\nnotable example of this is <code>IEnumerable&lt;out T&gt;</code>, which allows the assignment of an <code>IEnumerable&lt;string&gt;</code> instance to\nan <code>IEnumerable&lt;object&gt;</code> variable, for instance.</p>\n<p>The <code>in</code> keyword can be used when the type parameter is used only as a method parameter in the interface or a parameter in the delegate.\nDoing so makes the parameter contravariant, and allows interface and delegate instances created with a base type to be used as instances created with\na sub-type. I.e. this is the inversion of covariance. The most notable example of this is the <code>Action&lt;in T&gt;</code> delegate, which allows\nthe assignment of an <code>Action&lt;object&gt;</code> instance to a <code>Action&lt;string&gt;</code> variable, for instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface IConsumer&lt;T&gt;  // Noncompliant\n{\n    bool Eat(T fruit);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ninterface IConsumer&lt;in T&gt;\n{\n    bool Eat(T fruit);\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	api-design	0	HTML	1576224538554	1576224538596	1	csharp
751	Neither DES (Data Encryption Standard) nor DESede (3DES) should be used	S2278	\N	csharpsquid	<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>\n<blockquote>\n  <p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer\n  provides the security that is needed to protect federal government information.</p>\n  <p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>\n</blockquote>\n<p>For similar reasons, RC2 should also be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing (var tripleDES = new TripleDESCryptoServiceProvider()) //Noncompliant\n{\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing (var aes = new AesCryptoServiceProvider())\n{\n  //...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/VwAZAg">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE">DES / DESede Unsafe</a> </li>\n</ul>	4	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	cert,cwe,owasp-a6,sans-top25-porous	0	HTML	1576224538641	1576224538684	3	csharp
604	Short-circuit logic should be used to prevent null pointer dereferences in conditionals	S1697	\N	csharpsquid	<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely\nnull-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced\n<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (str == null &amp;&amp; str.Length == 0)\n{\n  Console.WriteLine("String is empty");\n}\n\nif (str != null || str.Length &gt; 0)\n{\n  Console.WriteLine("String is not empty");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (str == null || str.Length == 0)\n{\n  Console.WriteLine("String is empty");\n}\n\nif (str != null &amp;&amp; str.Length &gt; 0)\n{\n  Console.WriteLine("String is not empty");\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:csharpsquid:S2259} instead.</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224533577	1576224533580	2	csharp
605	Strings or integral types should be used for indexers	S3876	\N	csharpsquid	<p>Strings and integral types are typically used as indexers. When some other type is required, it typically indicates design problems, and\npotentially a situation where a method should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int this[MyCustomClass index]  // Noncompliant\n{\n    // get and set accessors\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	design	0	HTML	1576224533584	1576224533587	1	csharp
606	String URI overloads should call "System.Uri" overloads	S3997	\N	csharpsquid	<p>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The <code>System.Uri</code>\nclass is a safe alternative and should be preferred.</p>\n<p>This rule raises an issue when two overloads differ only by the string / <code>Uri</code> parameter and the string overload doesn't call the\n<code>Uri</code> overload. It is assumed that the string parameter represents a URI because of the exact match besides that parameter type. It stands\nto reason that the safer overload should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      public void FetchResource(string uriString) // Noncompliant\n      {\n         // No calls to FetResource(Uri)\n      }\n\n      public void FetchResource(Uri uri) { }\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      public void FetchResource(string uriString)\n      {\n          FetchResource(new Uri(uriString));\n      }\n\n      public void FetchResource(Uri uri) { }\n   }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224533591	1576224533593	1	csharp
607	"operator==" should not be overloaded on reference types	S3875	\N	csharpsquid	<p>The use of <code>==</code> to compare to objects is expected to do a reference comparison. That is, it is expected to return <code>true</code> if\nand only if they are the same object instance. Overloading the operator to do anything else will inevitably lead to the introduction of bugs by\ncallers. On the other hand, overloading it to do exactly that is pointless; that's what <code>==</code> does by default.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static bool operator== (MyType x, MyType y) // Noncompliant\n{\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Classes with overloaded <code>operator +</code> or <code>operator -</code> methods are ignored. </li>\n  <li> Classes that implement <code>IComparable&lt;T&gt;</code> or <code>IEquatable&lt;T&gt;</code> most probably behave as a value-type objects and\n  so are ignored. </li>\n</ul>	4	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	pitfall	0	HTML	1576224533596	1576224533598	1	csharp
658	Multiple "OrderBy" calls should not be used	S3169	\N	csharpsquid	<p>There's no point in chaining multiple <code>OrderBy</code> calls in a LINQ; only the last one will be reflected in the result because each\nsubsequent call completely reorders the list. Thus, calling <code>OrderBy</code> multiple times is a performance issue as well, because all of the\nsorting will be executed, but only the result of the last sort will be kept.</p>\n<p>Instead, use <code>ThenBy</code> for each call after the first. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = personList\n  .OrderBy(person =&gt; person.Age)\n  .OrderBy(person =&gt; person.Name)  // Noncompliant\n  .ToList();  // x is sorted by Name, not sub-sorted\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = personList\n  .OrderBy(person =&gt; person.Age)\n  .ThenBy(person =&gt; person.Name)\n  .ToList();\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	performance	0	HTML	1576224534763	1576224534764	1	csharp
659	Base class methods should not be hidden	S4019	\N	csharpsquid	<p>When a method in a derived class has the same name as a method in the base class but with a signature that only differs by types that are weakly\nderived (e.g. <code>object</code> vs <code>string</code>), the result is that the base method becomes hidden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    internal void SomeMethod(string s1, string s2) { }\n  }\n\n  class Bar : Foo\n  {\n    internal void SomeMethod(string s1, object o2) { }  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    internal void SomeMethod(string s1, string s2) { }\n  }\n\n  class Bar : Foo\n  {\n    internal void SomeOtherMethod(string s1, object o2) { }\n  }\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224534765	1576224534766	1	csharp
660	"switch" statements should have at least 3 "case" clauses	S1301	\N	csharpsquid	<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable)\n{\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0)\n{\n  doSomething();\n}\nelse\n{\n  doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>\n  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>\n  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	bad-practice,misra	0	HTML	1576224534767	1576224534768	1	csharp
703	Expressions used in "Debug.Assert" should not produce side effects	S3346	\N	csharpsquid	<p>An assertion is a piece of code that's used during development when the compilation debug mode is activated. It allows a program to check itself as\nit runs. When an assertion is true, that means everything is operating as expected. </p>\n<p>In non-debug mode, all <code>Debug.Assert</code> are automatically left out. So, by contract, the boolean expressions that are evaluated by those\nassertions must absolutely not contain any side effects. Otherwise, when leaving the Debug mode, the functional behavior of the application is not the\nsame anymore.</p>\n<p>The rule will raise if the method name starts with any of the following <code>remove</code>, <code>delete</code>, <code>add</code>,\n<code>pop</code>, <code>update</code>, <code>retain</code>, <code>insert</code>, <code>push</code>, <code>append</code>, <code>clear</code>,\n<code>dequeue</code>, <code>enqueue</code>, <code>dispose</code>, <code>put</code>, or <code>set</code>, although <code>SetEquals</code> will be\nignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDebug.Assert(list.Remove("dog"));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nbool result = list.Remove("dog");\nDebug.Assert(result);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/vwG7AQ">CERT, EXP06-J.</a> - Expressions used in assertions must not produce side\n  effects </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert	0	HTML	1576224535729	1576224535771	2	csharp
704	Optional parameters should be passed to "base" calls	S3466	\N	csharpsquid	<p>Generally, writing the least code that will <em>readably</em> do the job is a good thing, so omitting default parameter values seems to make sense.\nUnfortunately, when you omit them from the <code>base</code> call in an override, you're not actually getting the job done thoroughly, because you're\nignoring the value the caller passed in. The result will likely not be what the caller expected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class BaseClass\n{\n    public virtual void MyMethod(int i = 1)\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\n    public override void MyMethod(int i = 1)\n    {\n        // ...\n        base.MyMethod(); // Noncompliant; caller's value is ignored\n    }\n\n    static int Main(string[] args)\n    {\n        DerivedClass dc = new DerivedClass();\n        dc.MyMethod(12);  // prints 1\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class BaseClass\n{\n    public virtual void MyMethod(int i = 1)\n    {\n        Console.WriteLine(i);\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\n    public override void MyMethod(int i = 1)\n    {\n        // ...\n        base.MyMethod(i);\n    }\n\n    static int Main(string[] args)\n    {\n        DerivedClass dc = new DerivedClass();\n        dc.MyMethod(12);  // prints 12\n    }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224535816	1576224535861	2	csharp
752	Related "if/else if" statements should not have the same condition	S1862	\N	csharpsquid	<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n{\n  OpenWindow();\n}\nelse if (param == 2)\n{\n  CloseWindow();\n}\nelse if (param == 1) // Noncompliant\n{\n  MoveWindowToTheBackground();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n{\n  OpenWindow();\n}\nelse if (param == 2)\n{\n  CloseWindow();\n}\nelse if (param == 3)\n{\n  MoveWindowToTheBackground();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	cert,pitfall,unused	0	HTML	1576224538729	1576224538730	2	csharp
753	Classes should "Dispose" of members from the classes' own "Dispose" methods	S2952	\N	csharpsquid	<p>It is possible in an <code>IDisposable</code> to call <code>Dispose</code> on class members from any method, but the contract of\n<code>Dispose</code> is that it will clean up all unmanaged resources. Move disposing of members to some other method, and you risk resource\nleaks.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ResourceHolder : IDisposable\n{\n  private FileStream fs;\n  public void OpenResource(string path)\n  {\n    this.fs = new FileStream(path, FileMode.Open);\n  }\n  public void CloseResource()\n  {\n    this.fs.Close();\n  }\n\n  public void CleanUp()\n  {\n    this.fs.Dispose(); // Noncompliant; Dispose not called in class' Dispose method\n  }\n\n  public void Dispose()\n  {\n    // method added to satisfy demands of interface\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class ResourceHolder : IDisposable\n{\n  private FileStream fs;\n  public void OpenResource(string path)\n  {\n    this.fs = new FileStream(path, FileMode.Open);\n  }\n  public void CloseResource()\n  {\n    this.fs.Close();\n  }\n\n  public void Dispose()\n  {\n    this.fs.Dispose();\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n</ul>	3	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	cwe,denial-of-service	0	HTML	1576224538732	1576224538775	2	csharp
608	"==" should not be used when "Equals" is overridden	S1698	\N	csharpsquid	<p>Using the equality <code>==</code> and inequality <code>!=</code> operators to compare two objects generally works. The operators can be\noverloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then\n<code>==</code> resolves to reference equality, which may result in unexpected behavior if implementing classes override <code>Equals</code>.\nSimilarly, when a class overrides <code>Equals</code>, but instances are compared with non-overloaded <code>==</code>, there is a high chance that\nvalue comparison was meant instead of the reference one.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface IMyInterface\n{\n}\n\npublic class MyClass : IMyInterface\n{\n    public override bool Equals(object obj)\n    {\n        //...\n    }\n}\n\npublic class Program\n{\n    public static void Method(IMyInterface instance1, IMyInterface instance2)\n    {\n        if (instance1 == instance2) // Noncompliant, will do reference equality check, but was that intended? MyClass overrides Equals.\n        {\n            Console.WriteLine("Equal");\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface IMyInterface\n{\n}\n\npublic class MyClass : IMyInterface\n{\n    public override bool Equals(object obj)\n    {\n        //...\n    }\n}\n\npublic class Program\n{\n    public static void Method(IMyInterface instance1, IMyInterface instance2)\n    {\n        if (object.Equals(instance1, instance2)) // object.Equals checks for null and then calls the instance based Equals, so MyClass.Equals\n        {\n            Console.WriteLine("Equal");\n        }\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule does not report on comparisons of <code>System.Type</code> instances and on comparisons inside <code>Equals</code> overrides.</p>\n<p>It also does not raise an issue when one of the operands is <code>null</code> nor when one of the operand is cast to <code>object</code> (because\nin this case we want to ensure reference equality even if some <code>==</code> overload is present).</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/595.html">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/597.html">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/wwD1AQ">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of\n  boxed primitives </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/8AEqAQ">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference\n  equality </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	cert,cwe,suspicious	0	HTML	1576224533600	1576224533648	1	csharp
609	URI properties should not be strings	S3996	\N	csharpsquid	<p>String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The <code>System.Uri</code>\nclass is a safe alternative and should be preferred.</p>\n<p>This rule raises an issue when a property is a string type and its name contains "uri", "Uri", "urn", "Urn", "url" or "Url".</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      string myUri;\n\n      public string MyUri // Noncompliant\n      {\n         get { return myURI; }\n         set { myUri = value; }\n      }\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n   public class MyClass\n   {\n      Uri myUri;\n\n      public Uri MyUri\n      {\n         get { return myURI; }\n         set { myUri = value; }\n      }\n   }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224533692	1576224533693	1	csharp
610	Overflow checking should not be disabled for "Enumerable.Sum"	S2291	\N	csharpsquid	<p><code>Enumerable.Sum()</code> always executes addition in a <code>checked</code> context, so an <code>OverflowException</code> will be thrown if\nthe value exceeds <code>MaxValue</code> even if an <code>unchecked</code> context was specified. Using an <code>unchecked</code> context anyway\nrepresents a misunderstanding of how <code>Sum</code> works.</p>\n<p>This rule raises an issue when an <code>unchecked</code> context is specified for a <code>Sum</code> on integer types.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid Add(List&lt;int&gt; list)\n{\n  int d = unchecked(list.Sum());  // Noncompliant\n\n  unchecked\n  {\n    int e = list.Sum();  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid Add(List&lt;int&gt; list)\n{\n  int d = list.Sum();\n\n  try\n  {\n    int e = list.Sum();\n  }\n  catch (System.OverflowException e)\n  {\n    // exception handling...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When the <code>Sum()</code> call is inside a <code>try-catch</code> block, no issues are reported.</p>\n<pre>\nvoid Add(List&lt;int&gt; list)\n{\n  unchecked\n  {\n    try\n    {\n      int e = list.Sum();\n    }\n    catch (System.OverflowException e)\n    {\n      // exception handling...\n    }\n  }\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	error-handling	0	HTML	1576224533694	1576224533695	1	csharp
661	"ThreadStatic" fields should not be initialized	S2996	\N	csharpsquid	<p>When an object has a field annotated with <code>ThreadStatic</code>, that field is shared within a given thread, but unique across threads. Since a\nclass' static initializer is only invoked for the first thread created, it also means that only the first thread will have the expected initial\nvalues.</p>\n<p>Instead, allow such fields to be initialized to their default values or make the initialization lazy.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  [ThreadStatic]\n  public static object PerThreadObject = new object(); // Noncompliant. Will be null in all the threads except the first one.\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  [ThreadStatic]\n  public static object _perThreadObject;\n  public static object PerThreadObject\n  {\n    get\n    {\n      if (_perThreadObject == null)\n      {\n        _perThreadObject = new object();\n      }\n      return _perThreadObject;\n    }\n  }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	multi-threading	0	HTML	1576224534770	1576224534770	2	csharp
662	Generic methods should provide type parameters	S4018	\N	csharpsquid	<p>The best way to determine the type of a generic method is by inference based on the type of argument that is passed to the method. This is not\npossible when a parameter type is missing from the argument list.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void MyMethod&lt;T&gt;()  // Noncompliant\n    {\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    public void MyMethod&lt;T&gt;(T param)\n    {\n    }\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224534771	1576224534772	1	csharp
663	"static" fields should be initialized inline	S3963	\N	csharpsquid	<p>When a <code>static</code> constructor serves no other purpose that initializing <code>static</code> fields, it comes with an unnecessary\nperformance cost because the compiler generates a check before each <code>static</code> method or instance constructor invocation.</p>\n<p>Instead, inline initialization is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnamespace myLib\n{\n  public class Foo\n  {\n    static int i;\n    static string s;\n\n    static Foo() // Noncompliant\n    {\n      i = 3;\n      ResourceManager sm =  new ResourceManager("strings", Assembly.GetExecutingAssembly());\n      s = sm.GetString("mystring");\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnamespace myLib\n{\n  public class Foo\n  {\n    static int i =3;\n    static string s = InitString();\n\n    static string InitString()\n    {\n      ResourceManager sm = new ResourceManager("strings", Assembly.GetExecutingAssembly());\n      return sm.GetString("mystring");\n    }\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224534773	1576224534773	1	csharp
664	"params" should not be introduced on overrides	S3600	\N	csharpsquid	<p>Adding <code>params</code> to a method override has no effect. The compiler accepts it, but the callers won't be able to benefit from the added\nmodifier.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Base\n{\n  public virtual void Method(int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(params int[] numbers) // Noncompliant, method can't be called with params syntax.\n  {\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Base\n{\n  public virtual void Method(int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(int[] numbers)\n  {\n    ...\n  }\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	1min	\N	confusing	0	HTML	1576224534775	1576224534776	1	csharp
705	Empty arrays and collections should be returned instead of null	S1168	\N	csharpsquid	<p>Returning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more\ncomplex and less readable.</p>\n<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Result[] GetResults()\n{\n    return null; // Noncompliant\n}\n\npublic IEnumerable&lt;Result&gt; GetResults()\n{\n    return null; // Noncompliant\n}\n\npublic IEnumerable&lt;Result&gt; GetResults() =&gt; null; // Noncompliant\n\npublic IEnumerable&lt;Result&gt; Results\n{\n    get\n    {\n        return null; // Noncompliant\n    }\n}\n\npublic IEnumerable&lt;Result&gt; Results =&gt; null; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic Result[] GetResults()\n{\n    return new Result[0];\n}\n\npublic IEnumerable&lt;Result&gt; GetResults()\n{\n    return Enumerable.Empty&lt;Result&gt;();\n}\n\npublic IEnumerable&lt;Result&gt; GetResults() =&gt; Enumerable.Empty&lt;Result&gt;();\n\npublic IEnumerable&lt;Result&gt; Results\n{\n    get\n    {\n        return Enumerable.Empty&lt;Result&gt;();\n    }\n}\n\npublic IEnumerable&lt;Result&gt; Results =&gt; Enumerable.Empty&lt;Result&gt;();\n</pre>\n<h2>Exceptions</h2>\n<p>Although <code>string</code> is a collection, the rule won't report on it.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/AgG7AQ">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an\n  empty array over a null value </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/zwHEAw">CERT, MET55-J.</a> - Return an empty array or collection instead of a null\n  value for methods that return an array or collection </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	30min	\N	cert	0	HTML	1576224535906	1576224535953	1	csharp
706	"IDisposables" should be disposed	S2930	\N	csharpsquid	<p>When writing managed code, you don't need to worry about allocating or freeing memory: The garbage collector takes care of it. For efficiency\nreasons, some objects such as <code>Bitmap</code> use unmanaged memory, enabling for example the use of pointer arithmetic. Such objects have\npotentially huge unmanaged memory footprints, but will have tiny managed ones. Unfortunately, the garbage collector only sees the tiny managed\nfootprint, and fails to reclaim the unmanaged memory (by calling <code>Bitmap</code>'s finalizer method) in a timely fashion. </p>\n<p>Moreover, memory is not the only system resource which needs to be managed in a timely fashion: The operating system can only handle having so many\nfile descriptors (e.g. <code>FileStream</code>) or sockets (e.g. <code>WebClient</code>) open at any given time. Therefore, it is important to\n<code>Dispose</code> of them as soon as they are no longer needed, rather than relying on the garbage collector to call these objects' finalizers at\nsome nondeterministic point in the future.</p>\n<p>This rule tracks <code>private</code> fields and local variables of the following <code>IDisposable</code> types, which are never disposed, closed,\naliased, returned, or passed to other methods.</p>\n<ul>\n  <li> <code>System.IO</code> namespace\n    <ul>\n      <li> <code>System.IO.FileStream</code> </li>\n      <li> <code>System.IO.StreamReader</code> </li>\n      <li> <code>System.IO.StreamWriter</code> </li>\n    </ul> </li>\n  <li> <code>System.Net</code> namespace\n    <ul>\n      <li> <code>System.Net.WebClient</code> </li>\n    </ul> </li>\n  <li> <code>System.Net.Sockets</code> namespace\n    <ul>\n      <li> <code>System.Net.Sockets.Socket</code> </li>\n      <li> <code>System.Net.Sockets.TcpClient</code> </li>\n      <li> <code>System.Net.Sockets.UdpClient</code> </li>\n    </ul> </li>\n  <li> <code>System.Drawing</code> namespace\n    <ul>\n      <li> <code>System.Drawing.Image</code> </li>\n      <li> <code>System.Drawing.Bitmap</code> </li>\n    </ul> </li>\n</ul>\n<p>which are either instantiated directly using the <code>new</code> operator, or using one of the following factory methods:</p>\n<ul>\n  <li> <code>System.IO.File.Create()</code> </li>\n  <li> <code>System.IO.File.Open()</code> </li>\n  <li> <code>System.Drawing.Image.FromFile()</code> </li>\n  <li> <code>System.Drawing.Image.FromStream()</code> </li>\n</ul>\n<p>on both private fields and local variables.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ResourceHolder\n{\n  private FileStream fs; // Noncompliant; Dispose or Close are never called\n\n  public void OpenResource(string path)\n  {\n    this.fs = new FileStream(path, FileMode.Open);\n  }\n\n  public void WriteToFile(string path, string text)\n  {\n    var fs = new FileStream(path, FileMode.Open); // Noncompliant\n    var bytes = Encoding.UTF8.GetBytes(text);\n    fs.Write(bytes, 0, bytes.Length);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class ResourceHolder : IDisposable\n{\n  private FileStream fs;\n\n  public void OpenResource(string path)\n  {\n    this.fs = new FileStream(path, FileMode.Open);\n  }\n\n  public void Dispose()\n  {\n    this.fs.Dispose();\n  }\n\n  public void WriteToFile(string path, string text)\n  {\n    using (var fs = new FileStream(path, FileMode.Open))\n    {\n      var bytes = Encoding.UTF8.GetBytes(text);\n      fs.Write(bytes, 0, bytes.Length);\n    }\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>IDisposable</code> variables returned from a method or passed to other methods are ignored, as are local <code>IDisposable</code>s that are\ninitialized with other <code>IDisposable</code>s.</p>\n<pre>\npublic Stream WriteToFile(string path, string text)\n{\n  var fs = new FileStream(path, FileMode.Open); // Compliant, because it is returned\n  var bytes = Encoding.UTF8.GetBytes(text);\n  fs.Write(bytes, 0, bytes.Length);\n  return fs;\n}\n\npublic void ReadFromStream(Stream s)\n{\n  var sr = new StreamReader(s); // Compliant as it would close the underlying stream.\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n</ul>	4	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	cwe,denial-of-service	0	HTML	1576224535998	1576224536044	2	csharp
707	Null pointers should not be dereferenced	S2259	\N	csharpsquid	<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullReferenceException</code> to be thrown. At\nbest, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or\nit could allow an attacker to bypass security measures.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nobject o = null;\nif (condition)\n{\n  M1(o.ToString()); // Noncompliant, always null\n}\nelse\n{\n  o = new object();\n}\nM2(o.ToString());\n</pre>\n<h2>Exceptions</h2>\n<p>Calls to extension methods are not reported because they can still operate on <code>null</code> values.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/PAw">CERT, EXP34-C.</a> - Do not dereference null pointers </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	cert,cwe	0	HTML	1576224536088	1576224536088	2	csharp
754	Classes directly extending "object" should not call "base" in "GetHashCode" or "Equals"	S3249	\N	csharpsquid	<p>Making a <code>base</code> call in an overriding method is generally a good idea, but not in <code>GetHashCode</code> and <code>Equals</code> for\nclasses that directly extend <code>object</code> because those methods are based on the object reference. Meaning that no two <code>objects</code>\nthat use those <code>base</code> methods will ever be equal or have the same hash.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Point\n{\n  private readonly int x;\n  public MyClass(int x)\n  {\n    this.x = x;\n  }\n  public override int GetHashCode()\n  {\n    return x.GetHashCode() ^ base.GetHashCode(); //Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Point\n{\n  private readonly int x;\n  public MyClass(int x)\n  {\n    this.x = x;\n  }\n  public override int GetHashCode()\n  {\n    return x.GetHashCode();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't report on guard conditions checking for reference equality.</p>\n<pre>\npublic class Point\n{\n  public override bool Equals(object obj)\n  {\n    if (base.Equals(obj)) // Compliant, although it could be replaced with object.ReferenceEquals(obj, this), which is clearer\n    {\n      return true;\n    }\n    ...\n  }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224538821	1576224538824	2	csharp
755	"P/Invoke" methods should not be visible	S4214	\N	csharpsquid	<p>Methods marked with the <code>System.Runtime.InteropServices.DllImportAttribute</code> attribute use Platform Invocation Services to access\nunmanaged code and should not be exposed. Keeping them private or internal makes sure that their access is controlled and properly managed.</p>\n<p>This rule raises an issue when a method declared with <code>DllImport</code> is public or protected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        [DllImport("kernel32.dll", CharSet = CharSet.Unicode)]\n        public static extern bool RemoveDirectory(string name);  // Noncompliant\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n    public class Foo\n    {\n        [DllImport("kernel32.dll", CharSet = CharSet.Unicode)]\n        private static extern bool RemoveDirectory(string name);\n    }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224538827	1576224538830	1	csharp
611	Field-like events should not be virtual	S2290	\N	csharpsquid	<p>Field-like events are events that do not have explicit <code>add</code> and <code>remove</code> methods. The compiler generates a\n<code>private</code> <code>delegate</code> field to back the event, as well as generating the implicit <code>add</code> and <code>remove</code>\nmethods.</p>\n<p>When a <code>virtual</code> field-like <code>event</code> is overridden by another field-like <code>event</code>, the behavior of the C# compiler\nis to generate a new <code>private</code> <code>delegate</code> field in the derived class, separate from the parent's field. This results in multiple\nand separate events being created, which is rarely what's actually intended.</p>\n<p>To prevent this, remove the <code>virtual</code> designation from the parent class event.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nabstract class Car\n{\n  public virtual event EventHandler OnRefueled; // Noncompliant\n\n  public void Refuel()\n  {\n    // This OnRefueld will always be null\n     if (OnRefueled != null)\n     {\n       OnRefueled(this, null);\n     }\n  }\n}\n\nclass R2 : Car\n{\n  public override event EventHandler OnRefueled;\n}\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    var r2 = new R2();\n    r2.OnRefueled += new EventHandler((o, a) =&gt;\n    {\n      Console.WriteLine("This event will never be called");\n    });\n    r2.Refuel();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nabstract class Car\n{\n  public event EventHandler OnRefueled; // Compliant\n\n  public void Refuel()\n  {\n    if (OnRefueled != null)\n    {\n      OnRefueled(this, null);\n    }\n  }\n}\n\nclass R2 : Car {}\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    var r2 = new R2();\n    r2.OnRefueled += new EventHandler((o, a) =&gt;\n    {\n      Console.WriteLine("This event will be called");\n    });\n    r2.Refuel();\n  }\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	\N	0	HTML	1576224533696	1576224533739	1	csharp
612	Namespaces should not be empty	S3261	\N	csharpsquid	<p>Namespaces with no lines of code clutter a project and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnamespace MyEmptyNamespace // Noncompliant\n{\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/OYIyAQ">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	cert,unused	0	HTML	1576224533786	1576224533790	1	csharp
613	Trivial properties should be auto-implemented	S2292	\N	csharpsquid	<p>Trivial properties, which include no logic but setting and getting a backing field should be converted to auto-implemented properties, yielding\ncleaner and more readable code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Car\n{\n  private string _make;\n  public string Make // Noncompliant\n  {\n    get { return _make; }\n    set { _make = value; }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Car\n{\n  public string Make { get; set; }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224533794	1576224533796	1	csharp
665	"Object.ReferenceEquals" should not be used for value types	S2995	\N	csharpsquid	<p>Using <code>Object.ReferenceEquals</code> to compare the references of two value types simply won't return the expected results most of the time\nbecause such types are passed by value, not by reference.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  private MyStruct myStruct;\n\n  public void DoSomething(MyStruct s1) {\n    int a = 1;\n    int b = 1;\n\n    if (Object.ReferenceEquals(myStruct, s1))  // Noncompliant; this can never be true\n    {\n      // ...\n    }\n    else if (Object.ReferenceEquals(a,b)) // Noncompliant\n    {\n      // ...\n    }\n  }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224534777	1576224534777	2	csharp
666	Nested blocks of code should not be left empty	S108	\N	csharpsquid	<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty.</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224534779	1576224534779	1	csharp
667	Methods should not have too many parameters	S107	\N	csharpsquid	<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, string param4, long param5)\n{\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, string param4)\n{\n...\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	brain-overload	0	HTML	1576224534780	1576224534780	1	csharp
668	Ints and longs should not be shifted by zero or more than their number of bits-1	S2183	\N	csharpsquid	<p>Since an <code>int</code> is a 32-bit variable, shifting by more than +/-31 is confusing at best and an error at worst. Shifting an\n<code>int</code> by 32 is the same as shifting it by 0, and shifting it by 33 is the same as shifting it by 1.</p>\n<p>Similarly, shifting a <code>long</code> by +/-64 is the same as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int Shift(int a)\n{\n  return a &lt;&lt; 48;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int Shift(int a)\n{\n  return a &lt;&lt; 16;\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert	0	HTML	1576224534782	1576224534782	2	csharp
669	Files should not have too many lines of code	S104	\N	csharpsquid	<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	1h	\N	brain-overload	0	HTML	1576224534783	1576224534783	1	csharp
670	Tabulation characters should not be used	S105	\N	csharpsquid	<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224534785	1576224534785	1	csharp
708	"if ... else if" constructs should end with "else" clauses	S126	\N	csharpsquid	<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>\nshould be followed by an <code>else</code> statement.</p>\n<p>The requirement for a final <code>else</code> statement is defensive programming.</p>\n<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x == 0)\n{\n  doSomething();\n} else if (x == 1)\n{\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x == 0)\n{\n  doSomething();\n} else if (x == 1)\n{\n  doSomethingElse();\n} else\n{\n  throw new IllegalStateException();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC57-J.</a> - Strive for logical completeness </li>\n</ul>	3	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert,misra	0	HTML	1576224536089	1576224536132	1	csharp
709	"for" loop stop conditions should be invariant	S127	\N	csharpsquid	<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>\n  <li> When the stop condition depend upon a method call </li>\n  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo\n{\n    static void Main()\n    {\n        for (int i = 1; i &lt;= 5; i++)\n        {\n            Console.WriteLine(i);\n            if (condition)\n            {\n               i = 20;\n           }\n        }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo\n{\n    static void Main()\n    {\n        for (int i = 1; i &lt;= 5; i++)\n        {\n            Console.WriteLine(i);\n        }\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the\n  loop. </li>\n  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>. </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	misra,pitfall	0	HTML	1576224536177	1576224536219	1	csharp
756	Unused method parameters should be removed	S1172	\N	csharpsquid	<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid DoSomething(int a, int b) // "b" is unused\n{\n  Compute(a);\n}\n\nvoid DoSomething2(int a) // value of "a" is unused\n{\n  a = 10;\n  Compute(a);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid DoSomething(int a)\n{\n  Compute(a);\n}\n\nvoid DoSomething2()\n{\n  var a = 10;\n  Compute(a);\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>virtual</code>, <code>override</code> methods and interface implementations are ignored. </p>\n<pre>\noverride void DoSomething(int a, int b) // no issue reported on b\n{\n  Compute(a);\n}\n</pre>\n<p>Furthermore, the <code>this</code> parameter of extension methods is also ignored.</p>\n<pre>\npublic static class Extensions\n{\n  public static void MyHelper(this HtmlHelper helper) //no issue reported here\n  {\n    // no use of helper here\n  }\n}\n</pre>\n<p>Methods that have attributes defined on them are ignored.</p>\n<pre>\npublic class MyDto\n{\n  public string Name { get; set; }\n\n  [OnDeserialized]\n  private void OnDeserialized(StreamingContext context)\n  {\n    // ...\n  }\n}\n</pre>\n<p>Empty or unsupported methods are ignored.</p>\n<pre>\npublic void DoSomething()\n{}\n\npublic void Call()\n{\n  throw new NotImplementedException();\n}\n</pre>\n<p>And obviously no issue is raised on the <code>static void Main(string[] args)</code> method</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>\n  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert,misra,unused	0	HTML	1576224538834	1576224538881	1	csharp
757	Generic event handlers should be used	S3908	\N	csharpsquid	<p>Since .Net Framework version 2.0 it is not necessary to declare a delegate that specifies a class derived from <code>System.EventArgs</code>. The\n<code>System.EventHandler&lt;TEventArgs&gt;</code> delegate mechanism should be used instead as it allows any class derived from\n<code>EventArgs</code> to be used with that handler.</p>\n<p>This rule raises an issue when an old style delegate is used as an event handler.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyEventArgs : EventArgs\n{\n}\n\npublic delegate void MyEventHandler(object sender, MyEventArgs e); // Noncompliant\n\npublic class EventProducer\n{\n  public event MyEventHandler MyEvent;\n\n  protected virtual void OnMyEvent(MyEventArgs e)\n  {\n    if (MyEvent != null)\n    {\n      MyEvent(e);\n    }\n  }\n}\n\npublic class EventConsumer\n{\n  public EventConsumer(EventProducer producer)\n  {\n      producer.MyEvent += HandleEvent;\n  }\n\n  private void HandleEvent(object sender, MyEventArgs e)\n  {\n    // Do something...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyEventArgs : EventArgs\n{\n}\n\npublic class EventProducer\n{\n  public event EventHandler&lt;MyEventArgs&gt; MyEvent;\n\n  protected virtual void OnMyEvent(MyEventArgs e)\n  {\n    if (MyEvent != null)\n    {\n      MyEvent(e);\n    }\n  }\n}\n\npublic class EventConsumer\n{\n  public EventConsumer(EventProducer producer)\n  {\n      producer.MyEvent += HandleEvent;\n  }\n\n  private void HandleEvent(object sender, MyEventArgs e)\n  {\n    // Do something...\n  }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224538926	1576224538972	1	csharp
614	Static fields should appear in the order they must be initialized	S3263	\N	csharpsquid	<p>Static field initializers are executed in the order in which they appear in the class from top to bottom. Thus, placing a static field in a class\nabove the field or fields required for its initialization will yield unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n  public static int X = Y; // Noncompliant; Y at this time is still assigned default(int), i.e. 0\n  public static int Y = 42;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass\n{\n  public static int Y = 42;\n  public static int X = Y;\n}\n</pre>\n<p>or</p>\n<pre>\nclass MyClass\n{\n  public static int X;\n  public static int Y = 42;\n\n  static MyClass()\n  {\n    X = Y;\n  }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224533801	1576224533803	2	csharp
615	"params" should be used on overrides	S3262	\N	csharpsquid	<p>Overriding methods automatically inherit the <code>params</code> behavior. To ease readability, this modifier should be explicitly used in the\noverriding method as well.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Base\n{\n  public virtual void Method(params int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(int[] numbers) // Noncompliant, the params is missing.\n  {\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Base\n{\n  public virtual void Method(params int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(params int[] numbers)\n  {\n    ...\n  }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	confusing	0	HTML	1576224533807	1576224533810	1	csharp
616	"catch" clauses should do more than rethrow	S2737	\N	csharpsquid	<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting\nit bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads. </p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring s = "";\ntry\n{\n  s = File.ReadAllText(fileName);\n}\ncatch (Exception e)  // Noncompliant\n{\n  throw;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstring s = "";\ntry\n{\n  s = File.ReadAllText(fileName);\n}\ncatch (Exception e) // Compliant\n{\n  logger.LogError(e);\n  throw;\n}\n</pre>\n<p>or</p>\n<pre>\nstring s = File.ReadAllText(fileName);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert,clumsy,finding,unused	0	HTML	1576224533813	1576224533816	1	csharp
617	Methods and properties should be named in camel case	S100	\N	csharpsquid	<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not method and property names are camel cased. To\nreduce noise, two consecutive upper case characters are allowed unless they form the whole name. So, <code>MyXMethod</code> is compliant, but\n<code>XM</code> on its own is not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int doSomething(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int DoSomething(){...}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule ignores members in types that are marked with <code>ComImportAttribute</code> or <code>InterfaceTypeAttribute</code>. <code>extern</code>\nmethods are also excluded from the check. Furthermore, when <code>'_'</code> character is found in a name, the camel casing is not enforced.</p>\n<pre>\nvoid My_method(){...} // valid\nvoid My_method_(){...} // invalid, leading and trailing underscores are reported\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224533820	1576224533822	1	csharp
671	Pointers to unmanaged memory should not be visible	S4000	\N	csharpsquid	<p>The <code>IntPtr</code> and <code>UIntPtr</code> types are used to access unmanaged memory, usually in order to use C or C++ libraries. If such a\npointer is not secured by making it <code>private</code>, <code>internal</code> or <code>readonly</code>, it can lead to a vulnerability allowing\naccess to arbitrary locations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyClass\n  {\n    public IntPtr myPointer;  // Noncompliant\n    protected UIntPtr myOtherPointer; // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  public class MyClass\n  {\n    private IntPtr myPointer;\n    protected readonly UIntPtr myOtherPointer;\n  }\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224534786	1576224534786	1	csharp
672	Lines should not be too long	S103	\N	csharpsquid	<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224534787	1576224534788	1	csharp
673	Results of integer division should not be assigned to floating point variables	S2184	\N	csharpsquid	<p>When division is performed on <code>int</code>s, the result will always be an <code>int</code>. You can assign that result to a\n<code>double</code>, <code>float</code> or <code>decimal</code> with automatic type conversion, but having started as an <code>int</code>, the result\nwill likely not be what you expect. If the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost\nbefore the assignment. Instead, at least one operand should be cast or promoted to the final type before the operation takes place.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic void Main()\n{\n  decimal dec = 3/2; // Noncompliant\n  Method(3/2); // Noncompliant\n}\n\nstatic void Method(float f) { }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstatic void Main()\n{\n  decimal dec = (decimal)3/2;\n  Method(3.0F/2);\n}\n\nstatic void Method(float f) { }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 5-0-8 - An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue\n  expression. </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/190">MITRE, CWE-190</a> - Integer Overflow or Wraparound </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/woIyAQ">CERT, NUM50-J.</a> - Convert integers to floating point for floating-point\n  operations </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/AxE">CERT, INT18-C.</a> - Evaluate integer expressions in a larger size before\n  comparing or assigning to that size </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/1IAyAQ">CERT, INT18-CPP.</a> - Evaluate integer expressions in a larger size before\n  comparing or assigning to that size </li>\n  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Risky Resource Management </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	cert,cwe,misra,overflow,sans-top25-risky	0	HTML	1576224534789	1576224534835	2	csharp
674	"goto" statement should not be used	S907	\N	csharpsquid	<p><code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such\nas <code>if</code>, <code>for</code>, <code>while</code>, <code>continue</code> or <code>break</code> should be used instead.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.4 - The goto statement shall not be used. </li>\n  <li> MISRA C:2012, 15.1 - The goto statement should not be used </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	brain-overload,misra	0	HTML	1576224534882	1576224534884	1	csharp
710	Parameters with "[DefaultParameterValue]" attributes should also be marked "[Optional]"	S3450	\N	csharpsquid	<p>There is no point in providing a default value for a parameter if callers are required to provide a value for it anyway. Thus,\n<code>[DefaultParameterValue]</code> should always be used in conjunction with <code>[Optional]</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void MyMethod([DefaultParameterValue(5)] int j) //Noncompliant, useless\n{\n  Console.WriteLine(j);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void MyMethod(int j = 5)\n{\n  Console.WriteLine(j);\n}\n</pre>\n<p>or</p>\n<pre>\npublic void MyMethod([DefaultParameterValue(5)][Optional] int j)\n{\n  Console.WriteLine(j);\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	pitfall	0	HTML	1576224536264	1576224536265	1	csharp
711	Sections of code should not be "commented out"	S125	\N	csharpsquid	<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be "commented out". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out" </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	misra,unused	0	HTML	1576224536268	1576224536269	1	csharp
712	Optional parameters should not be used	S2360	\N	csharpsquid	<p>The overloading mechanism should be used in place of optional parameters for several reasons:</p>\n<ul>\n  <li> Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need\n  to be rebuilt, otherwise the original values will be used. </li>\n  <li> The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify\n  the values. </li>\n  <li> The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only\n  way to get the same behavior. </li>\n  <li> Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters,\n  when one is defined, is the second one still optional or mandatory? </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid Notify(string company, string office = "QJZ") // Noncompliant\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid Notify(string company)\n{\n  Notify(company, "QJZ");\n}\nvoid Notify(string company, string office)\n{\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule ignores non externally visible methods.</p>	3	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224536271	1576224536273	1	csharp
758	Collections should implement the generic interface	S3909	\N	csharpsquid	<p>The NET Framework 2.0 introduced the generic interface <code>System.Collections.Generic.IEnumerable&lt;T&gt;</code> and it should be preferred over\nthe older, non generic, interfaces.</p>\n<p>This rule raises an issue when a public type implements <code>System.Collections.IEnumerable</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Collections;\n\npublic class MyData\n{\n  public MyData()\n  {\n  }\n}\n\npublic class MyList : CollectionBase // Noncompliant\n{\n  public void Add(MyData data)\n  {\n    InnerList.Add(data);\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Collections.ObjectModel;\n\npublic class MyData\n{\n  public MyData()\n  {\n  }\n}\n\npublic class MyList : Collection&lt;MyData&gt;\n{\n  // Implementation...\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224539017	1576224539019	1	csharp
759	Literal boolean values should not be used in assertions	S2701	\N	csharpsquid	<p>There's no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nbool b = true;\nNUnit.Framework.Assert.AreEqual(true, b);\nXunit.Assert.NotSame(true, b);\nMicrosoft.VisualStudio.TestTools.UnitTesting.Assert.AreEqual(true, b);\nSystem.Diagnostics.Debug.Assert(true);\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	tests	0	HTML	1576224539021	1576224539023	1	csharp
760	Dead stores should be removed	S1854	\N	csharpsquid	<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid CalculateRate(int a, int b)\n{\n  int i;\n\n  i = a + b; // Noncompliant; calculation result not used before value is overwritten\n  i = DoSomething();  // Noncompliant; retrieved value not used\n  for (i = 0; i &lt; 10; i++)\n  {\n    //  ...\n  }\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid CalculateRate(int a, int b)\n{\n  int i;\n\n  i = DoSomething();\n  i += a + b;\n  StoreI(i);\n\n  for (i = 0; i &lt; 10; i++)\n  {\n    //  ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported when </p>\n<ul>\n  <li> the analyzed method body contains <code>try</code> blocks, </li>\n  <li> a lambda expression captures the local variables, or </li>\n  <li> the variable is unused (case covered by Rule S1481) </li>\n  <li> initializations to <code>-1</code>, <code>0</code>, <code>1</code>, <code>null</code>, <code>true</code>, <code>false</code>, <code>""</code>\n  and <code>string.Empty</code>. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C.</a> - Detect and remove unused values </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/S4IyAQ">CERT, MSC13-CPP.</a> - Detect and remove unused values </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	cert,cwe,unused	0	HTML	1576224539025	1576224539068	1	csharp
761	"ToString()" calls should not be redundant	S1858	\N	csharpsquid	<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. Similarly, explicitly\ninvoking <code>ToString()</code> when the compiler would do it implicitly is also needless code-bloat.</p>\n<p>This rule raises an issue when <code>ToString()</code> is invoked:</p>\n<ul>\n  <li> on a <code>string</code> </li>\n  <li> on a non-<code>string</code> operand to concatenation </li>\n  <li> on an argument to <code>string.Format</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar s = "foo";\nvar t = "fee fie foe " + s.ToString();  // Noncompliant\nvar someObject = new object();\nvar u = "" + someObject.ToString(); // Noncompliant\nvar v = string.Format("{0}", someObject.ToString()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar s = "foo";\nvar t = "fee fie foe " + s;\nvar someObject = new object();\nvar u = "" + someObject;\nvar v = string.Format("{0}", someObject);\n</pre>\n<h2>Exceptions</h2>\n<p>The rule does not report on value types, where leaving off the <code>ToString()</code> call would result in automatic boxing.</p>\n<pre>\nvar v = string.Format("{0}", 1.ToString());\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	clumsy,finding	0	HTML	1576224539112	1576224539114	1	csharp
618	Non-flags enums should not be used in bitwise operations	S3265	\N	csharpsquid	<p><code>enum</code>s are usually used to identify distinct elements in a set of values. However <code>enum</code>s can be treated as bit fields and\nbitwise operations can be used on them to combine the values. This is a good way of specifying multiple elements of set with a single value. When\n<code>enum</code>s are used this way, it is a best practice to mark the <code>enum</code> with the <code>FlagsAttribute</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nenum Permissions\n{\n  None = 0,\n  Read = 1,\n  Write = 2,\n  Execute = 4\n}\n// ...\n\nvar x = Permissions.Read | Permissions.Write;  // Noncompliant; enum is not marked with [Flags]\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[Flags]\nenum Permissions\n{\n  None = 0,\n  Read = 1,\n  Write = 2,\n  Execute = 4\n}\n// ...\n\nvar x = Permissions.Read | Permissions.Write;\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224533826	1576224533829	1	csharp
619	Types should be named in camel case	S101	\N	csharpsquid	<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks whether or not type names are camel cased. To reduce noise, two\nconsecutive upper case characters are allowed unless they form the whole type name. So, <code>MyXClass</code> is compliant, but <code>XC</code> on its\nown is not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass my_class {...}\nclass SOMEName42 {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\nclass SomeName42 {...}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule ignores types that are marked with <code>ComImportAttribute</code> or <code>InterfaceTypeAttribute</code>. Furthermore, the rule allows to\nhave <code>'_'</code> characters in class names inside test projects.</p>\n<pre>\nclass Some_Name___42 {...} // valid in test\nclass Some_name___42 {...} // still not valid\nclass Some_Name_XC {...} // invalid because of XC, should be Some_Name_Xc\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224533833	1576224533841	1	csharp
620	Events should be invoked	S3264	\N	csharpsquid	<p>Events that are not invoked anywhere are dead code, and there's no good reason to keep them in the source.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass UninvokedEventSample\n{\n    private event Action&lt;object, EventArgs&gt; Happened; //Noncompliant\n\n    public void RegisterEventHandler(Action&lt;object, EventArgs&gt; handler)\n    {\n        Happened += handler; //we register some event handlers\n    }\n\n    public void RaiseEvent()\n    {\n        if (Happened != null)\n        {\n            // Happened(this, null); // the event is never triggered, because this line is commented out.\n        }\n    }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	unused	0	HTML	1576224533851	1576224533852	1	csharp
621	Short-circuit logic should be used in boolean contexts	S2178	\N	csharpsquid	<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (GetTrue() | GetFalse()) // Noncompliant; both sides evaluated\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (GetTrue() || GetFalse()) // true short-circuit logic\n{\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/g4FtAg">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n  </li>\n</ul>	4	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert	0	HTML	1576224533854	1576224533856	1	csharp
675	Variables should not be self-assigned	S1656	\N	csharpsquid	<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void SetName(string name)\n{\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void SetName(string name)\n{\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	3min	\N	cert	0	HTML	1576224534888	1576224534890	2	csharp
676	"Generic.List" instances should not be part of public APIs	S3956	\N	csharpsquid	<p><code>System.Collections.Generic.List&lt;T&gt;</code> is a generic collection that is designed for performance and not inheritance. For example, it\ndoes not contain virtual members that make it easier to change the behavior of an inherited class. That means that future attempts to expand the\nbehavior will be spoiled because the extension points simply aren't there. Instead, one of the following generic collections should be used:</p>\n<ul>\n  <li> <code>System.Collections.Generic.IEnumerable&lt;T&gt;</code> </li>\n  <li> <code>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</code> </li>\n  <li> <code>System.Collections.Generic.ICollection&lt;TKey&gt;</code> </li>\n  <li> <code>System.Collections.Generic.IReadOnlyList&lt;T&gt;</code> </li>\n  <li> <code>System.Collections.Generic.IList&lt;TKey&gt;</code> </li>\n  <li> <code>System.Collections.ObjectModel.Collection&lt;T&gt;</code> </li>\n  <li> <code>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</code> </li>\n  <li> <code>System.Collections.ObjectModel.KeyedCollection&lt;TKey, Titem&gt;</code> </li>\n</ul>\n<p>This rule raises an issue every time a <code>System.Collections.Generic.List&lt;T&gt;</code> is exposed:</p>\n<ul>\n  <li> As an externally visible member. </li>\n  <li> As the return type of an externally visible method. </li>\n  <li> As a parameter type of an an externally visible method. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnamespace Foo\n{\n   public class Bar\n   {\n      public List&lt;T&gt; Method1(T arg) // Noncompliant\n      {\n           //...\n      }\n   }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnamespace Foo\n{\n   public class Bar\n   {\n      public Collection&lt;T&gt; Method1(T arg)\n      {\n           //...\n      }\n   }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	api-design	0	HTML	1576224534894	1576224534940	1	csharp
713	parameter names should match base declaration and other partial definitions	S927	\N	csharpsquid	<p>The name of a parameter in an externally visible method override does not match the name of the parameter in the base declaration of the method, or\nthe name of the parameter in the interface declaration of the method or the name of any other <code>partial</code> definition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npartial class Point\n{\n  partial void MoveVertically(int z);\n}\n\npartial class Point\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n\n  partial void MoveVertically(int y)  // Noncompliant\n  {\n    this.y = y;\n  }\n}\n\ninterface IFoo\n{\n  void Bar(int i);\n}\n\nclass Foo : IFoo\n{\n  void Bar(int z) // Noncompliant, parameter name should be i\n  {\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npartial class Point\n{\n  partial void MoveVertically(int z);\n}\n\npartial class Point\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n\n  partial void MoveVertically(int z)\n  {\n    this.z = z;\n  }\n}\n\ninterface IFoo\n{\n  void Bar(int i);\n}\n\nclass Foo : IFoo\n{\n  void Bar(int i)\n  {\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 8.3 - For each function parameter the type given in the declaration and definition shall be identical, and the return types shall\n  also be identical </li>\n  <li> MISRA C:2004, 16.4 - The identifiers used in the declaration and definition of a function shall be identical. </li>\n  <li> MISRA C++:2008, 8-4-2 - The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the\n  declaration. </li>\n  <li> MISRA C:2012, 8.3 - All declarations of an object or function shall use the same names and type qualifiers. </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/cwGTAw">CERT, DCL40-C.</a> - Do not create incompatible declarations of the same\n  function or object </li>\n</ul>	3	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	cert,misra,suspicious	0	HTML	1576224536316	1576224536360	1	csharp
714	Inner class members should not shadow outer class "static" or type members	S3218	\N	csharpsquid	<p>It's possible to name the members of an inner class the same as the <code>static</code> members of its enclosing class - possible, but a bad idea.\nThat's because maintainers may be confused about which members are being used where. Instead the inner class' members should be renamed and all the\nreferences updated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Outer\n{\n  public static int A;\n\n  public class Inner\n  {\n    public int A; //Noncompliant\n    public int MyProp\n    {\n      get { return A; }  // Returns inner A. Was that intended?\n    }\n  }\n}\n</pre>\n<p>After a rename</p>\n<pre>\nclass Outer\n{\n  public static int A;\n\n  public class Inner\n  {\n    public int B;\n    public int MyProp\n    {\n      get { return A; }  // Still compiles and runs but functionality has changed\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Outer\n{\n  public static int A;\n\n  public class Inner\n  {\n    public int InnerA;\n    public int MyProp\n    {\n      get { return InnerA; }\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/2ADEAw">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>	3	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	cert,design,pitfall	0	HTML	1576224536407	1576224536410	1	csharp
715	"Explicit" conversions of "foreach" loops should not be used	S3217	\N	csharpsquid	<p>The <code>foreach</code> statement was introduced in the C# language prior to generics to make it easier to work with the non-generic collections\navailable at that time such as <code>ArrayList</code>. The <code>foreach</code> statements allows you to downcast elements of a collection of\n<code>Object</code>s to any other type. The problem is that to achieve the cast, the <code>foreach</code> statements silently performs\n<code>explicit</code> type conversion, which at runtime can result in an <code>InvalidCastException</code>.</p>\n<p>C# code iterating on generic collections or arrays should not rely on <code>foreach</code> statement's silent <code>explicit</code>\nconversions.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit { }\npublic class Orange : Fruit { }\npublic class Apple : Fruit { }\n\nclass MyTest\n{\n  public void Test()\n  {\n    var fruitBasket = new List&lt;Fruit&gt;();\n    fruitBasket.Add(new Orange());\n    fruitBasket.Add(new Orange());\n    // fruitBasket.Add(new Apple());  // uncommenting this line will make both foreach below throw an InvalidCastException\n\n    foreach (Fruit fruit in fruitBasket)\n    {\n      var orange = (Orange)fruit; // This "explicit" conversion is hidden within the foreach loop below\n      ...\n    }\n\n    foreach (Orange orange in fruitBasket) // Noncompliant\n    {\n      ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar fruitBasket = new List&lt;Orange&gt;();\nfruitBasket.Add(new Orange());\nfruitBasket.Add(new Orange());\n// fruitBasket.Add(new Apple());  // uncommenting this line won't compile\n\nforeach (Orange orange in fruitBasket)\n{\n  ...\n}\n</pre>\n<p>or</p>\n<pre>\nvar fruitBasket = new List&lt;Fruit&gt;();\nfruitBasket.Add(new Orange());\nfruitBasket.Add(new Orange());\nfruitBasket.Add(new Apple());\n\nforeach (Orange orange in fruitBasket.OfType&lt;Orange&gt;())\n{\n  ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule ignores iterations on collections of <code>object</code>s. This includes legacy code that uses <code>ArrayList</code>. Furthermore, the\nrule does not report on cases when user defined conversions are being called. </p>	3	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	suspicious	0	HTML	1576224536414	1576224536461	1	csharp
762	Child class fields should not shadow parent class fields	S2387	\N	csharpsquid	<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at\nbest, chaos at worst. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit\n{\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry : Fruit\n{\n  private bool ripe; // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit\n{\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry : Fruit\n{\n  private bool ripened;\n  private static Color FLESH_COLOR;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. It also ignores <code>private</code> parent\nclass fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit\n{\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry : Fruit\n{\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>	4	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	confusing	0	HTML	1576224539115	1576224539118	1	csharp
763	"GC.SuppressFinalize" should not be invoked for types without destructors	S3234	\N	csharpsquid	<p><code>GC.SuppressFinalize</code> asks the Common Language Runtime not to call the finalizer of an object. This is useful when implementing the\ndispose pattern where object finalization is already handled in <code>IDisposable.Dispose</code>. However, it has no effect if there is no finalizer\ndefined in the object's type, so using it in such cases is just confusing.</p>\n<p>This rule raises an issue when <code>GC.SuppressFinalize</code> is called for objects of <code>sealed</code> types without a finalizer.</p>\n<p><strong></strong>Note:** {rule:csharpsquid:S3971} is a stricter version of this rule. Typically it makes sense to activate only one of these 2\nrules.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nsealed class MyClass\n{\n  public void Method()\n  {\n    ...\n    GC.SuppressFinalize(this); //Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nsealed class MyClass\n{\n  public void Method()\n  {\n    ...\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	confusing,unused	0	HTML	1576224539120	1576224539121	1	csharp
764	"ServiceContract" and "OperationContract" attributes should be used together	S3597	\N	csharpsquid	<p>The <code>ServiceContract</code> attribute specifies that a class or interface defines the communication contract of a Windows Communication\nFoundation (WCF) service. The service operations of this class or interface are defined by <code>OperationContract</code> attributes added to methods.\nIt doesn't make sense to define a contract without any service operations; thus, in a <code>ServiceContract</code> class or interface at least one\nmethod should be annotated with <code>OperationContract</code>. Similarly, WCF only serves <code>OperationContract</code> methods that are defined\ninside <code>ServiceContract</code> classes or interfaces; thus, this rule also checks that <code>ServiceContract</code> is added to the containing\ntype of <code>OperationContract</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[ServiceContract]\ninterface IMyService // Noncompliant\n{\n  int MyServiceMethod();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[ServiceContract]\ninterface IMyService\n{\n  [OperationContract]\n  int MyServiceMethod();\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	api-design	0	HTML	1576224539122	1576224539122	1	csharp
765	Mutable fields should not be "public static"	S2386	\N	csharpsquid	<p><code>public static</code> mutable fields of classes which are accessed directly should be protected to the degree possible. This can be done by\nreducing the accessibility of the field or by changing the return type to an immutable type.</p>\n<p>This rule raises issues for <code>public static</code> fields with a type inheriting/implementing <code>System.Array</code> or\n<code>System.Collections.Generic.ICollection&lt;T&gt;</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A\n{\n  public static string[] strings1 = {"first","second"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new List&lt;String&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported:</p>\n<ul>\n  <li> If the type of the field inherits/implements one (at least) of the following types:\n    <ul>\n      <li> <code>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</code> </li>\n      <li> <code>System.Collections.ObjectModel.ReadOnlyDictionary&lt;TKey, TValue&gt;</code> </li>\n      <li> <code>System.Collections.Immutable.IImmutableArray&lt;T&gt;</code> </li>\n      <li> <code>System.Collections.Immutable.IImmutableDictionary&lt;TKey, TValue&gt;</code> </li>\n      <li> <code>System.Collections.Immutable.IImmutableList&lt;T&gt;</code> </li>\n      <li> <code>System.Collections.Immutable.IImmutableSet&lt;T&gt;</code> </li>\n      <li> <code>System.Collections.Immutable.IImmutableStack&lt;T&gt;</code> </li>\n      <li> <code>System.Collections.Immutable.IImmutableQueue&lt;T&gt;</code> </li>\n    </ul> </li>\n  <li> If the field is <code>readonly</code> and is initialized inline with an immutable type (i.e. inherits/implements one of the types in the\n  previous list) or null. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/582.html">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/607.html">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/rwBc">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/JQLEAw">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	cert,cwe,unpredictable	0	HTML	1576224539123	1576224539167	3	csharp
622	"IEnumerable" LINQs should be simplified	S2971	\N	csharpsquid	<p>In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways <code>IEnumerable\nLINQ</code>s can be simplified</p>\n<ul>\n  <li> Use <code>OfType</code> instead of using <code>Select</code> with <code>as</code> to type cast elements and then null-checking in a query\n  expression to choose elements based on type. </li>\n  <li> Use <code>OfType</code> instead of using <code>Where</code> and the <code>is</code> operator, followed by a cast in a <code>Select</code> </li>\n  <li> Use an expression in <code>Any</code> instead of <code>Where(element =&gt; [expression]).Any()</code>. </li>\n  <li> Use <code>Count</code> instead of <code>Count()</code> when it's available. </li>\n  <li> Don't call <code>ToArray()</code> or <code>ToList()</code> in the middle of a query chain. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nseq1.Select(element =&gt; element as T).Any(element =&gt; element != null);  // Noncompliant; use OfType\nseq2.Select(element =&gt; element as T).Any(element =&gt; element != null &amp;&amp; CheckCondition(element));  // Noncompliant; use OfType\nseq3.Where(element =&gt; element is T).Select(element =&gt; element as T); // Noncompliant; use OfType\nseq4.Where(element =&gt; element is T).Select(element =&gt; (T)element); // Noncompliant; use OfType\nseq5.Where(element =&gt; [expression]).Any();  // Noncompliant; use Any([expression])\n\nvar num = seq6.Count(); // Noncompliant\nvar arr = seq.ToList().ToArray(); //Noncompliant\nvar count = seq.ToList().Count(x=&gt;[condition]); //Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nseq1.OfType&lt;T&gt;().Any();\nseq2.OfType&lt;T&gt;().Any(element =&gt; CheckCondition(element));\nseq3.OfType&lt;T&gt;();\nseq4.OfType&lt;T&gt;();\nseq5.Any(element =&gt; [expression])\n\nvar num = seq6.Count;\nvar arr = seq.ToArray();\nvar count = seq.Count(x=&gt;[condition]);\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224533857	1576224533899	1	csharp
623	Identical expressions should not be used on both sides of a binary operator	S1764	\N	csharpsquid	<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, <code>=</code>, <code>&lt;&lt;</code>, and <code>&gt;&gt;</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) // always true\n{\n  doZ();\n}\nif ( a != a ) // always false\n{\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) // if the first one is true, the second one is too\n{\n  doX();\n}\nif ( a == b || a == b ) // if the first one is true, the second one is too\n{\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; // always 0\n\nc.Equals(c);    //always true\nObject.Equals(c, c); //always true\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> {rule:csharpsquid:S1656} - Implements a check on <code>=</code>. </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	cert	0	HTML	1576224533944	1576224533988	2	csharp
677	Multiple variables should not be declared on the same line	S1659	\N	csharpsquid	<p>Declaring multiple variable on one line is difficult to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n  private int a, b; // Noncompliant\n\n  public void Method()\n  {\n    int c, d; // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass\n{\n  private int a;\n  private int b;\n\n  public void Method()\n  {\n    int c;\n    int d;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator\n  respectively </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/7wHEAw">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/VgU">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/fAAhAQ">CERT, DCL04-CPP.</a> - Do not declare more than one variable per declaration\n  </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	cert,convention,misra	0	HTML	1576224534985	1576224534987	1	csharp
678	Track use of "NotImplementedException"	S3717	\N	csharpsquid	<p><code>NotImplementedException</code> is often used to mark methods which must be implemented for the overall functionality to be complete, but\nwhich the developer wants to implement later. That's as opposed to the <code>NotSupportedException</code> which is thrown by methods which are\nrequired by base classes or interfaces, but which are not appropriate to the current class.</p>\n<p>This rule raises an exception when <code>NotImplementedException</code> is thrown.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doTheThing()\n{\n    throw new NotImplementedException();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Exceptions derived from <code>NotImplementedException</code> are ignored.</p>	1	\N	READY	cs	\N	\N	\N	\N	\N	0	HTML	1576224534989	1576224534989	1	csharp
716	Unassigned members should be removed	S3459	\N	csharpsquid	<p>Fields and auto-properties that are never assigned to hold the default values for their types. They are either pointless code or, more likely,\nmistakes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n  private int field; // Noncompliant, shouldn't it be initialized? This way the value is always default(int), 0.\n  private int Property { get; set; }  // Noncompliant\n  public void Print()\n  {\n    Console.WriteLine(field); //Will always print 0\n    Console.WriteLine(Property); //Will always print 0\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass\n{\n  private int field;\n  private int Property { get; set; } = 42;\n  public void Print()\n  {\n    field++;\n    Console.WriteLine(field);\n    Console.WriteLine(Property);\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224536507	1576224536509	1	csharp
717	Exception constructors should not throw exceptions	S3693	\N	csharpsquid	<p>It may be a good idea to raise an exception in a constructor if you're unable to fully flesh the object in question, but not in an\n<code>exception</code> constructor. If you do, you'll interfere with the exception that was originally being thrown. Further, it is highly unlikely\nthat an exception raised in the creation of an exception will be properly handled in the calling code, and the unexpected, unhandled exception will\nlead to program termination.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyException: Exception\n{\n    public void MyException()\n    {\n         if (bad_thing)\n         {\n             throw new Exception("A bad thing happened");  // Noncompliant\n          }\n    }\n}\n</pre>	4	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224536513	1576224536515	2	csharp
718	Control flow statements "if", "switch", "for", "foreach", "while", "do"  and "try" should not be nested too deeply	S134	\N	csharpsquid	<p>Nested <code>if</code>, <code>switch</code>, <code>for</code>, <code>foreach</code>, <code>while</code>, <code>do</code>, and <code>try</code>\nstatements are key ingredients for making what's known as "Spaghetti code".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nif (condition1) // Compliant - depth = 1\n{\n  /* ... */\n  if (condition2) // Compliant - depth = 2\n  {\n    /* ... */\n    for(int i = 0; i &lt; 10; i++) // Compliant - depth = 3, not exceeding the limit\n    {\n      /* ... */\n      if (condition4) // Noncompliant - depth = 4\n      {\n        if (condition5) // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n        {\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	brain-overload	0	HTML	1576224536519	1576224536564	1	csharp
766	Caller information arguments should not be provided explicitly	S3236	\N	csharpsquid	<p>Caller information attributes: <code>CallerFilePathAttribute</code> and <code>CallerLineNumberAttribute</code> provide a way to get information\nabout the caller of a method through optional parameters. But the arguments for these optional parameters are only generated if they are not\nexplicitly defined in the call. Thus, specifying the argument values defeats the purpose of the attributes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid TraceMessage(string message,\n  [CallerFilePath] string filePath = null,\n  [CallerLineNumber] int lineNumber = 0)\n{\n  /* ... */\n}\n\nvoid MyMethod()\n{\n  TraceMessage("my message", "A.B.C.Foo.cs", 42); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid TraceMessage(string message,\n  [CallerFilePath] string filePath = "",\n  [CallerLineNumber] int lineNumber = 0)\n{\n  /* ... */\n}\n\nvoid MyMethod()\n{\n  TraceMessage("my message");\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>CallerMemberName</code> is not checked to avoid False-Positives with WPF/UWP applications.</p>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	suspicious	0	HTML	1576224539213	1576224539214	1	csharp
767	Redundant parentheses should not be used	S3235	\N	csharpsquid	<p>Redundant parentheses are simply wasted keystrokes, and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[MyAttribute()] //Noncompliant\nclass MyClass\n{\n  public int MyProperty { get; set; }\n  public static MyClass CreateNew(int propertyValue)\n  {\n    return new MyClass() //Noncompliant\n    {\n      MyProperty = propertyValue\n    };\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[MyAttribute]\nclass MyClass\n{\n  public int MyProperty { get; set; }\n  public static MyClass CreateNew(int propertyValue)\n  {\n    return new MyClass\n    {\n      MyProperty = propertyValue\n    };\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	cert,finding,unused	0	HTML	1576224539216	1576224539217	1	csharp
768	One-way "OperationContract" methods should have "void" return type	S3598	\N	csharpsquid	<p>When declaring a Windows Communication Foundation (WCF) <code>OperationContract</code> method one-way, that service method won't return any result,\nnot even an underlying empty confirmation message. These are fire-and-forget methods that are useful in event-like communication. Specifying a return\ntype therefore does not make sense.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[ServiceContract]\ninterface IMyService\n{\n  [OperationContract(IsOneWay = true)]\n  int SomethingHappened(int parameter); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[ServiceContract]\ninterface IMyService\n{\n  [OperationContract(IsOneWay = true)]\n  void SomethingHappened(int parameter);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule doesn't report if <code>OperationContractAttribute.AsyncPattern</code> is set to <code>true</code>.</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224539219	1576224539220	2	csharp
624	Strings should not be concatenated using '+' in a loop	S1643	\N	csharpsquid	<p><code>StringBuilder</code> is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring str = "";\nfor (int i = 0; i &lt; arrayOfStrings.Length ; ++i)\n{\n  str = str + arrayOfStrings[i];\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuilder bld = new StringBuilder();\nfor (int i = 0; i &lt; arrayOfStrings.Length; ++i)\n{\n  bld.Append(arrayOfStrings[i]);\n}\nstring str = bld.ToString();\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	performance	0	HTML	1576224534032	1576224534033	1	csharp
625	Events should have proper arguments	S4220	\N	csharpsquid	<p>When raising an event, two arguments are expected by the <code>EventHandler</code> delegate: Sender and event-data. There are three guidelines\nregarding these parameters:</p>\n<ul>\n  <li> Do not pass <code>null</code> as the sender when raising a non-static event. </li>\n  <li> Do pass <code>null</code> as the sender when raising a static event. </li>\n  <li> Do not pass <code>null</code> as the event-data. If no data should be passed, then <code>EventArgs.Empty</code> should be used. </li>\n</ul>\n<p>This rule raises an issue when any of these guidelines is not met.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    public event EventHandler ThresholdReached;\n\n    protected virtual void OnThresholdReached(EventArgs e)\n    {\n        ThresholdReached?.Invoke(null, e); // Noncompliant\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n  class Foo\n  {\n    public event EventHandler ThresholdReached;\n\n    protected virtual void OnThresholdReached(EventArgs e)\n    {\n        ThresholdReached?.Invoke(this, e);\n    }\n  }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	pitfall	0	HTML	1576224534034	1576224534034	1	csharp
626	Static fields should not be updated in constructors	S3010	\N	csharpsquid	<p>Assigning a value to a <code>static</code> field in a constructor could cause unreliable behavior at runtime since it will change the value for all\ninstances of the class.</p>\n<p>Instead remove the field's <code>static</code> modifier, or initialize it statically.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person\n{\n  private static DateTime dateOfBirth;\n  private static int expectedFingers;\n\n  public Person(DateTime birthday)\n  {\n    dateOfBirth = birthday;  // Noncompliant; now everyone has this birthday\n    expectedFingers = 10;  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person\n{\n  private DateTime dateOfBirth;\n  private static int expectedFingers = 10;\n\n  public Person(DateTime birthday)\n  {\n    this.dateOfBirth = birthday;\n  }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	\N	0	HTML	1576224534035	1576224534036	2	csharp
627	Implementations should be provided for "partial" methods	S3251	\N	csharpsquid	<p><code>partial</code> methods allow an increased degree of flexibility in programming a system. Hooks can be added to generated code by invoking\nmethods that define their signature, but might not have an implementation yet. But if the implementation is still missing when the code makes it to\nproduction, the compiler silently removes the call. In the best case scenario, such calls simply represent cruft, but in they worst case they are\ncritical, missing functionality, the loss of which will lead to unexpected results at runtime.</p>\n<p>This rule raises an issue for partial methods for which no implementation can be found in the assembly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npartial class C\n{\n  partial void M(); //Noncompliant\n\n  void OtherM()\n  {\n    M(); //Noncompliant. Will be removed.\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	suspicious	0	HTML	1576224534037	1576224534038	1	csharp
679	Disposable types should declare finalizers	S4002	\N	csharpsquid	<p>This rule raises an issue when a disposable type contains fields of the following types and does not implement a finalizer:</p>\n<ul>\n  <li> <code>System.IntPtr</code> </li>\n  <li> <code>System.UIntPtr</code> </li>\n  <li> <code>System.Runtime.InteropService.HandleRef</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n  public class Foo : IDisposable // Noncompliant: Doesn't have a finalizer\n  {\n    private IntPtr myResource;\n    private bool disposed = false;\n\n    protected virtual void Dispose(bool disposing)\n    {\n      if (!disposed)\n      {\n        // Dispose of resources held by this instance.\n        FreeResource(myResource);\n        disposed = true;\n\n        // Suppress finalization of this disposed instance.\n        if (disposing)\n        {\n          GC.SuppressFinalize(this);\n        }\n      }\n    }\n\n    public void Dispose() {\n      Dispose(true);\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace MyLibrary\n{\n  public class Foo : IDisposable\n  {\n    private IntPtr myResource;\n    private bool disposed = false;\n\n    protected virtual void Dispose(bool disposing)\n    {\n      if (!disposed)\n      {\n        // Dispose of resources held by this instance.\n        FreeResource(myResource);\n        disposed = true;\n\n        // Suppress finalization of this disposed instance.\n        if (disposing)\n        {\n          GC.SuppressFinalize(this);\n        }\n      }\n    }\n\n    ~Foo()\n    {\n      Dispose(false);\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Related: {rule:csharpsquid:S3881} - "IDisposable" should be implemented correctly </li>\n</ul>	2	\N	READY	cs	\N	\N	\N	\N	\N	0	HTML	1576224534992	1576224534992	1	csharp
719	"[DefaultValue]" should not be used when "[DefaultParameterValue]" is meant	S3451	\N	csharpsquid	<p>The use of <code>[DefaultValue]</code> with <code>[Optional]</code> has no more effect than <code>[Optional]</code> alone. That's because\n<code>[DefaultValue]</code> doesn't actually do anything; it merely indicates the intent for the value. More than likely, <code>[DefaultValue]</code>\nwas used in confusion instead of <code>[DefaultParameterValue]</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n    public void DoStuff([Optional][DefaultValue(4)]int i, int j = 5)  // Noncompliant\n    {\n        Console.WriteLine(i);\n    }\n\n    public static void Main()\n    {\n        new MyClass().DoStuff(); // prints 0\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass\n{\n    public void DoStuff([Optional][DefaultParameterValue(4)]int i, int j = 5)\n    {\n        Console.WriteLine(i);\n    }\n\n    public static void Main()\n    {\n        new MyClass().DoStuff(); // prints 4\n    }\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	suspicious	0	HTML	1576224536610	1576224536612	1	csharp
720	Generic exceptions should not be ignored	S2486	\N	csharpsquid	<p>When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.</p>\n<p>This rule only reports on empty catch clauses that catch generic <code>Exception</code>s.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring text = "";\ntry\n{\n  text = File.ReadAllText(fileName);\n}\ncatch (Exception exc) // Noncompliant\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstring text = "";\ntry\n{\n  text = File.ReadAllText(fileName);\n}\ncatch (Exception exc)\n{\n  logger.Log(exc);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, it is not considered to be empty.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/391.html">MITRE, CWE-391</a> - Unchecked Error Condition </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	1h	\N	cwe,error-handling,suspicious	0	HTML	1576224536614	1576224536615	1	csharp
721	Properties should not make collection or array copies	S2365	\N	csharpsquid	<p>Most developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will\nbe much slower than a simple field access, contrary to the caller's likely expectations. Therefore, such properties should be refactored into methods\nso that callers are not surprised by unexpectedly poor performance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate List&lt;string&gt; _foo = new List&lt;string&gt; { "a", "b", "c" };\npublic IEnumerable&lt;string&gt; Foo  // Noncompliant\n{\n    get\n    {\n        return _foo.ToList();\n    }\n}\n\nprivate string[] _bar = new string[] { "a", "b", "c" };\npublic IEnumerable&lt;string&gt; Bar // Noncompliant\n{\n    get\n    {\n        return (string[])_bar.Clone();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate List&lt;string&gt; _foo = new List&lt;string&gt; { "a", "b", "c" };\nprivate string[] _bar = new string[] { "a", "b", "c" };\n\npublic IEnumerable&lt;string&gt; GetFoo()\n{\n    return _foo.ToList();\n}\n\npublic IEnumerable&lt;string&gt; GetBar()\n{\n    return (string[])_bar.Clone();\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	api-design,performance	0	HTML	1576224536621	1576224536622	1	csharp
722	"switch/Select" statements should end with "default/Case Else" clauses	S131	\N	csharpsquid	<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken. Even when the <code>switch</code> covers all current values of an <code>enum</code>, a\n<code>default</code> case should still be used because there is no guarantee that the <code>enum</code> won't be extended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint foo = 42;\nswitch (foo) // Noncompliant\n{\n  case 0:\n    Console.WriteLine("foo = 0");\n    break;\n  case 42:\n    Console.WriteLine("foo = 42");\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint foo = 42;\nswitch (foo) // Compliant\n{\n  case 0:\n    Console.WriteLine("foo = 0");\n    break;\n  case 42:\n    Console.WriteLine("foo = 42");\n    break;\n  default:\n    throw new InvalidOperationException("Unexpected value foo = " + foo);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n</ul>	3	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,misra	0	HTML	1576224536624	1576224536669	1	csharp
769	"value" parameters should be used	S3237	\N	csharpsquid	<p>In property and indexer <code>set</code> methods, and in event <code>add</code> and <code>remove</code> methods, the implicit <code>value</code>\nparameter holds the value the accessor was called with. Not using the <code>value</code> means that the accessor ignores the caller's intent which\ncould cause unexpected results at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate int count;\npublic int Count\n{\n  get { return count; }\n  set { count = 42; } // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate int count;\npublic int Count\n{\n  get { return count; }\n  set { count = value; }\n}\n</pre>\n<p>or</p>\n<pre>\npublic int Count\n{\n  get { return count; }\n  set { throw new InvalidOperationException(); }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when the setter is empty and part of the implementation of an <code>interface</code> . The assumption is that this\npart of the interface is not meaningful to that particular implementation. A good example of that would be a "sink" logger that discards any logs.</p>	4	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224539222	1576224539223	1	csharp
770	Non-flags enums should not be marked with "FlagsAttribute"	S4070	\N	csharpsquid	<p>This rule raises an issue when an externally visible enumeration is marked with <code>FlagsAttribute</code> and one, or more, of its values is not\na power of 2 or a combination of the other defined values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    [FlagsAttribute]\n    public enum Color // Noncompliant, Orange is neither a power of two, nor a combination of any of the defined values\n    {\n        None    = 0,\n        Red     = 1,\n        Orange  = 3,\n        Yellow  = 4\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public enum Color // Compliant - no FlagsAttribute attribute\n    {\n        None = 0,\n        Red = 1,\n        Orange = 3,\n        Yellow = 4\n    }\n\n    [FlagsAttribute]\n    public enum Days\n    {\n        None = 0,\n        Monday = 1,\n        Tuesday = 2,\n        Wednesday = 4,\n        Thursday = 8,\n        Friday = 16,\n        All = Monday| Tuesday | Wednesday | Thursday | Friday    // Compliant - combination of other values\n    }\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224539224	1576224539225	1	csharp
771	Unused local variables should be removed	S1481	\N	csharpsquid	<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int NumberOfMinutes(int hours)\n{\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int NumberOfMinutes(int hours)\n{\n  return hours * 60;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Unused locally created resources in a <code>using</code> statement are not reported.</p>\n<pre>\nusing(var t = new TestTimer()) // t never used, but compliant.\n{\n  //...\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	unused	0	HTML	1576224539226	1576224539227	1	csharp
628	Default parameter values should not be passed as arguments	S3254	\N	csharpsquid	<p>Specifying the default parameter values in a method call is redundant. Such values should be omitted in the interests of readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void M(int x, int y=5, int z = 7) { /* ... */ }\n\n// ...\nM(1, 5); //Noncompliant, y has the default value\nM(1, z: 7); //Noncompliant, z has the default value\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void M(int x, int y=5, int z = 7) { /* ... */ }\n\n// ...\nM(1);\nM(1);\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	clumsy,finding	0	HTML	1576224534039	1576224534040	1	csharp
629	URIs should not be hardcoded	S1075	\N	csharpsquid	<p>Hardcoding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may\nnot exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems\nusually differ from the development environment, ...etc. For all those reasons, a URI should never be hardcoded. Instead, it should be replaced by\ncustomizable parameter.</p>\n<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hardcoded.</p>\n<p>This rule raises an issue when URI's or path delimiters are hardcoded.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	cert	0	HTML	1576224534042	1576224534043	1	csharp
630	Constructor and destructor declarations should not be redundant	S3253	\N	csharpsquid	<p>Since the compiler will automatically invoke the base type's no-argument constructor, there's no need to specify its invocation explicitly. Also,\nwhen only a single <code>public</code> parameterless constructor is defined in a class, then that constructor can be removed because the compiler\nwould generate it automatically. Similarly, empty <code>static</code> constructors and empty destructors are also wasted keystrokes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass X\n{\n  public X() { } // Noncompliant\n  static X() { }  // Noncompliant\n  ~X() { } // Noncompliant\n\n  ...\n}\n\nclass Y : X\n{\n  public Y(int parameter) : base() // Noncompliant\n  {\n    /* does something with the parameter */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass X\n{\n  ...\n}\n\nclass Y : X\n{\n  public Y(int parameter)\n  {\n    /* does something with the parameter */\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	clumsy,finding	0	HTML	1576224534044	1576224534045	1	csharp
631	"string.IsNullOrEmpty" should be used	S3256	\N	csharpsquid	<p>Using <code>string.Equals</code> to determine if a string is empty is significantly slower than using <code>string.IsNullOrEmpty()</code> or\nchecking for <code>string.Length == 0</code>. <code>string.IsNullOrEmpty()</code> is both clear and concise, and therefore preferred to laborious,\nerror-prone, manual null- and emptiness-checking.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n"".Equals(name); // Noncompliant\n!name.Equals(""); // Noncompliant\nname.Equals(string.Empty); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nname != null &amp;&amp; name.Length &gt; 0 // Compliant but more error prone\n!string.IsNullOrEmpty(name)\nstring.IsNullOrEmpty(name)\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224534046	1576224534046	1	csharp
680	"base.Equals" should not be used to check for reference equality in "Equals" if "base" is not "object"	S3397	\N	csharpsquid	<p><code>object.Equals()</code> overrides can be optimized by checking first for reference equality between <code>this</code> and the parameter. This\ncheck can be implemented by calling <code>object.ReferenceEquals()</code> or <code>base.Equals()</code>, where <code>base</code> is\n<code>object</code>. However, using <code>base.Equals()</code> is a maintenance hazard because while it works if you extend <code>Object</code>\ndirectly, if you introduce a new base class that overrides <code>Equals</code>, it suddenly stops working.</p>\n<p>This rule raises an issue if <code>base.Equals()</code> is used but <code>base</code> is not <code>object</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Base\n{\n  private int baseField;\n\n  public override bool Equals(object other)\n  {\n    if (base.Equals(other)) // Okay; base is object\n    {\n      return true;\n    }\n\n    return this.baseField == ((Base)other).baseField;\n  }\n}\n\nclass Derived : Base\n{\n  private int derivedField;\n\n  public override bool Equals(object other)\n  {\n    if (base.Equals(other))  // Noncompliant\n    {\n      return true;\n    }\n\n    return this.derivedField == ((Derived)other).derivedField;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Base\n{\n  private int baseField;\n\n  public override bool Equals(object other)\n  {\n    if (object.ReferenceEquals(this, other))  // base.Equals is okay here, but object.ReferenceEquals is better\n    {\n      return true;\n    }\n\n    return this.baseField == ((Base)other).baseField;\n  }\n}\n\nclass Derived : Base\n{\n  private int derivedField;\n\n  public override bool Equals(object other)\n  {\n    if (object.ReferenceEquals(this, other))\n    {\n      return true;\n    }\n\n    return base.Equals(other) &amp;&amp; this.derivedField == ((Derived)other).derivedField;\n  }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224535039	1576224535085	2	csharp
681	TestCases should contain tests	S2187	\N	csharpsquid	<p>There's no point in having an NUnit <code>TestFixture</code> nor a MSTest <code>TestClass</code> without any test methods (<code>Test</code> or\n<code>TestCase</code> for NUnit and <code>TestMethod</code> for MSTest). This could lead a maintainer to assume a class is covered by tests even\nthough it is not.</p>\n<p>This rule raises an issue when classes are marked with either <code>TestFixture</code> or <code>TestClass</code> but don't contain any test\nmethods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[TestFixture]\npublic class SomeClassTest { } // Noncompliant - no test\n\n[TestClass]\npublic class SomeOtherClassTest { } // Noncompliant - no test\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[TestFixture]\npublic class SomeClassTest\n{\n    [Test]\n    public void SomeMethodShouldReturnTrue() { }\n}\n\n[TestClass]\npublic class SomeOtherClassTest\n{\n    [TestMethod]\n    public void SomeMethodShouldReturnTrue() { }\n}\n</pre>	4	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	confusing,tests,unused	0	HTML	1576224535130	1576224535133	1	csharp
723	Values should not be uselessly incremented	S2123	\N	csharpsquid	<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int PickNumber()\n{\n  int i = 0;\n  int j = 0;\n\n  i = i++; // Noncompliant; i is still zero\n\n  return j++; // Noncompliant; 0 returned\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int PickNumber()\n{\n  int i = 0;\n  int j = 0;\n\n  i++;\n  return ++j;\n}\n</pre>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	unused	0	HTML	1576224536714	1576224536717	2	csharp
724	Classes should not have only "private" constructors	S3453	\N	csharpsquid	<p>A class with only <code>private</code> constructors can't be instantiated, thus, it seems to be pointless code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass // Noncompliant\n{\n  private MyClass() { ... }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass\n{\n  public MyClass() { ... }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Classes that themselves access their private constructors (singletons or smart enums) are ignored. Classes with only <code>static</code> members\nare also ignored because they are covered by Rule S1118.</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	design	0	HTML	1576224536721	1576224536724	2	csharp
725	"Any()" should be used to test for emptiness	S1155	\N	csharpsquid	<p>Using <code>.Count()</code> to test for emptiness works, but using <code>.Any()</code> makes the intent clearer, and the code more readable.\nHowever, there are some cases where special attention should be paid:</p>\n<p>- if the collection is an <code>EntityFramework</code> or other ORM query, calling <code>.Count()</code> will cause executing a potentially massive\nSQL query and could put a large overhead on the application database. Calling <code>.Any()</code> will also connect to the database, but will generate\nmuch more efficient SQL.</p>\n<p>- if the collection is part of a LINQ query that contains <code>.Select()</code> statements that create objects, a large amount of memory could be\nunnecessarily allocated. Calling <code>.Any()</code> will be much more efficient because it will execute fewer iterations of the enumerable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate static bool HasContent(IEnumerable&lt;string&gt; strings)\n{\n  return strings.Count() &gt; 0;  // Noncompliant\n}\n\nprivate static bool HasContent2(IEnumerable&lt;string&gt; strings)\n{\n  return strings.Count() &gt;= 1;  // Noncompliant\n}\n\nprivate static bool IsEmpty(IEnumerable&lt;string&gt; strings)\n{\n  return strings.Count() == 0;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static bool HasContent(IEnumerable&lt;string&gt; strings)\n{\n  return strings.Any();\n}\n\nprivate static bool IsEmpty(IEnumerable&lt;string&gt; strings)\n{\n  return !strings.Any();\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	clumsy	0	HTML	1576224536728	1576224536775	1	csharp
726	"string.ToCharArray()" should not be called redundantly	S3456	\N	csharpsquid	<p><code>ToCharArray</code> can be omitted when the operation on the array could have been done directly on the string, such as when iterating over\nthe characters in a string, and when accessing a character in a string via an array index. In those cases, explicit <code>ToCharArray</code> calls\nshould be omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring str = "some string";\nforeach (var c in str.ToCharArray()) // Noncompliant\n{\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstring str = "some string";\nforeach (var c in str)\n{\n  // ...\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	clumsy	0	HTML	1576224536820	1576224536822	2	csharp
772	Method overloads with default parameter values should not overlap	S3427	\N	csharpsquid	<p>The rules for method resolution are complex and perhaps not properly understood by all coders. Having overloads with optional parameter values\nmakes the matter even harder to understand. </p>\n<p>This rule raises an issue when an overload with default parameter values is hidden by one without the optional parameters. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  void Print(string[] messages) {...}\n  void Print(string[] messages, string delimiter = "\\n") {...} // Noncompliant; default parameter value is hidden by overload\n}\n\n// ...\nMyClass myClass = new MyClass();\n\nmyClass.Print(new string[3] {"yes", "no", "maybe"});  // which version of Print will be called?\n</pre>	4	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	pitfall,unused	0	HTML	1576224539229	1576224539230	1	csharp
773	Method overrides should not change parameter defaults	S1006	\N	csharpsquid	<p>Default arguments are determined by the static type of the object. If a default argument is different for a parameter in an overriding method, the\nvalue used in the call will be different when calls are made via the base or derived object, which may be contrary to developer expectations. </p>\n<p>Default parameter values are useless in explicit interface implementations, because the static type of the object will always be the implemented\ninterface. Thus, specifying default values is useless and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Base\n{\n  public virtual void Write(int i = 42)\n  {\n    Console.WriteLine(i);\n  }\n}\n\npublic class Derived : Base\n{\n  public override void Write(int i = 5) // Noncompliant\n  {\n    Console.WriteLine(i);\n  }\n}\n\npublic class Program\n{\n  public static void Main()\n  {\n    var derived = new Derived();\n    derived.Write(); // writes 5\n    Print(derived);  // writes 42; was that expected?\n  }\n  private void Print(Base item)\n  {\n    item.Write();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Base\n{\n  public virtual void Write(int i = 42)\n  {\n    Console.WriteLine(i);\n  }\n}\n\npublic class Derived : Base\n{\n  public override void Write(int i = 42)\n  {\n    Console.WriteLine(i);\n  }\n}\n\npublic class Program\n{\n  public static void Main()\n  {\n    var derived = new Derived();\n    derived.Write(); // writes 42\n    Print(derived);  // writes 42\n  }\n  private void Print(Base item)\n  {\n    item.Write();\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 8-3-1 - Parameters in a overriding virtual function shall either use the same default arguments as the function they override,\n  or else shall not specify any default arguments. </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/-YBS">CERT, OOP04-CPP.</a> - Prefer not to give virtual functions default argument\n  initializers </li>\n</ul>	3	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	cert,misra,pitfall	0	HTML	1576224539232	1576224539275	1	csharp
774	Runtime type checking should be simplified	S2219	\N	csharpsquid	<p>To check the type of an object there are several options:</p>\n<ul>\n  <li> <code>expr is SomeType</code> or <code>expr.GetType() == typeof(SomeType)</code> if the type is known at compile time, </li>\n  <li> <code>typeInstance.IsInstanceOfType(expr)</code> if the type is calculated during runtime. </li>\n</ul>\n<p>If runtime calculated <code>Type</code>s need to be compared:</p>\n<ul>\n  <li> <code>typeInstance1.IsAssignableFrom(typeInstance2)</code>. </li>\n</ul>\n<p>Depending on whether the type is returned by a <code>GetType()</code> or <code>typeof()</code> call, the <code>IsAssignableFrom()</code> and\n<code>IsInstanceOfType()</code> might be simplified. Similarly, if the type is <code>sealed</code>, the type comparison with <code>==</code> can be\nconverted to an <code>is</code> call. Simplifying the calls also make <code>null</code> checking unnecessary because both <code>is</code> and\n<code>IsInstanceOfType</code> performs it already.</p>\n<p>Finally, utilizing the most concise language constructs for type checking makes the code more readable, so</p>\n<ul>\n  <li> <code>expr as T != null</code> checks should be simplified to <code>expr is T</code>, and </li>\n  <li> <code>expr is T</code> should be converted to <code>expr != null</code>, when <code>expr</code> is of type <code>T</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Fruit { }\nsealed class Apple : Fruit { }\n\nclass Program\n{\n  static void Main()\n  {\n    var apple = new Apple();\n    var b = apple != null &amp;&amp; apple.GetType() == typeof (Apple); // Noncompliant\n    b = typeof(Apple).IsInstanceOfType(apple); // Noncompliant\n    if (apple != null)\n    {\n      b = typeof(Apple).IsAssignableFrom(apple.GetType()); // Noncompliant\n    }\n    var appleType = typeof (Apple);\n    if (apple != null)\n    {\n      b = appleType.IsAssignableFrom(apple.GetType()); // Noncompliant\n    }\n\n    Fruit f = apple;\n    if (f as Apple != null) // Noncompliant\n    {\n    }\n    if (apple is Apple) // Noncompliant\n    {\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Fruit { }\nsealed class Apple : Fruit { }\n\nclass Program\n{\n  static void Main()\n  {\n    var apple = new Apple();\n    var b = apple is Apple;\n    b = apple is Apple;\n    b = apple is Apple;\n    var appleType = typeof(Apple);\n    b = appleType.IsInstanceOfType(apple);\n\n    Fruit f = apple;\n    if (f is Apple)\n    {\n    }\n    if (apple != null)\n    {\n    }\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Calling <code>GetType</code> on an object of <code>Nullable&lt;T&gt;</code> type returns the underlying generic type parameter <code>T</code>, thus\na comparison with <code>typeof(Nullable&lt;T&gt;)</code> can't be simplified to use the <code>is</code> operator, which doesn't make difference\nbetween <code>T</code> and <code>T?</code>.</p>\n<pre>\nint? i = 42;\nbool condition = i.GetType() == typeof(int?); // false;\ncondition = i is int?; // true\n</pre>\n<p>No issue is reported on <code>expr is T</code> expressions if either operand of the <code>is</code> operator is a value type. In that case CS0183\nor CS0184 reports.</p>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224539320	1576224539364	1	csharp
632	Attribute, EventArgs, and Exception type names should end with the type being extended	S3376	\N	csharpsquid	<p>Adherence to the standard naming conventions makes your code not only more readable, but more usable. For instance, <code>class FirstAttribute :\nAttribute</code> can be used simply with <code>First</code>, but you must use the full name for <code>class AttributeOne : Attribute</code>.</p>\n<p>This rule raises an issue when classes extending <code>Attribute</code>, <code>EventArgs</code>, or <code>Exception</code>, do not end with their\nparent class names.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass AttributeOne : Attribute  // Noncompliant\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass FirstAttribute : Attribute\n{\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If a class' direct base class doesn't follow the convention, then no issue is reported on the class itself, regardless of whether or not it\nconforms to the convention.</p>\n<pre>\nclass Timeout : Exception // Noncompliant\n{\n}\nclass ExtendedTimeout : Timeout // Ignored; doesn't conform to convention, but the direct base doesn't conform either\n{\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224534047	1576224534048	1	csharp
633	Two branches in a conditional structure should not have exactly the same implementation	S1871	\N	csharpsquid	<p>Having two <code>cases</code> in the same <code>switch</code> statement or branches in the same <code>if</code> structure with the same\nimplementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an\n<code>if</code> structure they should be combined, or for a <code>switch</code>, one should fall through to the other.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i)\n{\n  case 1:\n    DoSomething();\n    break;\n  case 2:\n    DoSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    DoSomething();\n    break;\n  default:\n    DoTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10)\n{\n  DoTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20)\n{\n  DoTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50)\n{\n  DoTheThing();  // Noncompliant; duplicates first condition\n}\nelse\n{\n  DoTheRest();\n}\n\nif (b == 0)\n{\n  DoOneMoreThing();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    DoSomething();\n    break;\n  case 2:\n    DoSomethingDifferent();\n    break;\n  default:\n    DoTheRest();\n}\n\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50))\n{\n  DoTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20)\n{\n  DoTheOtherThing();\n}\nelse\n{\n  DoTheRest();\n}\n\nDoOneMoreThing();\n</pre>\n<p>or</p>\n<pre>\nswitch (i)\n{\n  case 1:\n    DoSomething();\n    break;\n  case 2:\n    DoSomethingDifferent();\n    break;\n  case 3:\n    DoThirdThing();\n    break;\n  default:\n    DoTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10)\n{\n  DoTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20)\n{\n  DoTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50)\n{\n  DoTheThirdThing();\n}\nelse\n{\n  DoTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	design,suspicious	0	HTML	1576224534049	1576224534092	1	csharp
634	Declarations and initializations should be as concise as possible	S3257	\N	csharpsquid	<p>Unnecessarily verbose declarations and initializations make it harder to read the code, and should be simplified.</p>\n<p>Specifically the following should be omitted when they can be inferred:</p>\n<ul>\n  <li> array element type </li>\n  <li> array size </li>\n  <li> <code>new DelegateType</code> </li>\n  <li> <code>new Nullable&lt;Type&gt;</code> </li>\n  <li> object or collection initializers (<code>{</code>}) </li>\n  <li> type of lambda expression parameters </li>\n  <li> parameter declarations of anonymous methods when the parameters are not used. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar l = new List&lt;int&gt;() {}; // Noncompliant, {} can be removed\nvar o = new object() {}; // Noncompliant, {} can be removed\n\nvar ints = new int[] {1, 2, 3}; // Noncompliant, int can be omitted\nints = new int[3] {1, 2, 3}; // Noncompliant, the size specification can be removed\n\nint? i = new int?(5); // Noncompliant new int? could be omitted, it can be inferred from the declaration, and there's implicit conversion from T to T?\nvar j = new int?(5);\n\nFunc&lt;int, int&gt; f1 = (int i) =&gt; 1; //Noncompliant, can be simplified\n\nclass Class\n{\n    private event EventHandler MyEvent;\n\n    public Class()\n    {\n        MyEvent += new EventHandler((a,b)=&gt;{ }); // Noncompliant, needlessly verbose\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar l = new List&lt;int&gt;();\nvar o = new object();\n\nvar ints = new [] {1, 2, 3};\nints = new [] {1, 2, 3};\n\nint? i = 5;\nvar j = new int?(5);\n\nFunc&lt;int, int&gt; f1 = (i) =&gt; 1;\n\nclass Class\n{\n    private event EventHandler MyEvent;\n\n    public Class()\n    {\n        MyEvent += (a,b)=&gt;{ };\n    }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	1min	\N	clumsy,finding	0	HTML	1576224534138	1576224534184	1	csharp
682	General exceptions should never be thrown	S112	\N	csharpsquid	<p>Throwing such general exceptions as <code>Exception</code>, <code>SystemException</code>, <code>ApplicationException</code>,\n<code>IndexOutOfRangeException</code>, <code>NullReferenceException</code>, <code>OutOfMemoryException</code> and\n<code>ExecutionEngineException</code> prevents calling methods from handling true, system-generated exceptions differently than application-generated\nerrors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void DoSomething(object obj)\n{\n  if (obj == null)\n  {\n    throw new NullReferenceException("obj");  // Noncompliant\n  }\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void DoSomething(object obj)\n{\n  if (obj == null)\n  {\n    throw new ArgumentNullException("obj");\n  }\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/397.html">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/BoB3AQ">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	cert,cwe,error-handling	0	HTML	1576224535137	1576224535140	1	csharp
683	Collection properties should be readonly	S4004	\N	csharpsquid	<p>A writable collection property can be replaced by a completely different collection. Making it <code>readonly</code> prevents that while still\nallowing individual members to be set. If you want to allow the replacement of the whole collection the recommended pattern is to implement a method\nto remove all the elements (e.g. <code>System.Collections.List&lt;T&gt;.Clear</code>) and a method to populate the collection (e.g.\n<code>System.Collections.List&lt;T&gt;.AddRange</code>).</p>\n<p>This rule raises an issue when an externally visible writable property is of a type that implements <code>System.Collections.ICollection</code> or\n<code>System.Collections.Generic.ICollection&lt;T&gt;</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\nusing System.Collections;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    List&lt;string&gt; strings;\n\n    public List&lt;string&gt; SomeStrings\n    {\n      get { return strings; }\n      set { strings = value; } // Noncompliant\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nusing System;\nusing System.Collections;\n\nnamespace MyLibrary\n{\n  public class Foo\n  {\n    List&lt;string&gt; strings;\n\n    public readonly List&lt;string&gt; SomeStrings\n    {\n      get { return strings; }\n    }\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not raise issues for <code>string</code>, <code>Array</code> and <code>PermissionSet</code>.</p>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224535144	1576224535189	1	csharp
727	Empty "case" clauses that fall through to the "default" should be omitted	S3458	\N	csharpsquid	<p>Empty <code>case</code> clauses that fall through to the default are useless. Whether or not such a <code>case</code> is present, the\n<code>default</code> clause will be invoked. Such <code>case</code>s simply clutter the code, and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch(ch)\n{\n  case 'a' :\n    HandleA();\n    break;\n  case 'b' :\n    HandleB();\n    break;\n  case 'c' :  // Noncompliant\n  default:\n    HandleTheRest();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch(ch)\n{\n  case 'a' :\n    HandleA();\n    break;\n  case 'b' :\n    HandleB();\n    break;\n  default:\n    HandleTheRest();\n    break;\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	1min	\N	clumsy,finding	0	HTML	1576224536825	1576224536826	1	csharp
728	"ConfigureAwait(false)" should be used	S3216	\N	csharpsquid	<p>After an <code>await</code>ed <code>Task</code> has executed, you can continue execution in the original, calling thread or any arbitrary thread.\nUnless the rest of the code needs the context from which the <code>Task</code> was spawned, <code>Task.ConfigureAwait(false)</code> should be used to\nkeep execution in the <code>Task</code> thread to avoid the need for context switching and the possibility of deadlocks.</p>\n<p>This rule raises an issue when code in a class library <code>await</code>s a <code>Task</code> and continues execution in the original calling\nthread.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar response = await httpClient.GetAsync(url);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar response = await httpClient.GetAsync(url).ConfigureAwait(false);\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	multi-threading,suspicious	0	HTML	1576224536829	1576224536830	1	csharp
729	"interface" instances should not be cast to concrete types	S3215	\N	csharpsquid	<p>Needing to cast from an <code>interface</code> to a concrete type indicates that something is wrong with the abstractions in use, likely that\nsomething is missing from the <code>interface</code>. Instead of casting to a discrete type, the missing functionality should be added to the\n<code>interface</code>. Otherwise there is a risk of runtime exceptions.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface IMyInterface\n{\n  void DoStuff();\n}\n\npublic class MyClass1 : IMyInterface\n{\n  public int Data { get { return new Random().Next(); } }\n\n  public void DoStuff()\n  {\n    // TODO...\n  }\n}\n\npublic static class DowncastExampleProgram\n{\n  static void EntryPoint(IMyInterface interfaceRef)\n  {\n    MyClass1 class1 = (MyClass1)interfaceRef;  // Noncompliant\n    int privateData = class1.Data;\n\n    class1 = interfaceRef as MyClass1;  // Noncompliant\n    if (class1 != null)\n    {\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Casting to <code>object</code> doesn't raise an issue, because it can never fail.</p>\n<pre>\nstatic void EntryPoint(IMyInterface interfaceRef)\n{\n  var o = (object)interfaceRef;\n  ...\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	1h	\N	design	0	HTML	1576224536832	1576224536833	1	csharp
730	Public methods should not have multidimensional array parameters	S2368	\N	csharpsquid	<p>Exposing methods with multidimensional array parameters requires developers to have advanced knowledge about the language in order to be able to\nuse them. Moreover, what exactly to pass to such parameters is not intuitive. Therefore, such methods should not be exposed, but can be used\ninternally.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Program\n{\n    public void WriteMatrix(int[][] matrix) // Non-Compliant\n    {\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Matrix\n{\n    // ...\n}\n\npublic class Program\n{\n    public void WriteMatrix(Matrix matrix) // Compliant\n    {\n    }\n}\n</pre>	4	\N	READY	cs	CONSTANT_ISSUE	\N	1h	\N	pitfall	0	HTML	1576224536835	1576224536837	1	csharp
775	Public constant members should not be used	S2339	\N	csharpsquid	<p>Constant members are copied at compile time to the call sites, instead of being fetched at runtime.</p>\n<p>As an example, say you have a library with a constant <code>Version</code> member set to <code>1.0</code>, and a client application linked to it.\nThis library is then updated and <code>Version</code> is set to <code>2.0</code>. Unfortunately, even after the old DLL is replaced by the new one,\n<code>Version</code> will still be <code>1.0</code> for the client application. In order to see <code>2.0</code>, the client application would need to\nbe rebuilt against the new version of the library.</p>\n<p>This means that you should use constants to hold values that by definition will never change, such as <code>Zero</code>. In practice, those cases\nare uncommon, and therefore it is generally better to avoid constant members.</p>\n<p>This rule only reports issues on public constant fields, which can be reached from outside the defining assembly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n    public const double Version = 1.0;           // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n    public static double Version\n    {\n      get { return 1.0; }\n    }\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224539408	1576224539409	1	csharp
776	Array covariance should not be used	S2330	\N	csharpsquid	<p>Array covariance is the principle that if an implicit or explicit reference conversion exits from type <code>A</code> to <code>B</code>, then the\nsame conversion exists from the array type <code>A[]</code> to <code>B[]</code>.</p>\n<p>While this array conversion can be useful in readonly situations to pass instances of <code>A[]</code> where <code>B[]</code> is expected, it must\nbe used with care, since assigning an instance of <code>B</code> into an array of <code>A</code> will cause an <code>ArrayTypeMismatchException</code>\nto be thrown at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nabstract class Fruit { }\nclass Apple : Fruit { }\nclass Orange : Fruit { }\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    Fruit[] fruits = new Apple[1]; // Noncompliant - array covariance is used\n    FillWithOranges(fruits);\n  }\n\n  // Just looking at the code doesn't reveal anything suspicious\n  static void FillWithOranges(Fruit[] fruits)\n  {\n    for (int i = 0; i &lt; fruits.Length; i++)\n    {\n      fruits[i] = new Orange(); // Will throw an ArrayTypeMismatchException\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nabstract class Fruit { }\nclass Apple : Fruit { }\nclass Orange : Fruit { }\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    Orange[] fruits = new Orange[1]; // Compliant\n    FillWithOranges(fruits);\n  }\n\n  static void FillWithOranges(Orange[] fruits)\n  {\n    for (int i = 0; i &lt; fruits.Length; i++)\n    {\n      fruits[i] = new Orange();\n    }\n  }\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	pitfall	0	HTML	1576224539411	1576224539455	1	csharp
635	Jump statements should not be used unconditionally	S1751	\N	csharpsquid	<p>Having an unconditional <code>break</code>, <code>return</code>, <code>(@)throw</code> or <code>goto</code> in a loop renders it useless; the loop\nwill only execute once and the loop structure itself is simply wasted keystrokes.</p>\n<p>Having an unconditional <code>continue</code> in a loop can render the loop meaningless, or is itself wasted keystrokes, depending on where in the\nloop it occurs.</p>\n<p>Having an unconditional <code>return</code> anywhere other than at the end of a function or method simply renders all the rest of the code in the\nmethod useless.</p>\n<p>For these reasons, unconditional jump statements should never be used except for the final <code>return</code> in a function or method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i &lt; 10; i++)\n{\n    Console.WriteLine(i);\n    break;  // loop only executes once\n}\n\nfor (var i = 0; i &lt; 10; i++)\n{\n    continue;\n    Console.WriteLine(i); // this is never executed\n}\n\nfor (var i = 0; i &lt; 10; i++)\n{\n    Console.WriteLine(i);\n    continue;  // this is meaningless; the loop would continue anyway\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (var i = 0; i &lt; 10; i++)\n{\n    Console.WriteLine(i);\n}\n\nfor (var i = 0; i &lt; 10; i++)\n{\n    Console.WriteLine(i);\n    if (ErrorOccurred())\n    {\n        break;\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code. </li>\n  <li> MISRA C++:2008, 0-1-1 - A <em>project</em> shall not contain <em>unreachable code</em>. </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code. </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert,misra,unused	0	HTML	1576224534234	1576224534281	2	csharp
636	Extension methods should not extend "object"	S4225	\N	csharpsquid	<p>Creating an extension method that extends <code>object</code> is not recommended because it makes the method available on <em>every</em> type.\nExtensions should be applied at the most specialized level possible, and that is very unlikely to be <code>object</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing System;\n\nnamespace MyLibrary\n{\n    public static class MyExtensions\n    {\n        public static void Foo(this object o)  //Noncompliant\n        {\n            // ...\n        }\n    }\n}\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224534326	1576224534328	1	csharp
637	"for" loop increment clauses should modify the loops' counters	S1994	\N	csharpsquid	<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) // Noncompliant\n{\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++)\n{\n  // ...\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	20min	\N	confusing	0	HTML	1576224534330	1576224534333	1	csharp
684	Credentials should not be hard-coded	S2068	\N	csharpsquid	<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to\nend up in the hands of an attacker. This is particularly true for applications that are distributed.</p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring username = "admin";\nstring password = "Password123"; // Noncompliant\nstring usernamePassword  = "user=admin&amp;password=Password123"; // Noncompliant\nstring usernamePassword2 = "user=admin&amp;" + "password=" + password; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstring username = "admin";\nstring password = GetEncryptedPassword();\nstring usernamePassword = string.Format("user={0}&amp;password={1}", GetEncryptedUsername(), GetEncryptedPassword());\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/798">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/259">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management">OWASP Top Ten 2013 Category A2</a> -\n  Broken Authentication and Session Management </li>\n  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD">Hard Coded Password</a> </li>\n</ul>	4	\N	READY	cs	CONSTANT_ISSUE	\N	30min	\N	cert,cwe,owasp-a2,sans-top25-porous	0	HTML	1576224535234	1576224535280	3	csharp
685	Inheritance tree of classes should not be too deep	S110	\N	csharpsquid	<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by\ncreating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating\na deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object\noriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</p>\n<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed. </p>	2	\N	READY	cs	\N	\N	\N	\N	design	0	HTML	1576224535326	1576224535326	1	csharp
731	Composite format strings should be used correctly	S3457	\N	csharpsquid	<p>Because composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected\nbehaviors or runtime errors. This rule statically validates the good behavior of composite formats when calling the methods of\n<code>String.Format</code>, <code>StringBuilder.AppendFormat</code>, <code>Console.Write</code>, <code>Console.WriteLine</code>,\n<code>TextWriter.Write</code>, <code>TextWriter.WriteLine</code>, <code>Debug.WriteLine(String, Object[])</code>,\n<code>Trace.TraceError(String, Object[])</code>, <code>Trace.TraceInformation(String, Object[])</code>,\n<code>Trace.TraceWarning(String, Object[])</code> and <code>TraceSource.TraceInformation(String, Object[])</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ns = string.Format("{0}", arg0, arg1); // Noncompliant, arg1 is declared but not used.\ns = string.Format("{0} {2}", arg0, arg1, arg2); // Noncompliant, the format item with index 1 is missing so arg1 will not be used.\ns = string.Format("foo"); // Noncompliant, there is no need to use string.Format here.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ns = string.Format("{0}", arg0);\ns = string.Format("{0} {1}", arg0, arg2);\ns = "foo";\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> No issue is raised if the format string is not a <code>const</code>. </li>\n</ul>\n<pre>\nvar pattern = "{0} {1} {2}";\nvar res = string.Format(pattern, 1, 2); // Compliant, not const string are not recognized\n</pre>\n<ul>\n  <li> No issue is raised if the argument is not an inline creation array. </li>\n</ul>\n<pre>\nvar array = new int[] {};\nvar res = string.Format("{0} {1}", array); // Compliant we don't know the size of the array\n</pre>\n<ul>\n  <li> This rule doesn't check whether the format specifier (defined after the <code>:</code>) is actually valid. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/wQA1">CERT, FIO47-C.</a> - Use valid format strings </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/e4EyAQ">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	cert,confusing	0	HTML	1576224536838	1576224536884	1	csharp
732	Methods should not return values that are never used	S3241	\N	csharpsquid	<p>Private methods are clearly intended for use only within their own scope. When such methods return values that are never used by any of their\ncallers, then clearly there is no need to actually make the return, and it should be removed in the interests of efficiency and clarity. </p>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	cert,design,unused	0	HTML	1576224536930	1576224536931	1	csharp
733	The simplest possible condition syntax should be used	S3240	\N	csharpsquid	<p>In the interests of keeping code clean, the simplest possible conditional syntax should be used. That means </p>\n<ul>\n  <li> using the <code>??</code> operator for an assign-if-not-null operator, </li>\n  <li> using the ternary operator <code>?:</code> for assignment to a single variable, and </li>\n  <li> removing the <code>??</code> when the left operand is known to be <code>null</code>, or known to be definitely not <code>null</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nobject a = null, b = null, x;\n\nif (a != null) // Noncompliant; needlessly verbose\n{\n  x = a;\n}\nelse\n{\n  x = b;\n}\n\nx = a != null ? a : b; // Noncompliant; better but could still be simplified\n\nx = (a == null) ? new object() : a; // Noncompliant\n\nif (condition) // Noncompliant\n{\n  x = a;\n}\nelse\n{\n  x = b;\n}\n\nvar y = null ?? new object(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nobject x;\n\nx = a ?? b;\nx = a ?? b;\nx = a ?? new object();\nx = condition ? a : b;\nvar y = new object();\n</pre>	1	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	clumsy	0	HTML	1576224536934	1576224536936	1	csharp
734	Methods named "Dispose" should implement "IDisposable.Dispose"	S2953	\N	csharpsquid	<p><code>Dispose</code> as a method name should be used exclusively to implement <code>IDisposable.Dispose</code> to prevent any confusion.</p>\n<p>It may be tempting to create a <code>Dispose</code> method for other purposes, but doing so will result in confusion and likely lead to problems in\nproduction.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class GarbageDisposal\n{\n  private int Dispose()  // Noncompliant\n  {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class GarbageDisposal : IDisposable\n{\n  public void Dispose()\n  {\n    // ...\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic class GarbageDisposal\n{\n  private int Grind()\n  {\n    // ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods named <code>Dispose</code> and invoked from the <code>IDisposable.Dispose</code> implementation are not reported.</p>\n<pre>\npublic class GarbageDisposal  :  IDisposable\n{\n  protected virtual void Dispose(bool disposing)\n  {\n    //...\n  }\n  public void Dispose()\n  {\n    Dispose(true);\n    GC.SuppressFinalize(this);\n  }\n}\n</pre>	4	\N	READY	cs	CONSTANT_ISSUE	\N	10min	\N	pitfall	0	HTML	1576224536938	1576224536940	1	csharp
777	"IndexOf" checks should not be for positive numbers	S2692	\N	csharpsquid	<p>Most checks against an <code>IndexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values\n<code>&gt;0</code> ignore the first element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>string</code>,\n<code>List</code>, or an array, consider using the <code>Contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>IndexOf</code> value retrieved from a <code>string</code>, <code>List</code>, or array is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring color = "blue";\nstring name = "ishmael";\n\nList&lt;string&gt; strings = new List&lt;string&gt;();\nstrings.Add(color);\nstrings.Add(name);\nstring[] stringArray = strings.ToArray();\n\nif (strings.IndexOf(color) &gt; 0) // Noncompliant\n{\n  // ...\n}\nif (name.IndexOf("ish") &gt; 0) // Noncompliant\n{\n  // ...\n}\nif (name.IndexOf("ae") &gt; 0) // Noncompliant\n{\n  // ...\n}\nif (Array.IndexOf(stringArray, color) &gt; 0) // Noncompliant\n{\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstring color = "blue";\nstring name = "ishmael";\n\nList&lt;string&gt; strings = new List&lt;string&gt; ();\nstrings.Add(color);\nstrings.Add(name);\nstring[] stringArray = strings.ToArray();\n\nif (strings.IndexOf(color) &gt; -1)\n{\n  // ...\n}\nif (name.IndexOf("ish") &gt;= 0)\n{\n  // ...\n}\nif (name.Contains("ae"))\n{\n  // ...\n}\nif (Array.IndexOf(stringArray, color) &gt;= 0)\n{\n  // ...\n}\n</pre>	3	\N	READY	cs	CONSTANT_ISSUE	\N	2min	\N	suspicious	0	HTML	1576224539500	1576224539544	1	csharp
778	Assignments should not be made from within sub-expressions	S1121	\N	csharpsquid	<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (string.IsNullOrEmpty(result = str.Substring(index, length))) // Noncompliant\n{\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar result = str.Substring(index, length);\nif (string.IsNullOrEmpty(result))\n{\n  //...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments inside lambda and delegate expressions are allowed. </p>\n<p>Furthermore, the following patterns are also accepted:</p>\n<pre>\nvar a = b = c = 10;\n</pre>\n<pre>\nwhile ((val = GetNewValue()) &gt; 0)\n{\n...\n}\n</pre>\n<pre>\nprivate MyClass instance;\npublic MyClass Instance\n{\n  get\n  {\n    return instance ?? (instance = new MyClass());\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>\n  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>\n  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/nYFtAg">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/1gCTAw">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/KQvhAg">CERT, EXP19-CPP.</a> - Do not perform assignments in conditional expressions\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/KYIyAQ">CERT, MSC02-CPP.</a> - Avoid errors of omission </li>\n</ul>	2	\N	READY	cs	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,misra,suspicious	0	HTML	1576224539592	1576224539636	1	csharp
1417	Template literal placeholder syntax should not be used in regular strings	S3786	\N	typescript	<p>Template strings allow developers to embed variables or expressions in strings using template literals, instead of string concatenation. This is\ndone by using expressions like <code>${variable} </code> in a string between two back-ticks (<code>`</code>). However, when used in a regular string\nliteral (between double or single quotes) the template will not be evaluated and will be used as a literal, which is probably not what was\nintended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconsole.log("Today is ${date}"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconsole.log(`Today is ${date}`);\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	1min	\N	\N	0	HTML	1576224559440	1576224559440	2	typescript
1418	Errors should not be created without being thrown	S3984	\N	typescript	<p>Creating a new <code>Error</code> without actually throwing it is useless and is probably due to a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x &lt; 0) {\n  new Error("x must be nonnegative");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x &lt; 0) {\n  throw new Error("x must be nonnegative");\n}\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224559442	1576224559442	2	typescript
1419	Identical expressions should not be used on both sides of a binary operator	S1764	\N	typescript	<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nvar j = 5 / 5; //always 1\nvar k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing one variable against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </p>\n<p>Moreover comma operator <code>,</code> and <code>instanceof</code> operator are ignored as there are use-cases when there usage is valid.</p>\n<pre>\nif(f !== f) { // test for NaN value\n  console.log("f is NaN");\n}\n\nvar i = 1 &lt;&lt; 1; // Compliant\nvar j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> {rule:typescript:S1656} - Implements a check on <code>=</code>. </li>\n</ul>	2	\N	READY	ts	CONSTANT_ISSUE	\N	2min	\N	cert	0	HTML	1576224559443	1576224559487	2	typescript
1420	Sparse arrays should not be declared	S4140	\N	typescript	<p>An array declared with missing ("sparse") elements is likely to be an error: an extra comma was inserted or perhaps the developer meant to insert\nthe missing value and forgot.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = [1, , 3, 6, 9];  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar a = [1, 3, 6, 9];\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224559532	1576224559534	1	typescript
1275	Neither DES (Data Encryption Standard) nor DESede (3DES) should be used	S2278	\N	squid	<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>\n<blockquote>\n  <p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer\n  provides the security that is needed to protect federal government information.</p>\n  <p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>\n</blockquote>\n<p>For similar reasons, RC2 should also be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher c = Cipher.getInstance("AES/GCM/NoPadding");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/VwAZAg">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE">DES / DESede Unsafe</a> </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cert,cwe,owasp-a6,sans-top25-porous	0	HTML	1576224555962	1576224556005	3	java
1276	"Cloneables" should implement "clone"	S2157	\N	squid	<p>Simply implementing <code>Cloneable</code> without also overriding <code>Object.clone()</code> does not necessarily make the class cloneable. While\nthe <code>Cloneable</code> interface does not include a <code>clone</code> method, it is required by convention, and ensures true cloneability.\nOtherwise the default JVM <code>clone</code> will be used, which copies primitive values and object references from the source to the target. I.e.\nwithout overriding <code>clone</code>, any cloned instances will potentially share members with the source instance.</p>\n<p>Removing the <code>Cloneable</code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a\nclass to be copied.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Team implements Cloneable {  // Noncompliant\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) {...}\n  public Person getCoach() {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Team implements Cloneable {\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) { ... }\n  public Person getCoach() { ... }\n\n  @Override\n  public Object clone() {\n    Team clone = (Team) super.clone();\n    //...\n  }\n}\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	api-design,convention	0	HTML	1576224556054	1576224556095	1	java
1323	Unit tests should throw exceptions	S3658	\N	squid	<p>When the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a\n<code>try</code>-<code>catch</code> structure to detect failure. Instead, you can simply move the exception type to the method signature. </p>\n<p>This rule raises an issue when there is a fail assertion inside a <code>catch</code> block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testMethod() {\n  try {\n            // Some code\n  } catch (MyException e) {\n    Assert.fail(e.getMessage());  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testMethod() throws MyException {\n    // Some code\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	clumsy,tests	0	HTML	1576224557409	1576224557411	1	java
1324	Unused type parameters should be removed	S2326	\N	squid	<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored\n{\n  return a + b;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint Add(int a, int b)\n{\n  return a + b;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,unused	0	HTML	1576224557413	1576224557415	1	java
1325	Null should not be returned from a "Boolean" method	S2447	\N	squid	<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and\n<code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers'\ncode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cert,cwe,pitfall	0	HTML	1576224557417	1576224557418	1	java
1326	Assertion arguments should be passed in the correct order	S3415	\N	squid	<p>The standard assertions library methods such as <code>org.junit.Assert.assertEquals</code>, and <code>org.junit.Assert.assertSame</code> expect the\nfirst argument to be the expected value and the second argument to be the actual value. Swap them, and your test will still have the same outcome\n(succeed/fail when it should) but the error messages will be confusing. </p>\n<p>This rule raises an issue when the second argument to an assertions library method is a hard-coded value and the first argument is not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\norg.junit.Assert.assertEquals(runner.exitCode(), 0, "Unexpected exit code");  // Noncompliant; Yields error message like: Expected:&lt;-1&gt;. Actual:&lt;0&gt;.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\norg.junit.Assert.assertEquals(0, runner.exitCode(), "Unexpected exit code");\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	suspicious,tests	0	HTML	1576224557420	1576224557421	1	java
1365	Useless "if(true) {...}" and "if(false){...}" blocks should be removed	S1145	\N	squid	<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. </li>\n  <li> Some value was left unset. </li>\n  <li> Some logic is not doing what the programmer thought it did. </li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {\n  doSomething();\n}\n...\nif (false) {\n  doSomethingElse();\n}\n\nif (2 &lt; 3 ) { ... }  // Noncompliant; always false\n\nint i = 0;\nint j = 0;\n// ...\nj = foo();\n\nif (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization\n\nboolean b = true;\n//...\nif (b || !b) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething();\n...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:squid:S2583} instead.</p>	2	\N	DEPRECATED	java	CONSTANT_ISSUE	\N	2min	\N	cwe,misra	0	HTML	1576224558311	1576224558357	2	java
1366	Collections should not be passed as arguments to their own methods	S2114	\N	squid	<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add("Hello");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224558403	1576224558405	2	java
1421	Non-null assertions should not be used	S2966	\N	typescript	<p>The point of declaring an optional property or parameter is to make explicit the fact that it might contain no valid value, i.e. <code>null</code>\nor <code>undefined</code>. Using a non-null assertion (the <code>!.</code> operator) will lead to a runtime error if the optional does contain\n<code>null</code> or <code>undefined</code>. Even if the value is tested first, it's still considered a bad practice to use a non-null assertion. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doTheThing(foo?: Foo) {\n  let s = foo!.bar;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doTheThing(foo?: Foo) {\n  if (foo) {\n    let s = foo.bar;\n  }\n}\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	15min	\N	unpredictable	0	HTML	1576224559535	1576224559537	2	typescript
1422	Statements should end with semicolons	S1438	\N	typescript	<p>In JavaScript, the semicolon (<code>;</code>) is optional as a statement separator, but omitting semicolons can be confusing, and lead to\nunexpected results because a semicolon is implicitly inserted at the end of each line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction fun() {\n  return  // Noncompliant. ';' implicitly inserted at end of line\n       5   // Noncompliant. ';' implicitly inserted at end of line\n}\nprint(fun());  // prints "undefined", not "5"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction fun() {\n  return 5;\n}\nprint(fun());\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224560064	1576224560065	1	typescript
1423	Only "while", "do", "for" and "switch" statements should be labelled	S1439	\N	typescript	<p>Any statement or block of statements can be identified by a label, but those labels should be used only on <code>while</code>,\n<code>do-while</code>, <code>for</code> and <code>switch</code> statements. Using labels in any other context leads to unstructured, confusing code.\n</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyLabel: if (i % 2 == 0) {  // Noncompliant\n  if (i == 12) {\n    console.log("12");\n    break myLabel;\n  }\n  console.log("Odd number, but not 12");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyLabel: for (i = 0; i &lt; 10; i++) {   // Compliant\n  console.log("Loop");\n  break myLabel;\n}\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	20min	\N	pitfall	0	HTML	1576224560066	1576224560067	1	typescript
1424	Multiline string literals should not be used	S1516	\N	typescript	<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the\nbeginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myString = 'A rather long string of English text, an error message \\\n                actually that just keeps going and going -- an error \\\n                message to make the Energizer bunny blush (right through \\\n                those Schwarzenegger shades)! Where was I? Oh yes, \\\n                you\\'ve got an error and all the extraneous whitespace is \\\n                just gravy.  Have a nice day.';  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myString = 'A rather long string of English text, an error message ' +\n    'actually that just keeps going and going -- an error ' +\n    'message to make the Energizer bunny blush (right through ' +\n    'those Schwarzenegger shades)! Where was I? Oh yes, ' +\n    'you\\'ve got an error and all the extraneous whitespace is ' +\n    'just gravy.  Have a nice day.';\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	bad-practice	0	HTML	1576224560068	1576224560069	1	typescript
1277	Member variable visibility should be specified	S2039	\N	squid	<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you don't expect, and potentially leave it\nopen to unexpected modification by other classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Ball {\n    String color="red";  // Noncompliant\n}\nenum A {\n  B;\n  int a;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Ball {\n    private String color="red";  // Compliant\n}\nenum A {\n  B;\n  private int a;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\nto make the code testable.</p>\n<pre>\nclass Cone {\n  @VisibleForTesting\n  Logger logger; // Compliant\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224556144	1576224556145	3	java
1278	Silly equality checks should not be made	S2159	\N	squid	<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/IQAlAg">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two\n  arrays </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert,unused	0	HTML	1576224556147	1576224556191	2	java
1279	Security constraints should be defined	S3369	\N	squid	<p>Websphere, Tomcat, and JBoss web servers allow the definition of role-based access to servlets. It may not be granular enough for your purposes,\nbut it's a start, and should be used at least as a base.</p>\n<p>This rule raises an issue when a <em>web.xml</em> file has no <code>&lt;security-constraint&gt;</code> elements.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://cwe.mitre.org/data/definitions/284.html">MITRE, CWE-284</a> - Improper Access Control </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control">OWASP Top Ten 2013 Category A7</a> - Missing\n  Function Level Access Control </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	3h	\N	cwe,jee,owasp-a7,websphere	0	HTML	1576224556236	1576224556236	3	java
1280	Public constants and fields initialized at declaration should be "static final" rather than merely "final"	S1170	\N	squid	<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).</p>\n</blockquote>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224556238	1576224556279	1	java
1327	Utility classes should not have public constructors	S1118	\N	squid	<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even abstract utility classes, which can\nbe extended, should not have public constructors.</p>\n<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor\nshould be defined.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalStateException("Utility class");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this\nrule.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	design	0	HTML	1576224557424	1576224557425	1	java
1328	Wildcard imports should not be used	S2208	\N	squid	<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224557427	1576224557428	1	java
1329	Track uses of disallowed dependencies	S3417	\N	squid	<p>Whether they are disallowed locally for security, license, or dependability reasons, forbidden dependencies should not be used. </p>\n<p>This rule raises an issue when the group or artifact id of a direct dependency matches the configured forbidden dependency pattern. </p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter of: <code>*:.*log4j.*</code></p>\n<pre>\n&lt;dependency&gt; &lt;!-- Noncompliant --&gt;\n    &lt;groupId&gt;log4j&lt;/groupId&gt;\n    &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n    &lt;version&gt;1.2.17&lt;/version&gt;\n&lt;/dependency&gt;\n</pre>	2	\N	READY	java	\N	\N	\N	\N	maven	1	HTML	1576224557429	1576224557429	1	java
1330	"static" members should be accessed statically	S2209	\N	squid	<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224557433	1576224557433	1	java
1367	IllegalMonitorStateException should not be caught	S2235	\N	squid	<p>According to Oracle Javadoc:</p>\n<blockquote>\n  <p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting\n  on an object's monitor without owning the specified monitor.</p>\n</blockquote>\n<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and\n<code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  ...\n  try {\n    ...\n    anObject.notify();\n    ...\n  } catch(IllegalMonitorStateException e) {\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  ...\n  synchronized(anObject) {\n    ...\n    anObject.notify();\n    ...\n  }\n}\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	multi-threading	0	HTML	1576224558408	1576224558410	1	java
1368	Tabulation characters should not be used	S00105	S105	squid	<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224558414	1576224558416	1	java
1369	Exit methods should not be called	S1147	\N	squid	<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the\nentire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and\nskipping finalization.</p>\n<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them\nshould be called from applications running in a J2EE container.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\nRuntime.getRuntime().halt(0);\n</pre>\n<h2>Exceptions</h2>\n<p>These methods are ignored inside <code>main</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/382.html">MITRE, CWE-382</a> - Use of System.exit() </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/PoYbAQ">CERT, ERR09-J.</a> - Do not allow untrusted code to terminate the JVM </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	cert,cwe,suspicious	0	HTML	1576224558419	1576224558421	1	java
1370	"hashCode" and "toString" should not be called on array instances	S2116	\N	squid	<p>While <code>hashCode</code> and <code>toString</code> are available on arrays, they are largely useless. <code>hashCode</code> returns the array's\n"identity hash code", and <code>toString</code> returns nearly the same value. Neither method's output actually reflects the array's contents.\nInstead, you should pass the array to the relevant static <code>Arrays</code> method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = args.toString(); // Noncompliant\n    int argHash = args.hashCode(); // Noncompliant\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = Arrays.toString(args);\n    int argHash = Arrays.hashCode(args);\n\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224558424	1576224558426	2	java
1225	Exception handlers should preserve the original exceptions	S1166	\N	squid	<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {   // Noncompliant - exception is lost\n  LOGGER.info("context");\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)\n  LOGGER.info(e.getMessage());\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - original exception is lost\n  throw new RuntimeException("context");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  LOGGER.info(e);  // exception is logged\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {\n  throw new RuntimeException(e);   // exception stack trace is propagated\n}\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;  // original exception passed forward\n} catch (Exception e) {\n  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and\n<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling\n<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>\n<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are\ncorrectly handled.</p>\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle "e" here\n  myInteger = 0;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/6gEqAQ">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	cert,error-handling,suspicious	0	HTML	1576224554444	1576224554492	1	java
1281	Only static class initializers should be used	S1171	\N	squid	<p>Non-static initializers are rarely used, and can be confusing for most developers because they only run when new class instances are created. When\npossible, non-static initializers should be refactored into standard constructors or field initializers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n\n    // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put("a", "b");\n    }\n\n  };\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();\n\n  static {\n    MY_MAP.put("a", "b");\n  }\n}\n</pre>\n<p>or using Guava:</p>\n<pre>\nclass MyClass {\n  // Compliant\n  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of("a", "b");\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	pitfall	0	HTML	1576224556328	1576224556329	1	java
1282	Unused method parameters should be removed	S1172	\N	squid	<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething(int a, int b) {     // "b" is unused\n  compute(a);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething(int a) {\n  compute(a);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule will not raise issues for unused parameters:</p>\n<ul>\n  <li> that are annotated with <code>@javax.enterprise.event.Observes</code> </li>\n  <li> in overrides and implementation methods </li>\n  <li> in interface <code>default</code> methods </li>\n  <li> in non-private methods that only <code>throw</code> or that have empty bodies </li>\n  <li> in annotated methods, unless the annotation is <code>@SuppressWarning("unchecked")</code> or <code>@SuppressWarning("rawtypes")</code>, in\n  which case the annotation will be ignored </li>\n  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the parameter is documented with a proper\n  javadoc. </li>\n</ul>\n<pre>\n@Override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  // designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  //open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException("This method should be implemented in subclasses");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>\n  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,misra,unused	0	HTML	1576224556329	1576224556375	1	java
1331	Group ids should follow a naming convention	S3419	\N	squid	<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when the a pom's <code>groupId</code> does not match\nthe provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>(com|org)(\\.[a-z][a-z-0-9]*)+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;myCo&lt;/groupId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;com.myco&lt;/groupId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	convention,maven	0	HTML	1576224557434	1576224557435	1	java
1332	Track uses of "NOSONAR" comments	NoSonar	S1291	squid	<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.</p>\n<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	1min	\N	bad-practice	0	HTML	1576224557438	1576224557438	1	java
1333	Classes with only "static" methods should not be instantiated	S2440	\N	squid	<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only\n<code>static</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll("&lt;[^&gt;]+&gt;", "");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); // Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll("&lt;[^&gt;]+&gt;", "");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>See Also</h2>\n<ul>\n  <li> {rule:squid:S1118} - Utility classes should not have public constructors </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	clumsy	0	HTML	1576224557439	1576224557440	1	java
1371	Files should not have too many lines of code	S00104	S104	squid	<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	1h	\N	brain-overload	0	HTML	1576224558429	1576224558431	1	java
1372	Throwable.printStackTrace(...) should not be called	S1148	\N	squid	<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log("context", e);\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	error-handling	0	HTML	1576224558439	1576224558441	3	java
1373	Methods "wait(...)", "notify()" and "notifyAll()" should not be called on Thread instances	S2236	\N	squid	<p>The methods <code>wait(...)</code>, <code>notify()</code> and <code>notifyAll()</code> are available on a <code>Thread</code> instance, but only\nbecause all classes in Java extend <code>Object</code> and therefore automatically inherit those methods. But there are two very good reasons for not\ncalling them on a <code>Thread</code>:</p>\n<ul>\n  <li> Internally, the JVM relies on these methods to change the state of the Thread (<code>BLOCKED</code>, <code>WAITING</code>, ...), so calling\n  them will corrupt the behavior of the JVM. </li>\n  <li> It is not clear (perhaps even to the original coder) what is really expected. For instance, it is waiting for the execution of the Thread to\n  suspended, or is it the acquisition of the object monitor that is waited for? </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(new RunnableJob());\n...\nmyThread.wait(2000);\n</pre>	4	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	multi-threading	0	HTML	1576224558445	1576224558447	2	java
1374	Track uses of disallowed classes	S3688	\N	squid	<p>This rule allows banning certain classes.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n</ul>\n<pre>\nString name;  // Noncompliant\n</pre>	0	\N	READY	java	\N	\N	\N	\N	\N	1	HTML	1576224558450	1576224558450	1	java
1226	"HttpServletRequest.getRequestedSessionId()" should not be used	S2254	\N	squid	<p>According to the Oracle Java API, the <code>HttpServletRequest.getRequestedSessionId()</code> method:</p>\n<blockquote>\n  <p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client\n  did not specify a session ID, this method returns null.</p>\n</blockquote>\n<p>The session ID it returns is either transmitted in a cookie or a URL parameter so by definition, nothing prevents the end-user from manually\nupdating the value of this session ID in the HTTP request. </p>\n<p>Here is an example of a updated HTTP header:</p>\n<pre>\nGET /pageSomeWhere HTTP/1.1\nHost: webSite.com\nUser-Agent: Mozilla/5.0\nCookie: JSESSIONID=Hacked_Session_Value'''"&gt;\n</pre>\n<p>Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (E.G.\nTomcat or Jetty) to see if the value matches the ID of an an existing session. If it does not, the user should be considered unauthenticated.\nMoreover, this session ID should never be logged to prevent hijacking of active sessions.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(isActiveSession(request.getRequestedSessionId()) ){\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/807">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>\n  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management">OWASP Top Ten 2013 Category A2</a> -\n  Broken Authentication and Session Management </li>\n  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SERVLET_SESSION_ID">Untrusted Session Cookie Value</a>\n  </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	cwe,owasp-a2,sans-top25-porous	0	HTML	1576224554547	1576224554593	3	java
1227	Objects should not be created only to "getClass"	S2133	\N	squid	<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class'\n<code>.class</code> property.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass c = MyObject.class;\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	performance	0	HTML	1576224554638	1576224554640	1	java
1228	Only standard cryptographic algorithms should be used	S2257	\N	squid	<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>, ... should be used instead.</p>\n<p>This rule tracks creation of <code>java.security.MessageDigest</code> subclasses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyCryptographicAlgorithm extends MessageDigest {\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST">MessageDigest is Custom</a>\n  </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	1d	\N	cwe,owasp-a6,sans-top25-porous	0	HTML	1576224554644	1576224554646	3	java
1283	Classes that don't define "hashCode()" should not be used in hashes	S2141	\N	squid	<p>Because <code>Object</code> implements <code>hashCode</code>, any Java class can be put into a hash structure. However, classes that define\n<code>equals(Object)</code> but not <code>hashCode()</code> aren't truly hash-able because instances that are equivalent according to the\n<code>equals</code> method can return different hashes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Student {  // no hashCode() method; not hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = // okay so far\n          new HashTable&lt;Student, Integer&gt;(); // Noncompliant\n\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Student {  // has hashCode() method; hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n  public int hashCode() {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = new HashTable&lt;Student, Integer&gt;();\n\n  // ...\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224556424	1576224556425	2	java
1284	Methods of "Random" that return floating point values should not be used in random integer generation	S2140	\N	squid	<p>There is no need to multiply the output of <code>Random</code>'s <code>nextDouble</code> method to get a random integer. Use the\n<code>nextInt</code> method instead.</p>\n<p>This rule raises an issue when the return value of any of <code>Random</code>'s methods that return a floating point value is converted to an\ninteger.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nRandom r = new Random();\nint rand = (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50\nint rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nRandom r = new Random();\nint rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224556426	1576224556427	1	java
1285	Classes should not be too complex	ClassCyclomaticComplexity	S1311	squid	<p>The Cyclomatic Complexity is measured by the number of <code>&amp;&amp;</code> and <code>||</code> operators and <code>if</code>,\n<code>while</code>, <code>do</code>, <code>for</code>, <code>?:</code>, <code>catch</code>, <code>switch</code>, <code>case</code>,\n<code>return</code> and <code>throw</code> statements in the body of a class plus one for each constructor, method, static initializer, or instance\ninitializer in the class. The last return statement in method, if exists, is not taken into account.</p>\n<p>Even when the Cyclomatic Complexity of a class is very high, this complexity might be well distributed among all methods. Nevertheless, most of the\ntime, a very complex class is a class which breaks the Single Responsibility Principle and which should be re-factored to be split in several\nclasses.</p>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>	3	\N	DEPRECATED	java	LINEAR_OFFSET	1min	10min	per complexity point over the threshold	\N	0	HTML	1576224556428	1576224556429	1	java
1334	Multiline blocks should be enclosed in curly braces	S2681	\N	squid	<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nif (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nif (condition) firstActionInBlock();  // Noncompliant\n  secondAction();  // Executed unconditionally\n\nif (condition); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,cwe	0	HTML	1576224557441	1576224557483	1	java
1335	"compareTo" results should not be checked for specific values	S2200	\N	squid	<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	unpredictable	0	HTML	1576224557528	1576224557529	2	java
1336	"Lock" objects should not be "synchronized"	S2442	\N	squid	<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with\n<code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly. Instead, such\nobjects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nLock lock = new MyLockImpl();\nsynchronized(lock) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLock lock = new MyLockImpl();\nlock.tryLock();\n//...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/cQCaAg">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level\n  concurrency objects </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert,clumsy,multi-threading	0	HTML	1576224557530	1576224557530	1	java
1375	Control structures should use curly braces	S00121	S121	squid	<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	cert,misra,pitfall	0	HTML	1576224558456	1576224558501	1	java
1376	Package names should comply with a naming convention	S00120	S120	squid	<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z]+(\\.[a-z][a-z0-9]*)*$</code>:</p>\n<pre>\npackage org.exAmple; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example;\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	convention	0	HTML	1576224558546	1576224558548	1	java
1377	Statements should be on separate lines	S00122	S122	squid	<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	1min	\N	style	0	HTML	1576224558555	1576224558557	1	java
1378	Limited dependence should be placed on operator precedence rules in expressions	S864	\N	squid	<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex\nstatements. However, this does not mean that parentheses should be gratuitously added around every operation. </p>\n<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational\noperators are used in together in a condition, and for other operator combinations according to the following table:</p>\n<table>\n  <tbody>\n    <tr>\n      <td> </td>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td><code>&amp;</code></td>\n      <td><code>^</code></td>\n      <td> <code>|</code> </td>\n    </tr>\n    <tr>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&amp;</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>^</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td> <code>|</code> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = a + b - c;\nx = a + 1 &lt;&lt; b;  // Noncompliant\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant\nif (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx = a + b - c;\nx = (a + 1) &lt;&lt; b;\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}\nif ( (a = f(b,c)) == 1) { ... }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on C's operator precedence rules in expressions </li>\n  <li> MISRA C:2004, 12.2 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>\n  <li> MISRA C:2004, 12.5 - The operands of a logical &amp;&amp; or || shall be primary-expressions. </li>\n  <li> MISRA C++:2008, 5-0-1 - The value of an expression shall be the same under any order of evaluation that the standard permits. </li>\n  <li> MISRA C++:2008, 5-0-2 - Limited dependence should be placed on C++ operator precedence rules in expressions </li>\n  <li> MISRA C++:2008, 5-2-1 - Each operand of a logical &amp;&amp; or || shall be a postfix-expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/_wI">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/VoAyAQ">CERT, EXP00-CPP.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/9wHEAw">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/783.html">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	cert,cwe,misra	0	HTML	1576224558561	1576224558605	1	java
1229	Expressions used in "assert" should not produce side effects	S3346	\N	squid	<p>Since <code>assert</code> statements aren't executed by default (they must be enabled with JVM flags) developers should never rely on their\nexecution the evaluation of any logic required for correct program function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassert myList.remove(myList.get(0));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean removed = myList.remove(myList.get(0));\nassert removed;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/vwG7AQ">CERT, EXP06-J.</a> - Expressions used in assertions must not produce side\n  effects </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert	0	HTML	1576224554649	1576224554652	2	java
1230	Empty arrays and collections should be returned instead of null	S1168	\N	squid	<p>Returning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more\ncomplex and less readable.</p>\n<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Result[] getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n\n  if (results != null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n}\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return Collections.emptyList();          // Compliant\n}\n\npublic static Result[] getResults() {\n  return new Result[0];\n}\n\npublic static void main(String[] args) {\n  for (Result result: getResults()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/AgG7AQ">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an\n  empty array over a null value </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/zwHEAw">CERT, MET55-J.</a> - Return an empty array or collection instead of a null\n  value for methods that return an array or collection </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	cert	0	HTML	1576224554655	1576224554701	1	java
1231	Null pointers should not be dereferenced	S2259	\N	squid	<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullPointerException</code> to be thrown. At\nbest, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or\nit could allow an attacker to bypass security measures.</p>\n<p>Note that when they are present, this rule takes advantage of <code>@CheckForNull</code> and <code>@Nonnull</code> annotations defined in <a\nhref="https://jcp.org/en/jsr/detail?id=305">JSR-305</a> to understand which values are and are not nullable except when <code>@Nonnull</code> is used\non the parameter to <code>equals</code>, which by contract should always work with null.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@CheckForNull\nString getName(){...}\n\npublic boolean isNameEmpty() {\n  return getName().length() == 0; // Noncompliant; the result of getName() could be null, but isn't null-checked\n}\n</pre>\n<pre>\nConnection conn = null;\nStatement stmt = null;\ntry{\n  conn = DriverManager.getConnection(DB_URL,USER,PASS);\n  stmt = conn.createStatement();\n  // ...\n\n}catch(Exception e){\n  e.printStackTrace();\n}finally{\n  stmt.close();   // Noncompliant; stmt could be null if an exception was thrown in the try{} block\n  conn.close();  // Noncompliant; conn could be null if an exception was thrown\n}\n</pre>\n<pre>\nprivate void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}\n\npublic  void append(@CheckForNull Color color) {\n    merge(currentColor, color);  // Noncompliant; color should be null-checked because merge(...) doesn't accept nullable parameters\n}\n</pre>\n<pre>\nvoid paint(Color color) {\n  if(color == null) {\n    System.out.println("Unable to apply color " + color.toString());  // Noncompliant; NullPointerException will be thrown\n    return;\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/PAw">CERT, EXP34-C.</a> - Do not dereference null pointers </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	cert,cwe	0	HTML	1576224554746	1576224554793	2	java
1232	"javax.crypto.NullCipher" should not be used for anything other than testing	S2258	\N	squid	<p>By contract, the <code>NullCipher</code> class provides an "identity cipher" <del></del> one that does not transform or encrypt the plaintext in\nany way. As a consequence, the ciphertext is identical to the plaintext. So this class should be used for testing, and never in production code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nNullCipher nc=new NullCipher();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">CWE-327</a>: Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#NULL_CIPHER">NullCipher Unsafe</a> </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cwe,owasp-a6,sans-top25-porous	0	HTML	1576224554836	1576224554837	3	java
1286	"Object.finalize()" should remain protected (versus public) when overriding	S1174	\N	squid	<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>\n<p>Making this method public is misleading, because it implies that any caller can use it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/583.html">MITRE, CWE-583</a> - finalize() Method Declared Public </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	cert,cwe	0	HTML	1576224556432	1576224556433	1	java
1287	"java.time" classes should be used for dates and times	S2143	\N	squid	<p>The old, much-derided <code>Date</code> and <code>Calendar</code> classes have always been confusing and difficult to use properly, particularly in\na multi-threaded context. <code>JodaTime</code> has long been a popular alternative, but now an even better option is built-in. Java 8's JSR 310\nimplementation offers specific classes for:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Class</th>\n      <th>Use for</th>\n    </tr>\n    <tr>\n      <td>LocalDate</td>\n      <td>a date, without time of day, offset, or zone</td>\n    </tr>\n    <tr>\n      <td>LocalTime</td>\n      <td>the time of day, without date, offset, or zone</td>\n    </tr>\n    <tr>\n      <td>LocalDateTime</td>\n      <td>the date and time, without offset, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetDate</td>\n      <td>a date with an offset such as +02:00, without time of day, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetTime</td>\n      <td>the time of day with an offset such as +02:00, without date, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetDateTime</td>\n      <td>the date and time with an offset such as +02:00, without a zone</td>\n    </tr>\n    <tr>\n      <td>ZonedDateTime</td>\n      <td>the date and time with a time zone and offset</td>\n    </tr>\n    <tr>\n      <td>YearMonth</td>\n      <td>a year and month</td>\n    </tr>\n    <tr>\n      <td>MonthDay</td>\n      <td>month and day</td>\n    </tr>\n    <tr>\n      <td>Year/MonthOfDay/DayOfWeek/...</td>\n      <td>classes for the important fields</td>\n    </tr>\n    <tr>\n      <td>DateTimeFields</td>\n      <td>stores a map of field-value pairs which may be invalid</td>\n    </tr>\n    <tr>\n      <td>Calendrical</td>\n      <td>access to the low-level API</td>\n    </tr>\n    <tr>\n      <td>Period</td>\n      <td>a descriptive amount of time, such as "2 months and 3 days"</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate now = new Date();  // Noncompliant\nDateFormat df = new SimpleDateFormat("dd.MM.yyyy");\nCalendar christmas  = Calendar.getInstance();  // Noncompliant\nchristmas.setTime(df.parse("25.12.2020"));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLocalDate now = LocalDate.now();  // gets calendar date. no time component\nLocalTime now2 = LocalTime.now(); // gets current time. no date component\nLocalDate christmas = LocalDate.of(2020,12,25);\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	java8,pitfall	0	HTML	1576224556434	1576224556477	1	java
1288	The signature of "finalize()" should match that of "Object.finalize()"	S1175	\N	squid	<p><code>Object.finalize()</code> is called by the Garbage Collector at some point after the object becomes unreferenced.</p>\n<p>In general, overloading <code>Object.finalize()</code> is a bad idea because:</p>\n<ul>\n  <li> The overload may not be called by the Garbage Collector. </li>\n  <li> Users are not expected to call <code>Object.finalize()</code> and will get confused. </li>\n</ul>\n<p>But beyond that it's a terrible idea to name a method "finalize" if it doesn't actually override <code>Object.finalize()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int finalize(int someParameter) {        // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int someBetterName(int someParameter) {  // Compliant\n  /* ... */\n}\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	pitfall	0	HTML	1576224556522	1576224556524	2	java
1289	Mutable members should not be stored or returned directly	S2384	\N	squid	<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be\nreturned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>\n<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>,\n<code>Collections.unmodifiableList</code>, ...) or make a copy of the mutable object, and store or return the copy instead.</p>\n<p>This rule checks that arrays, collections and Dates are not stored or returned directly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{"first", "second"};\n  }\n\n  public String [] getStrings() {\n    return strings; // Noncompliant\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings;  // Noncompliant\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {"first", "second"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = "yellow";  // a.strings = {"yellow", "second"};\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{"first", "second"};\n  }\n\n  public String [] getStrings() {\n    return strings.clone();\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings.clone();\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {"first", "second"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = "yellow";  // a.strings = {"first", "second"};\n  }\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/374">MITRE, CWE-374</a> - Passing Mutable Objects to an Untrusted Method </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/375">MITRE, CWE-375</a> - Returning a Mutable Object to an Untrusted Caller </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/zQCuAQ">CERT, OBJ05-J.</a> - Do not return references to private mutable class members\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/QIEVAQ">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal\n  components </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/JQLEAw">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/kwCuAQ">CERT, OOP08-CPP.</a> - Do not return references to private data </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,unpredictable	0	HTML	1576224556528	1576224556572	3	java
1337	Non-serializable objects should not be stored in "HttpSession" objects	S2441	\N	squid	<p>If you have no intention of writting an <code>HttpSession</code> object to file, then storing non-<code>serializable</code> objects in it may not\nseem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use\nin a process called "passivation". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such\nsessions at startup.</p>\n<p>The point is, that even though <code>HttpSession</code> does not <code>extend Serializable</code>, you must nonetheless assume that it will be\nserialized, and understand that if you've stored non-serializable objects in the session, errors will result. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\n//...\nHttpSession session = request.getSession();\nsession.setAttribute("address", new Address());  // Noncompliant; Address isn't serializable\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/579.html">MITRE, CWE-579</a> - J2EE Bad Practices: Non-serializable Object Stored in Session\n  </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cwe	0	HTML	1576224557531	1576224557532	2	java
1338	"Collections.EMPTY_LIST", "EMPTY_MAP", and "EMPTY_SET" should not be used	S1596	\N	squid	<p>Since the introduction of generics in Java 5, the use of generic types such as <code>List&lt;String&gt;</code> is recommended over the use of raw\nones such as <code>List</code>. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code>\nfields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;  // Noncompliant\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;  // Noncompliant\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	obsolete,pitfall	0	HTML	1576224557533	1576224557533	1	java
1339	Lazy initialization of "static" fields should be "synchronized"	S2444	\N	squid	<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of non-<code>volatile</code> fields could mean that a second thread\nhas access to a half-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the\ninitialization block should be <code>synchronized</code> or the variable made <code>volatile</code>.</p>\n<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprotected static Object instance = null;\n\npublic static Object getInstance() {\n    if (instance != null) {\n        return instance;\n    }\n\n    instance = new Object();  // Noncompliant\n    return instance;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprotected static volatile Object instance = null;\n\npublic static Object getInstance() {\n    if (instance != null) {\n        return instance;\n    }\n\n    instance = new Object();\n    return instance;\n}\n</pre>\n<p>or </p>\n<pre>\nprotected static Object instance = null;\n\npublic static synchronized Object getInstance() {\n    if (instance != null) {\n        return instance;\n    }\n\n    instance = new Object();\n    return instance;\n}\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	multi-threading	0	HTML	1576224557534	1576224557535	1	java
1379	"SingleConnectionFactory" instances should be set to "reconnectOnException"	S3438	\N	squid	<p>Use of a Spring <code>SingleConnectionFactory</code> without enabling the <code>reconnectOnException</code> setting will prevent automatic\nconnection recovery when the connection goes bad. </p>\n<p>That's because the <code>reconnectOnException</code> property defaults to <code>false</code>. As a result, even if the code that uses this\nconnection factory (Spring's <code>DefaultMessageListenerContainer</code> or your own code) has reconnect logic, that code won't work because the\n<code>SingleConnectionFactory</code> will act like a single-connection pool by preventing connection <code>close</code> calls from actually closing\nanything. As a result, subsequent factory <code>create</code> operations will just hand back the original broken <code>Connection</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory"&gt;  &lt;!-- Noncompliant --&gt;\n   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;\n &lt;/bean&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory" p:reconnectOnException="true"&gt;\n   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;\n &lt;/bean&gt;\n</pre>\n<p>or</p>\n<pre>\n &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory"&gt;\n   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;\n   &lt;property name="reconnectOnException"&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;\n &lt;/bean&gt;\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	spring	0	HTML	1576224558650	1576224558696	2	java
1233	Functions should not be defined with a variable number of arguments	S923	\N	squid	<p>As stated per effective java : </p>\n<blockquote>\n  <p>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can\n  produce confusing results if used inappropriately.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid fun ( String... strings )\t// Noncompliant\n{\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments. </li>\n  <li> MISRA C++:2008, 8-4-1 - Functions shall not be defined using the ellipsis notation. </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/i4CW">CERT, DCL50-CPP.</a> - Do not define a C-style variadic function </li>\n</ul>	0	\N	READY	java	CONSTANT_ISSUE	\N	1min	\N	cert,misra,pitfall	0	HTML	1576224554837	1576224554838	1	java
1234	Class names should comply with a naming convention	S00101	S101	squid	<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224554839	1576224554840	1	java
1235	Method names should comply with a naming convention	S00100	S100	squid	<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic int DoSomething(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int doSomething(){...}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are excluded. </p>\n<pre>\n@Override\npublic int Do_Something(){...}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224554843	1576224554844	1	java
1236	Enumeration should not be implemented	S1150	\N	squid	<p>From the official Oracle Javadoc:</p>\n<blockquote>\n  <p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove\n  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass implements Enumeration {  // Non-Compliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	obsolete	0	HTML	1576224554847	1576224554848	1	java
1237	"switch case" clauses should not have too many lines of code	S1151	\N	squid	<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // 6 lines till next case\n    methodCall1("");\n    methodCall2("");\n    methodCall3("");\n    methodCall4("");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1("");\n    methodCall2("");\n    methodCall3("");\n    methodCall4("");\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	brain-overload	0	HTML	1576224554849	1576224554850	1	java
1290	"InterruptedException" should not be ignored	S2142	\N	squid	<p><code>InterruptedExceptions</code> should never be ignored in the code, and simply logging the exception counts in this case as "ignoring". The\nthrowing of the <code>InterruptedException</code> clears the interrupted state of the Thread, so if the exception is not handled properly the fact\nthat the thread was interrupted will be lost. Instead, <code>InterruptedExceptions</code> should either be rethrown - immediately or after cleaning up\nthe method's state - or the thread should be re-interrupted by calling <code>Thread.interrupt()</code> even if this is supposed to be a\nsingle-threaded application. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted -\nprobably without finishing its task.</p>\n<p>Similarly, the <code>ThreadDeath</code> exception should also be propagated. According to its JavaDoc:</p>\n<blockquote>\n  <p>If <code>ThreadDeath</code> is caught by a method, it is important that it be rethrown so that the thread actually dies.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) {\n      // do stuff\n    }\n  }catch (InterruptedException e) { // Noncompliant; logging is not enough\n    LOGGER.log(Level.WARN, "Interrupted!", e);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) {\n      // do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, "Interrupted!", e);\n    // Restore interrupted state...\n    Thread.currentThread().interrupt();\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/391.html">MITRE, CWE-391</a> - Unchecked Error Condition </li>\n  <li> <a href="https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#2.1">Dealing with InterruptedException</a> </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cwe,multi-threading	0	HTML	1576224556618	1576224556661	2	java
1291	Child class fields should not shadow parent class fields	S2387	\N	squid	<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at\nbest, chaos at worst. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. This rule ignores <code>private</code> parent\nclass fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>	4	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	confusing	0	HTML	1576224556710	1576224556712	1	java
1340	Return values from functions without side effects should not be ignored	S2201	\N	squid	<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected. </p>\n<p>To prevent generating any false-positives, this rule triggers an issues only on the following predefined list of immutable classes in the Java API\n:</p>\n<ul>\n  <li> <code>java.lang.String</code> </li>\n  <li> <code>java.lang.Boolean</code> </li>\n  <li> <code>java.lang.Integer</code> </li>\n  <li> <code>java.lang.Double</code> </li>\n  <li> <code>java.lang.Float</code> </li>\n  <li> <code>java.lang.Byte</code> </li>\n  <li> <code>java.lang.Character</code> </li>\n  <li> <code>java.lang.Short</code> </li>\n  <li> <code>java.lang.StackTraceElement</code> </li>\n  <li> <code>java.time.DayOfWeek</code> </li>\n  <li> <code>java.time.Duration</code> </li>\n  <li> <code>java.time.Instant</code> </li>\n  <li> <code>java.time.LocalDate</code> </li>\n  <li> <code>java.time.LocalDateTime</code> </li>\n  <li> <code>java.time.LocalTime</code> </li>\n  <li> <code>java.time.Month</code> </li>\n  <li> <code>java.time.MonthDay</code> </li>\n  <li> <code>java.time.OffsetDateTime</code> </li>\n  <li> <code>java.time.OffsetTime</code> </li>\n  <li> <code>java.time.Period</code> </li>\n  <li> <code>java.time.Year</code> </li>\n  <li> <code>java.time.YearMonth</code> </li>\n  <li> <code>java.time.ZonedDateTime</code> </li>\n  <li> <code>java.math.BigInteger</code> </li>\n  <li> <code>java.math.BigDecimal</code> </li>\n  <li> <code>java.util.Optional</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void handle(String command){\n  command.toLowerCase(); // Noncompliant; result of method thrown away\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void handle(String command){\n  String formattedCommand = command.toLowerCase();\n  ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise an issue when both these conditions are met:</p>\n<ul>\n  <li> The method call is in a <code>try</code> block with an associated <code>catch</code> clause. </li>\n  <li> The method name starts with "parse", "format", "decode" or "valueOf" or the method is <code>String.getBytes(Charset)</code>. </li>\n</ul>\n<pre>\nprivate boolean textIsInteger(String textToCheck) {\n\n    try {\n        Integer.parseInt(textToCheck, 10); // OK\n        return true;\n    } catch (NumberFormatException ignored) {\n        return false;\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/eoAyAQ">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	cert,misra	0	HTML	1576224557535	1576224557579	2	java
1341	Package declaration should match source file directory	S1598	\N	squid	<p>By convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java\nfile located at "src/org/sonarqube/Foo.java" should have a package of "org.sonarqube". </p>\n<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the "Foo.java" class part of the\n"com.apple" package, which could degrade the maintainability of both the class and its application.</p>	3	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224557624	1576224557625	1	java
1342	".equals()" should not be used to test the values of "Atomic" classes	S2204	\N	squid	<p><code>AtomicInteger</code>, and <code>AtomicLong</code> extend <code>Number</code>, but they're distinct from <code>Integer</code> and\n<code>Long</code> and should be handled differently. <code>AtomicInteger</code> and <code>AtomicLong</code> are designed to support lock-free,\nthread-safe programming on single variables. As such, an <code>AtomicInteger</code> will only ever be "equal" to itself. Instead, you should\n<code>.get()</code> the value and make comparisons on it.</p>\n<p>This applies to all the atomic, seeming-primitive wrapper classes: <code>AtomicInteger</code>, <code>AtomicLong</code>, and\n<code>AtomicBoolean</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.equals(aInt2)) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.get() == aInt2.get()) { ... }\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	multi-threading	0	HTML	1576224557626	1576224557626	2	java
1343	"notifyAll" should be used	S2446	\N	squid	<p><code>notify</code> and <code>notifyAll</code> both wake up sleeping threads, but <code>notify</code> only rouses one, while <code>notifyAll</code>\nrouses all of them. Since <code>notify</code> might not wake up the right thread, <code>notifyAll</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notify();  // Noncompliant\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notifyAll();\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/OoAlAQ">CERT, THI02-J.</a> - Notify all waiting threads rather than a single thread\n  </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	cert,multi-threading	0	HTML	1576224557627	1576224557628	2	java
1380	Value-based objects should not be serialized	S3437	\N	squid	<p>According to the documentation,</p>\n<blockquote>\n  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization...\n</blockquote>\n<p>For example (credit to Brian Goetz), imagine Foo is a value-based class:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = new Foo(0);\n</pre>\n<p>Serialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = arr[0];\n</pre>\n<p>Serialization promises that on deserialization of <code>arr</code>, elements 0 and 1 <strong>will</strong> be aliased.</p>\n<p>While these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true\nvalue types are introduced in the language.</p>\n<p>This rule raises an issue when a <code>Serializable</code> class defines a non-transient, non-static field field whose type is a known serializable\nvalue-based class. Known serializable value-based classes are: all the classes in the <code>java.time</code> package except <code>Clock</code>; the\ndate classes for alternate calendars: <code>HijrahDate</code>, <code>JapaneseDate</code>, <code>MinguoDate</code>, <code>ThaiBuddhistDate</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass implements Serializable {\n  private HijrahDate date;  // Noncompliant; mark this transient\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass implements Serializable {\n  private transient HijrahDate date;\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html">Value-based classes</a> </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	java8,lock-in,serialization	0	HTML	1576224558740	1576224558785	2	java
1381	Reflection should not be used to check non-runtime annotations	S2109	\N	squid	<p>The writer of an annotation can set one of three retention policies for it:</p>\n<ul>\n  <li> <code>RetentionPolicy.SOURCE</code> - these annotations are dropped during compilation, E.G. <code>@Override</code>,\n  <code>@SuppressWarnings</code>. </li>\n  <li> <code>RetentionPolicy.CLASS</code> - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the\n  default. </li>\n  <li> <code>RetentionPolicy.RUNTIME</code> - these annotations are present in the class file and loaded into the JVM. </li>\n</ul>\n<p>Only annotations that have been given a <code>RUNTIME</code> retention policy will be available to reflection. Testing for annotations with any\nother retention policy is simply an error, since the test will always return false.</p>\n<p>This rule checks that reflection is not used to detect annotations that do not have <code>RUNTIME</code> retention.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMethod m = String.class.getMethod("getBytes", new Class[] {int.class,\nint.class, byte[].class, int.class});\nif (m.isAnnotationPresent(Override.class)) {  // Noncompliant; test will always return false, even when @Override is present in the code\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224558830	1576224558833	2	java
1238	Constructors should not be used to instantiate "String" and primitive-wrapper classes	S2129	\N	squid	<p>Constructors for <code>Strings</code> and the objects used to wrap primitives should never be used. Doing so is less clear and uses more memory\nthan simply using the desired value in the case of strings, and using <code>valueOf</code> for everything else.</p>\n<p>Further, these constructors are deprecated in Java 9, which is an indication that they will eventually be removed from the language altogether.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString empty = new String(); // Noncompliant; yields essentially "", so just use that.\nString nonempty = new String("Hello world"); // Noncompliant\nDouble myDouble = new Double(1.1); // Noncompliant; use valueOf\nInteger integer = new Integer(1); // Noncompliant\nBoolean bool = new Boolean(true); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString empty = "";\nString nonempty = "Hello world";\nDouble myDouble = Double.valueOf(1.1);\nInteger integer = Integer.valueOf(1);\nBoolean bool = Boolean.valueOf(true);\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	performance	0	HTML	1576224554851	1576224554852	1	java
1239	String.valueOf() should not be appended to a String	S1153	\N	squid	<p>Appending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.</p>\n<p>The argument passed to <code>String.valueOf()</code> should be directly appended instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void display(int i){\n  System.out.println("Output is " + String.valueOf(i));    // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void display(int i){\n  System.out.println("Output is " + i);                    // Compliant\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224554853	1576224554853	1	java
1240	Values should not be uselessly incremented	S2123	\N	squid	<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i = i++; // Noncompliant; i is still zero\n\n  return j++; // Noncompliant; 0 returned\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i++;\n  return ++j;\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	unused	0	HTML	1576224554854	1576224554855	2	java
1241	Labels should not be used	LabelsShouldNotBeUsedCheck	S1119	squid	<p>Labels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to\nfollow, which reduces the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][] = {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row = 0; row &lt; matrix.length; row++) {   // Non-Compliant\n  for (int col = 0; col &lt; matrix[row].length; col++) {\n    if (col == row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int row = 1; row &lt; matrix.length; row++) {          // Compliant\n  for (int col = 0; col &lt; row; col++) {\n    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	confusing	0	HTML	1576224554855	1576224554856	1	java
1292	Defined filters should be used	S3355	\N	squid	<p>Every filter defined in <code>web.xml</code> file should be used in a <code>&lt;filter-mapping&gt;</code> element. Otherwise such filters are not\ninvoked.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;filter&gt;\n     &lt;filter-name&gt;DefinedNotUsed&lt;/filter-name&gt;\n     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;\n  &lt;/filter&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;filter&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;\n  &lt;/filter&gt;\n\n  &lt;filter-mapping&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  &lt;/filter-mapping&gt;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	injection,owasp-a1	0	HTML	1576224556716	1576224556718	3	java
1293	Mutable fields should not be "public static"	S2386	\N	squid	<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {"first","second"};  // Noncompliant\n  public static String [] strings2 = {"first","second"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/582.html">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/607.html">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/rwBc">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/JQLEAw">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n  </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert,cwe,unpredictable	0	HTML	1576224556722	1576224556772	3	java
1344	"private" methods that don't access instance data should be "static"	S2325	\N	squid	<p><code>private</code> methods that don't access instance data can be <code>static</code> to prevent any misunderstanding about the contract of the\nmethod.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = "magic";\n\n  private String getMagicWord() { // Noncompliant\n    return magicWord;\n  }\n\n  private void setMagicWord(String value) { // Noncompliant\n    magicWord = value;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = "magic";\n\n  private static String getMagicWord() {\n    return magicWord;\n  }\n\n  private static void setMagicWord(String value) {\n    magicWord = value;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:</p>\n<ul>\n  <li> <code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code> </li>\n  <li> <code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code> </li>\n  <li> <code>private void readObjectNoData() throws ObjectStreamException;</code> </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224557629	1576224557630	1	java
1345	Blocks should be synchronized on "private final" fields	S2445	\N	squid	<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So synchronizing on a non-<code>final</code>\nfield makes it possible for the field's value to change while a thread is in a block synchronized on the old value. That would allow a second thread,\nsynchronized on the new value, to enter the block at the same time.</p>\n<p>The story is very similar for synchronizing on parameters; two different threads running the method in parallel could pass two different object\ninstances in to the method as parameters, completely undermining the synchronization.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate String color = "red";\n\nprivate void doSomething(){\n  synchronized(color) {  // Noncompliant; lock is actually on object instance "red" referred to by the color variable\n    //...\n    color = "green"; // other threads now allowed into this block\n    // ...\n  }\n  synchronized(new Object()) { // Noncompliant this is a no-op.\n     // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate String color = "red";\nprivate final Object lockObj = new Object();\n\nprivate void doSomething(){\n  synchronized(lockObj) {\n    //...\n    color = "green";\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/412.html">MITRE, CWE-412</a> - Unrestricted Externally Accessible Lock </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/413">MITRE, CWE-413</a> - Improper Resource Locking </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/6IEzAg">CERT, LCK00-J.</a> - Use private final lock objects to synchronize classes that\n  may interact with untrusted code </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert,cwe,multi-threading	0	HTML	1576224557631	1576224557675	2	java
1346	Cognitive Complexity of methods should not be too high	S3776	\N	squid	<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>\n</ul>	3	\N	READY	java	LINEAR_OFFSET	1min	5min	per complexity point over the threshold	brain-overload	0	HTML	1576224557721	1576224557722	1	java
1382	Untrusted data should not be stored in sessions	S3318	\N	squid	<p>Data in a web session is considered inside the "trust boundary". That is, it is assumed to be trustworthy. But storing unvetted data from an\nunauthenticated user violates the trust boundary, and may lead to that data being used inappropriately.</p>\n<p>This rule raises an issue when data from <code>Cookie</code>s or <code>HttpServletRequest</code>s is stored in a session. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlogin = request.getParameter("login");\nsession.setAttribute("login", login);  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/501">MITRE, CWE-501</a> - Trust Boundary Violation </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cwe	0	HTML	1576224558836	1576224558839	3	java
1383	Abstract class names should comply with a naming convention	S00118	S118	squid	<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\nabstract class names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>^Abstract[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nabstract class MyClass { // Noncompliant\n}\n\nclass AbstractLikeClass { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nabstract class MyAbstractClass {\n}\n\nclass LikeClass {\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	convention	0	HTML	1576224558843	1576224558845	1	java
1384	Conditionally executed blocks should be reachable	S2583	\N	squid	<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never\nbe used in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = false;\nif (a) { // Noncompliant\n  doSomething(); // never executed\n}\n\nif (!a || b) { // Noncompliant; "!a" is always "true", "b" is never evaluated\n  doSomething();\n} else {\n  doSomethingElse(); // never executed\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert,cwe,misra,pitfall,unused	0	HTML	1576224558852	1576224558854	2	java
1385	Local variable and method parameter names should comply with a naming convention	S00117	S117	squid	<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic void doSomething(int my_param) {\n  int LOCAL;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int myParam) {\n  int local;\n  ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Loop counters are ignored by this rule.</p>\n<pre>\nfor (int i_1 = 0; i_1 &lt; limit; i_1++) {  // Compliant\n  // ...\n}\n</pre>\n<p>as well as one-character <code>catch</code> variables: </p>\n<pre>\ntry {\n//...\n} catch (Exception e) { // Compliant\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224558857	1576224558859	1	java
1242	Collection.isEmpty() should be used to test for emptiness	S1155	\N	squid	<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can\nbe more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations\nof <code>size()</code> can be <code>O(n)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myCollection.size() == 0) {  // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myCollection.isEmpty()) {\n  /* ... */\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	clumsy	0	HTML	1576224554857	1576224554858	1	java
1243	"ScheduledThreadPoolExecutor" should not have 0 core threads	S2122	\N	squid	<p><code>java.util.concurrent.ScheduledThreadPoolExecutor</code>'s pool is sized with <code>corePoolSize</code>, so setting <code>corePoolSize</code>\nto zero means the executor will have no threads and run nothing.</p>\n<p>This rule detects instances where <code>corePoolSize</code> is set to zero, via either its setter or the object constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void do(){\n\n  ScheduledThreadPoolExecutor stpe1 = new ScheduledThreadPoolExecutor(0); // Noncompliant\n\n  ScheduledThreadPoolExecutor stpe2 = new ScheduledThreadPoolExecutor(POOL_SIZE);\n  stpe2.setCorePoolSize(0);  // Noncompliant\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	\N	0	HTML	1576224554859	1576224554860	2	java
1244	Test classes should comply with a naming convention	S3577	\N	squid	<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided\nregular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value: <code>^((Test|IT)[a-zA-Z0-9]+|[A-Z][a-zA-Z0-9]*(Test|IT|TestCase|ITCase))$</code></p>\n<pre>\nclass Foo {  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass FooTest {\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	convention,tests	0	HTML	1576224554861	1576224554862	1	java
1245	Case insensitive string comparisons should be made without intermediate upper or lower casing	S1157	\N	squid	<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224554864	1576224554865	1	java
1246	Pseudorandom number generators (PRNGs) should not be used in secure contexts	S2245	\N	squid	<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.</p>\n<p>As the <code>java.util.Random</code> class relies on a pseudorandom number generator, this class and relating <code>java.lang.Math.random()</code>\nmethod should not be used for security-critical applications or for protecting sensitive data. In such context, the\n<code>java.security.SecureRandom</code> class which relies on a cryptographically strong random number generator (RNG) should be used in place.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nRandom random = new Random();\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSecureRandom random = new SecureRandom();\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/338.html">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator\n  (PRNG) </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/330.html">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/310">MITRE, CWE-310</a> - Cryptographic Issues </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/mAFqAQ">CERT, MSC02-J.</a> - Generate strong random numbers </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/qw4">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom\n  numbers </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/WYIyAQ">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom\n  numbers </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM">Predictable Pseudo Random Number\n  Generator</a> </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	cert,cwe,owasp-a6	0	HTML	1576224554866	1576224554907	3	java
1247	Primitive wrappers should not be instantiated only for "toString" or "compareTo" calls	S1158	\N	squid	<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo</code> method is\ninefficient.</p>\n<p>Instead, the static <code>toString()</code> or <code>compare</code> method of the primitive wrapper class should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew Integer(myInteger).toString();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger.toString(myInteger);        // Compliant\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224554952	1576224554952	1	java
1294	Catches should be combined	S2147	\N	squid	<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224556816	1576224556817	1	java
1295	Double Brace Initialization should not be used	S3599	\N	squid	<p>Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to\nmemory leaks if the anonymous inner class is returned and held by other objects. Even when there's no leak, DBI is so obscure that it's bound to\nconfuse most maintainers. </p>\n<p>For collections, use <code>Arrays.asList</code> instead, or explicitly add each item directly to the collection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMap source = new HashMap(){{ // Noncompliant\n    put("firstName", "John");\n    put("lastName", "Smith");\n}};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMap source = new HashMap();\n// ...\nsource.put("firstName", "John");\nsource.put("lastName", "Smith");\n// ...\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	leak	0	HTML	1576224556818	1576224556819	2	java
1296	Inner class calls to super class methods should be unambiguous	S2388	\N	squid	<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can\nbe confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called\nexplicitly, using <code>super.</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  // Noncompliant; was Outer.this.foo() intended instead?\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      // ...\n    }\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224556820	1576224556820	1	java
1347	"collect" should be used with "Streams" instead of "list::add"	S2203	\N	squid	<p>While you can use either <code>forEach(list::add)</code> or <code>collect</code> with a <code>Stream</code>, <code>collect</code> is by far the\nbetter choice because it's automatically thread-safe and parallellizable. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; bookNames = new ArrayList&lt;&gt;();\nbooks.stream().filter(book -&gt; book.getIsbn().startsWith("0"))\n                .map(Book::getTitle)\n                .forEach(bookNames::add);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; bookNames = books.stream().filter(book -&gt; book.getIsbn().startsWith("0"))\n                .map(Book::getTitle)\n                .collect(Collectors.toList());\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	java8	0	HTML	1576224557727	1576224557728	1	java
1348	Optional value should only be accessed after calling isPresent()	S3655	\N	squid	<p><code>Optional</code> value can hold either a value or not. The value held in the <code>Optional</code> can be accessed using the\n<code>get()</code> method, but it will throw a </p>\n<p><code>NoSuchElementException</code> if there is no value present. To avoid the exception, calling the <code>isPresent()</code> method should always\nbe done before any call to <code>get()</code>.</p>\n<p>Alternatively, note that other methods such as <code>orElse(...)</code>, <code>orElseGet(...)</code> or <code>orElseThrow(...)</code> can be used\nto specify what to do with an empty <code>Optional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.get(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nif (value.isPresent()) {\n  String stringValue = value.get();\n}\n</pre>\n<p>or</p>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.orElse("default");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	cwe	0	HTML	1576224557730	1576224557731	2	java
1386	Strings literals should be placed on the left side when checking for equality	S1132	\N	squid	<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>\n<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myString = null;\n\nSystem.out.println("Equal? " + myString.equals("foo"));                        // Noncompliant; will raise a NPE\nSystem.out.println("Equal? " + (myString != null &amp;&amp; myString.equals("foo")));  // Noncompliant; null check could be removed\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSystem.out.println("Equal?" + "foo".equals(myString));                         // properly deals with the null case\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	bad-practice	0	HTML	1576224558866	1576224558868	1	java
1387	Locks should be released	S2222	\N	squid	<p>If a lock is acquired and released within a method, then it must be released along all execution paths of that method.</p>\n<p>Failing to do so will expose the conditional locking logic to the method's callers and hence be deadlock-prone.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    lock.lock(); // Noncompliant\n    if (isInitialized()) {\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    if (isInitialized()) {\n      lock.lock();\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cwe,multi-threading	0	HTML	1576224558871	1576224558873	2	java
1388	"Optional" should not be used for parameters	S3553	\N	squid	<p>The Java language authors have been quite frank that <code>Optional</code> was intended for use only as a return type, as a way to convey that a\nmethod may or may not return a value. </p>\n<p>And for that, it's valuable but using <code>Optional</code> on the input side increases the work you have to do in the method without really\nincreasing the value. With an <code>Optional</code> parameter, you go from having 2 possible inputs: null and not-null, to three: null,\nnon-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are\noptional, and there's really no reason to have <code>Optional</code> parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String sayHello(Optional&lt;String&gt; name) {  // Noncompliant\n  if (name == null || !name.isPresent()) {\n    return "Hello World";\n  } else {\n    return "Hello " + name;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String sayHello(String name) {\n  if (name == null) {\n    return "Hello World";\n  } else {\n    return "Hello " + name;\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224558876	1576224558878	1	java
1248	"Double.longBitsToDouble" should not be used for "int"	S2127	\N	squid	<p><code>Double.longBitsToDouble</code> expects a 64-bit, <code>long</code> argument. Pass it a smaller value, such as an <code>int</code> and the\nmathematical conversion into a <code>double</code> simply won't work as anticipated because the layout of the bits will be interpreted incorrectly, as\nif a child were trying to use an adult's gloves.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 42;\ndouble d = Double.longBitsToDouble(i);  // Noncompliant\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224554953	1576224554954	2	java
1249	Printf-style format strings should be used correctly	S3457	\N	squid	<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nresult in the wrong strings being created. This rule statically validates the correlation of <code>printf</code>-style format strings to their\narguments when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>,\n<code>java.io.PrintStream</code>, <code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of\n<code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format("First {0} and then {1}", "foo", "bar");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters "foo" and "bar" will be simply ignored here\nString.format("Display %3$d and then %d", 1, 2, 3);   //Noncompliant; the second argument '2' is unused\nString.format("Too many arguments %d and %d", 1, 2, 3);  //Noncompliant; the third argument '3' is unused\nString.format("First Line\\n");   //Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format("Is myObject null ? %b", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)\nString.format("value is " + value); // Noncompliant\nString s = String.format("string without arguments"); // Noncompliant\n\nMessageFormat.format("Result '{0}'.", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)\nMessageFormat.format("Result {0}.", value, value);  // Noncompliant; 2nd argument is not used\nMessageFormat.format("Result {0}.", myObject.toString()); // Noncompliant; no need to call toString() on objects\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format("First %s and then %s", "foo", "bar");\nString.format("Display %2$d and then %d", 1, 3);\nString.format("Too many arguments %d %d", 1, 2);\nString.format("First Line%n");\nString.format("Is myObject null ? %b", myObject == null);\nString.format("value is %d", value);\nString s = "string without arguments";\n\nMessageFormat.format("Result {0}.", value);\nMessageFormat.format("Result '{0}'  =  {0}", value);\nMessageFormat.format("Result {0}.", myObject);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/wQA1">CERT, FIO47-C.</a> - Use valid format strings </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/e4EyAQ">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	cert,confusing	0	HTML	1576224554955	1576224554999	1	java
1250	Test methods should comply with a naming convention	S3578	\N	squid	<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided\nregular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value: <code>^test[A-Z][a-zA-Z0-9]*$</code></p>\n<pre>\n@Test\npublic void foo() {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testFoo() {\n  // ...\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	convention,tests	0	HTML	1576224555044	1576224555045	1	java
1251	Classes should not access their own subclasses during initialization	S2390	\N	squid	<p>When a parent class references a member of a subclass during its own initialization, the results might not be what you expect because the child\nclass might not have been initialized yet. This could create what is known as an "initialisation cycle", or even a deadlock in some extreme cases.</p>\n<p>To make things worse, these issues are very hard to diagnose so it is highly recommended you avoid creating this kind of dependencies.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  static int field1 = Child.method(); // Noncompliant\n  static int field2 = 42;\n\n  public static void main(String[] args) {\n    System.out.println(Parent.field1); // will display "0" instead of "42"\n  }\n}\n\nclass Child extends Parent {\n  static int method() {\n    return Parent.field2;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cert	0	HTML	1576224555047	1576224555048	1	java
1252	Throwable and Error should not be caught	S1181	\N	squid	<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not\nmeant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from\nwhich an application should not attempt to recover.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/396.html">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/BIB3AQ">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors\n  </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	bad-practice,cert,cwe,error-handling	0	HTML	1576224555049	1576224555049	1	java
1297	Underscores should be used to make large numbers readable	S2148	\N	squid	<p>Beginning with Java 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this\nmanner has no semantic meaning, but makes it easier for maintainers to understand the code.</p>\n<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Base</th>\n      <th> Minimum digits</th>\n    </tr>\n    <tr>\n      <td>binary</td>\n      <td> 9 </td>\n    </tr>\n    <tr>\n      <td>octal</td>\n      <td> 9 </td>\n    </tr>\n    <tr>\n      <td>decimal</td>\n      <td> 6 </td>\n    </tr>\n    <tr>\n      <td>hexadecimal</td>\n      <td> 9 </td>\n    </tr>\n  </tbody>\n</table>\n<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 10000000;  // Noncompliant; is this 10 million or 100 million?\nint  j = 0b01101001010011011110010101011110;  // Noncompliant\nlong l = 0x7fffffffffffffffL;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i = 10_000_000;\nint  j = 0b01101001_01001101_11100101_01011110;\nlong l = 0x7fff_ffff_ffff_ffffL;\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224556821	1576224556863	1	java
1298	Ternary operators should not be nested	S3358	\N	squid	<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getTitle(Person p) {\n\n  return p.gender==Person.MALE?"Mr. ":p.isMarried()?"Mrs. ":"Miss " + p.getLastName();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\n  String honorific = p.isMarried()?"Mrs. ":"Miss ";\n  return p.gender==Person.MALE?"Mr. ": honorific + p.getLastName();\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	confusing	0	HTML	1576224556908	1576224556909	1	java
1299	Unused local variables should be removed	S1481	\N	squid	<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	unused	0	HTML	1576224556910	1576224556911	1	java
1349	Generic exceptions should never be thrown	S00112	S112	squid	<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException("My Message");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException("My Message");\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won't be raised at all if superclass is not part of the\nanalysis).</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>\n<pre>\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/397.html">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/BoB3AQ">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n  </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cert,cwe,error-handling	0	HTML	1576224557733	1576224557776	1	java
1350	Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used	S1149	\N	squid	<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them\nthread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>\n<p>It is better to use their new unsynchronized replacements:</p>\n<ul>\n  <li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code> </li>\n  <li> <code>Deque</code> instead of <code>Stack</code> </li>\n  <li> <code>HashMap</code> instead of <code>Hashtable</code> </li>\n  <li> <code>StringBuilder</code> instead of <code>StringBuffer</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nVector cats = new Vector();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrayList cats = new ArrayList();\n</pre>\n<h2>Exceptions</h2>\n<p>Use of those synchronized classes is ignored in the signatures of overriding methods.</p>\n<pre>\n@Override\npublic Vector getCats() {...}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	performance	0	HTML	1576224557821	1576224557822	1	java
1389	Type parameter names should comply with a naming convention	S00119	S119	squid	<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type\nparameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>\n<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass&lt;TYPE&gt; { // Noncompliant\n  &lt;TYPE&gt; void method(TYPE t) { // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass&lt;T&gt; {\n  &lt;T&gt; void method(T t) {\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	convention	0	HTML	1576224558880	1576224558882	1	java
1390	Deprecated code should be removed	S1133	\N	squid	<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>	0	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	obsolete	0	HTML	1576224558885	1576224558886	1	java
1391	"Exception" should not be caught when not required by called methods	S2221	\N	squid	<p>Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,\nboth checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime\nexceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed\nin the <code>catch</code> clause.</p>\n<p>This rule raises an issue if <code>Exception</code> is caught when it is not explicitly thrown by a method in the <code>try</code> block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException\n} catch (Exception e) { // Noncompliant\n  // log exception ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {\n  // log exception ...\n}\n</pre>\n<p>or if runtime exceptions should not be caught:</p>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {\n  // log exception ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/396.html">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cwe,error-handling	0	HTML	1576224558888	1576224558932	1	java
1392	Interface names should comply with a naming convention	S00114	S114	squid	<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic interface myInterface {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyInterface {...}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	convention	0	HTML	1576224558978	1576224558980	1	java
1253	Classes that override "clone" should be "Cloneable" and call "super.clone()"	S1182	\N	squid	<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding\n<code>clone()</code> without implementing <code>Cloneable</code> can be useful if you want to control how subclasses clone themselves, but otherwise,\nit's probably a mistake.</p>\n<p>The usual convention for <code>Object.clone()</code> according to Oracle's Javadoc is:</p>\n<ol>\n  <li> <code>x.clone() != x</code> </li>\n  <li> <code>x.clone().getClass() == x.getClass()</code> </li>\n  <li> <code>x.clone().equals\\(x\\)</code> </li>\n</ol>\n<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>\n<ol>\n  <li> <code>super.clone()</code> returns a new object instance </li>\n  <li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on </li>\n  <li> <code>Object.clone()</code> performs a shallow copy of the object's state </li>\n</ol>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass BaseClass {  // Noncompliant; should implement Cloneable\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println("Hello, world!");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println("Hello, world!");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Displays "Hello, world!" as expected. Invariant #2 is satisfied\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/580.html">MITRE, CWE-580</a> - clone() Method Without super.clone() </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/CQHEAw">CERT, MET53-J.</a> - Ensure that the clone() method calls super.clone() </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cert,convention,cwe	0	HTML	1576224555050	1576224555096	1	java
1254	JUnit framework methods should be declared properly	S2391	\N	squid	<p>If the <code>suite</code> method in a JUnit 3 <code>TestCase</code> is not declared correctly, it will not be used. Such a method must be named\n"suite", have no arguments, be <code>public static</code>, and must return either a <code>junit.framework.Test</code> or a\n<code>junit.framework.TestSuite</code>.</p>\n<p>Similarly, <code>setUp</code> and <code>tearDown</code> methods that aren't properly capitalized will also be ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nTest suite() { ... }  // Noncompliant; must be public static\npublic static boolean suite() { ... }  // Noncompliant; wrong return type\npublic static Test suit() { ... }  // Noncompliant; typo in method name\npublic static Test suite(int count) { ... } // Noncompliant; must be no-arg\n\npublic void setup() { ... } // Noncompliant; should be setUp\npublic void tearDwon() { ... }  // Noncompliant; should be tearDown\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static Test suite() { ... }\npublic void setUp() { ... }\npublic void tearDown() { ... }\n</pre>	4	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	tests	0	HTML	1576224555142	1576224555144	1	java
1255	"wait", "notify" and "notifyAll" should only be called when a lock is obviously held on an object	S2273	\N	squid	<p>By contract, the method <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> should be called by a\nthread that is the owner of the object's monitor. If this is not the case an <code>IllegalMonitorStateException</code> exception is thrown. This rule\nreinforces this constraint by making it mandatory to call one of these methods only inside a <code>synchronized</code> method or statement. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    obj.wait();\n  }\n  ... // Perform removal\n}\n</pre>\n<p>or</p>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void removeElement() {\n  synchronized(obj) {\n    while (!suitableCondition()){\n      obj.wait();\n    }\n    ... // Perform removal\n  }\n}\n</pre>\n<p>or</p>\n<pre>\nprivate synchronized void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	multi-threading	0	HTML	1576224555148	1576224555150	2	java
1256	"Iterator.next()" methods should throw "NoSuchElementException"	S2272	\N	squid	<p>By contract, any implementation of the <code>java.util.Iterator.next()</code> method should throw a <code>NoSuchElementException</code> exception\nwhen the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this\n<code>Iterator</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      return null;\n    }\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      throw new NoSuchElementException();\n    }\n    ...\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	unpredictable	0	HTML	1576224555153	1576224555155	2	java
1300	Constructor injection should be used instead of field injection	S3306	\N	squid	<p>Field injection seems like a tidy way to get your classes what they need to do their jobs, but it's really a <code>NullPointerException</code>\nwaiting to happen unless all your class constructors are <code>private</code>. That's because any class instances that are constructed by callers,\nrather than instantiated by the Spring framework, won't have the ability to perform the field injection.</p>\n<p>Instead <code>@Inject</code> should be moved to the constructor and the fields required as constructor parameters.</p>\n<p>This rule raises an issue when classes with non-<code>private</code> constructors (including the default constructor) use field injection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyComponent {  // Anyone can call the default constructor\n\n  @Inject MyCollaborator collaborator;  // Noncompliant\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();  // this will fail in classes new-ed by a caller\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyComponent {\n\n  private final MyCollaborator collaborator;\n\n  @Inject\n  public MyComponent(MyCollaborator collaborator) {\n    Assert.notNull(collaborator, "MyCollaborator must not be null!");\n    this.collaborator = collaborator;\n  }\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	design,pitfall	0	HTML	1576224556912	1576224556959	2	java
1301	Threads should not be started in constructors	S2693	\N	squid	<p>The problem with invoking <code>Thread.start()</code> in a constructor is that you'll have a confusing mess on your hands if the class is ever\nextended because the superclass' constructor will start the thread before the child class has truly been initialized.</p>\n<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  Thread thread = null;\n\n  public MyClass(Runnable runnable) {\n    thread = new Thread(runnable);\n    thread.start(); // Noncompliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZQIRAg">CERT, TSM02-J.</a> - Do not use background threads during class initialization\n  </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	cert,multi-threading,pitfall	0	HTML	1576224557004	1576224557005	1	java
1351	Non-serializable classes should not be written	S2118	\N	squid	<p>Nothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown.\nOnly a class that <code>implements Serializable</code> or one that extends such a class can successfully be serialized (or de-serialized). </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Vegetable {  // neither implements Serializable nor extends a class that does\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);  // Noncompliant. Nothing will be written\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Vegetable implements Serializable {  // can now be serialized\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	serialization	0	HTML	1576224557824	1576224557825	2	java
1352	Methods should not have too many parameters	S00107	S107	squid	<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Methods annotated with Spring's <code>@RequestMapping</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore\nignored.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	brain-overload	0	HTML	1576224557827	1576224557828	1	java
1353	Try-catch blocks should not be nested	S1141	\N	squid	<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand\nwhich block will catch which exception.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	confusing	0	HTML	1576224557834	1576224557835	1	java
1393	Track uses of "FIXME" tags	S1134	\N	squid	<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	cwe	0	HTML	1576224558987	1576224558987	1	java
1394	Files should contain an empty newline at the end	S00113	S113	squid	<p>Some tools work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224558991	1576224558993	1	java
1395	Track uses of "TODO" tags	S1135	\N	squid	<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>	0	\N	READY	java	\N	\N	\N	\N	cwe	0	HTML	1576224558997	1576224558997	1	java
1396	Field names should comply with a naming convention	S00116	S116	squid	<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass MyClass {\n   private int my_field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private int myField;\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224559000	1576224559002	1	java
1397	Servlets should not have mutable instance fields	S2226	\N	squid	<p>By contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to\nprocess this request. So all threads are sharing the servlet instances and by extension instance fields. To prevent any misunderstanding and\nunexpected behavior at runtime, all servlet fields should then be either <code>static</code> and/or <code>final</code>, or simply removed.</p>\n<p>With Struts 1.X, the same constraint exists on <code>org.apache.struts.action.Action</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  private String userName;  //As this field is shared by all users, it's obvious that this piece of information should be managed differently\n  ...\n}\n</pre>\n<p>or </p>\n<pre>\npublic class MyAction extends Action {\n  private String userName;  //Same reason\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/EYBUC">CERT, MSC11-J.</a> - Do not let session information leak within a servlet </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	cert,multi-threading,struts	0	HTML	1576224559009	1576224559011	2	java
1398	Value-based classes should not be used for locking	S3436	\N	squid	<p>According to the documentation,</p>\n<blockquote>\n  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization...\n</blockquote>\n<p>This is because value-based classes are intended to be wrappers for value types, which will be primitive-like collections of data (similar to\n<code>struct</code>s in other languages) that will come in future versions of Java.</p>\n<blockquote>\n  <p> Instances of a value-based class ... </p>\n  <ul>\n    <li> do not have accessible constructors, but are instead instantiated through factory methods which make no committment as to the identity of\n    returned instances; </li>\n  </ul>\n</blockquote>\n<p>Which means that you can't be sure you're the only one trying to lock on any given instance of a value-based class, opening your code up to\ncontention and deadlock issues.</p>\n<p>Under Java 8 breaking this rule may not actually break your code, but there are no guarantees of the behavior beyond that.</p>\n<p>This rule raises an issue when a known value-based class is used for synchronization. That includes all the classes in the <code>java.time</code>\npackage except <code>Clock</code>; the date classes for alternate calendars, <code>HijrahDate</code>, <code>JapaneseDate</code>,\n<code>MinguoDate</code>, <code>ThaiBuddhistDate</code>; and the optional classes: <code>Optional</code>, <code>OptionalDouble</code>,\n<code>OptionalLong</code>, <code>OptionalInt</code>.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nOptional&lt;Foo&gt; fOpt = doSomething();\nsynchronized (fOpt) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html">Value-based classes</a> </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	java8,lock-in,multi-threading	0	HTML	1576224559014	1576224559060	2	java
1257	"runFinalizersOnExit" should not be called	S2151	\N	squid	<p>Running finalizers on JVM exit is disabled by default. It can be enabled with <code>System.runFinalizersOnExit</code> and\n<code>Runtime.runFinalizersOnExit</code>, but both methods are deprecated because they are are inherently unsafe. </p>\n<p>According to the Oracle Javadoc:</p>\n<blockquote>\n  <p>It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic\n  behavior or deadlock.</p>\n</blockquote>\n<p>If you really want to be execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String [] args) {\n  ...\n  System.runFinalizersOnExit(true);  // Noncompliant\n  ...\n}\n\nprotected void finalize(){\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String [] args) {\n  Runtime.addShutdownHook(new Runnable() {\n    public void run(){\n      doSomething();\n    }\n  });\n  //...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cert	0	HTML	1576224555158	1576224555160	2	java
1258	Static non-final field names should comply with a naming convention	S3008	\N	squid	<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that static non-final field names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic final class MyClass {\n   private static String foo_bar;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private static String fooBar;\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224555163	1576224555165	1	java
1259	Public types, methods and fields (API) should be documented with Javadoc	UndocumentedApi	S1176	squid	<p>Try to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way\nto understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>\n<p>On top of a main description for each member of a public API, the following Javadoc elements are required to be described:</p>\n<ul>\n  <li> Parameters, using <code>@param parameterName</code>. </li>\n  <li> Thrown exceptions, using <code>@throws exceptionName</code>. </li>\n  <li> Method return values, using <code>@return</code>. </li>\n  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>\n</ul>\n<p>Furthermore the following guidelines should be followed:</p>\n<ul>\n  <li> At least 1 line of description which should have more than one word. </li>\n  <li> All parameters documented with <code>@param</code>, and names should match. </li>\n  <li> All checked exceptions documented with <code>@throws</code> </li>\n  <li> <code>@return</code> present and documented when not <code>void</code>. </li>\n  <li> Placeholders like "TODO", "FIXME", "..." should be avoided. </li>\n</ul>\n<p>The following public methods and constructors are not taken into account by this rule:</p>\n<ul>\n  <li> Getters and setters. </li>\n  <li> Methods with <code>@Override</code> annotation. </li>\n  <li> Empty constructors. </li>\n  <li> Static constants. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  */\npublic class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing '@param &lt;T&gt;'\n\n  public static final DEFAULT_STATUS = 0;    // Compliant - static constant\n  private int status;                           // Compliant - not public\n\n  public String message;                  // Noncompliant\n\n  public MyClass() {                         // Noncompliant - missing documentation\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {  // Compliant - setter\n    this.status = status;\n  }\n\n  @Override\n  public void run() {                          // Compliant - has @Override annotation\n  }\n\n  protected void doSomething() {    // Compliant - not public\n  }\n\n  public void doSomething2(int value) {  // Noncompliant\n  }\n\n  public int doSomething3(int value) {  // Noncompliant\n    return value;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  * @param &lt;T&gt; the parameter of the class\n  */\npublic class MyClass&lt;T&gt; implements Runnable {\n\n  public static final DEFAULT_STATUS = 0;\n  private int status;\n\n  /**\n    * This is a Javadoc comment\n    */\n  public String message;\n\n  /**\n   * Class comment...\n   */\n  public MyClass() {\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n  @Override\n  public void run() {\n  }\n\n  protected void doSomething() {\n  }\n\n  /**\n    * Will do something.\n    * @param value the value to be used\n    */\n  public void doSomething(int value) {\n\n  /**\n    *  {@inheritDoc}\n    */\n  public int doSomething(int value) {\n    return value;\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	convention	0	HTML	1576224555173	1576224555217	1	java
1260	Overriding methods should do more than simply call the same method in the super class	S1185	\N	squid	<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	clumsy,redundant	0	HTML	1576224555272	1576224555274	1	java
1261	Printf-style format strings should not lead to unexpected behavior at runtime	S2275	\N	squid	<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors\nthat lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling\nthe <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,\n<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>\nor <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format("The value of my integer is %d", "Hello World");  // Noncompliant; an 'int' is expected rather than a String\nString.format("Duke's Birthday year is %tX", c);  //Noncompliant; X is not a supported time conversion character\nString.format("Display %0$d and then %d", 1);   //Noncompliant; arguments are numbered starting from 1\nString.format("Not enough arguments %d and %d", 1);  //Noncompliant; the second argument is missing\nString.format("%&lt; is equals to %d", 2);   //Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one\n\nMessageFormat.format("Result {1}.", value); // Noncompliant; Not enough arguments. (first element is {0})\nMessageFormat.format("Result {{0}.", value); // Noncompliant; Unbalanced number of curly brace (single curly braces should be escaped)\nMessageFormat.format("Result ' {0}", value); // Noncompliant; Unbalanced number of quotes (single quote must be escaped)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format("The value of my integer is %d", 3);\nString.format("Duke's Birthday year is %tY", c);\nString.format("Display %1$d and then %d", 1);\nString.format("Not enough arguments %d and %d", 1, 2);\nString.format("%d is equals to %&lt;", 2);\n\nMessageFormat.format("Result {0}.", value);\nMessageFormat.format("Result {0} &amp; {1}.", value, value);\nMessageFormat.format("Result {0}.", myObject);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/wQA1">CERT, FIO47-C.</a> - Use valid format strings </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/e4EyAQ">CERT, FIO00-CPP.</a> - Take care when creating format strings </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	cert,pitfall	0	HTML	1576224555278	1576224555326	2	java
1302	"indexOf" checks should not be for positive numbers	S2692	\N	squid	<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = "blue";\nString name = "ishmael";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf("ish") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf("ae") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = "blue";\nString name = "ishmael";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf("ish") &gt;= 0) {\n  // ...\n}\nif (name.contains("ae") {\n  // ...\n}\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	suspicious	0	HTML	1576224557006	1576224557006	1	java
1303	Types should be used in lambdas	S2211	\N	squid	<p>Shared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the\ncode clearer and easier to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.sort(rosterAsArray,\n    (a, b) -&gt; {  // Noncompliant\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.sort(rosterAsArray,\n    (Person a, Person b) -&gt; {\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	convention,java8	0	HTML	1576224557007	1576224557008	1	java
1304	"PreparedStatement" and "ResultSet" methods should be called with valid indices	S2695	\N	squid	<p>The parameters in a <code>PreparedStatement</code> are numbered from 1, not 0, so using any "set" method of a <code>PreparedStatement</code> with a\nnumber less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, <code>ResultSet</code> indices also start at 1,\nrather than 0</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement("SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?");\nps.setDate(0, date);  // Noncompliant\nps.setDouble(3, salary);  // Noncompliant\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(0);  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement("SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?");\nps.setDate(1, date);\nps.setDouble(2, salary);\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(1);\n  // ...\n}\n</pre>	4	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	sql	0	HTML	1576224557009	1576224557010	2	java
1354	Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression	S881	\N	squid	<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwE">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/fYAyAQ">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/yQC7AQ">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,misra	0	HTML	1576224557837	1576224557880	1	java
1399	Boolean expressions should not be gratuitous	S2589	\N	squid	<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; "a" is always "true"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; "!a" is always "false"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/489">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	cert,cwe,misra,redundant	0	HTML	1576224559104	1576224559147	1	java
1400	Constant names should comply with a naming convention	S00115	S115	squid	<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224559192	1576224559193	1	java
1401	"toString()" and "clone()" methods should not return null	S2225	\N	squid	<p>Calling <code>toString()</code> or <code>clone()</code> on an object should always return a string or an object. Returning <code>null</code>\ninstead contravenes the method's implicit contract.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return null; // Noncompliant\n  } else {\n    // ...\n {code}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return "";\n  } else {\n    // ...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,cwe	0	HTML	1576224559195	1576224559196	2	java
1402	Classes and enums with private members should have a constructor	S1258	\N	squid	<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize\nthose members, either in a constructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224559198	1576224559198	1	java
1262	Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting	S2154	\N	squid	<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224555371	1576224555373	2	java
1263	Methods should not be empty	S1186	\N	squid	<p>There are several reasons for a method not to have a method body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n}\n\npublic void doSomethingElse() {\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic void doSomething() {\n  // Do nothing because of X and Y.\n}\n\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Default (no-argument) constructors are ignored when there are other constructors in the class, as are empty methods in abstract classes.</p>\n<pre>\npublic abstract class Animal {\n  void speak() {  // default implementation ignored\n  }\n}\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224555377	1576224555380	1	java
1264	Unused labels should be removed	S1065	\N	squid	<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>\n<p>This will improve maintainability as developers will not wonder what this label is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() {\n  outer: //label is not used.\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() {\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 2.6 - A function should not contain unused label declarations </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	cert,misra,unused	0	HTML	1576224555383	1576224555386	1	java
1305	Deprecated "${pom}" properties should not be used	S3421	\N	squid	<p>Deprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect,\ndeprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated\nfeatures should be added, and all existing uses should be gradually removed.</p>\n<p>This rule raises an issue when <code>${pom.*}</code> properties are used in a pom.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${pom.artifactId}-${pom.version}&lt;/finalName&gt;  &lt;!-- Noncompliant --&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;/finalName&gt;\n</pre>\n<p>or</p>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${artifactId}-${version}&lt;/finalName&gt;\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	maven,obsolete	0	HTML	1576224557011	1576224557012	1	java
1306	Inner classes which do not reference their owning classes should be "static"	S2694	\N	squid	<p>A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods. That class reference makes the\ninner class larger and could cause the outer class instance to live in memory longer than necessary. </p>\n<p>If the reference to the outer class isn't used, it is more efficient to make the inner class <code>static</code> (also called nested). If the\nreference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will\nalso be necessary to name it. </p>\n<p>However, while a nested/<code>static</code> class would be more efficient, it's worth nothing that there are semantic differences between an inner\nclass and a nested one:</p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public static class Seed {\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	performance	0	HTML	1576224557013	1576224557055	1	java
1307	Artifact ids should follow a naming convention	S3420	\N	squid	<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a pom's <code>artifactId</code> does not match the\nprovided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>[a-z][a-z-0-9]+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;My_Project&lt;/artifactId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;my-project&lt;/artifactId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	convention,maven	0	HTML	1576224557100	1576224557101	1	java
1308	Floating point numbers should not be tested for equality	S1244	\N	squid	<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println("f is NaN");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality. </li>\n  <li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	misra	0	HTML	1576224557102	1576224557148	2	java
1355	Invalid "Date" values should not be used	S2110	\N	squid	<p>Whether the valid value ranges for <code>Date</code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month\nstarts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12\nfor month, and you'll get January of the following year.</p>\n<p>This rule checks for bad values used in conjunction with <code>java.util.Date</code>, <code>java.sql.Date</code>, and\n<code>java.util.Calendar</code>. Specifically, values outside of the valid ranges:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Field</th>\n      <th>Valid</th>\n    </tr>\n    <tr>\n      <td>month</td>\n      <td>0-11</td>\n    </tr>\n    <tr>\n      <td>date (day)</td>\n      <td>0-31</td>\n    </tr>\n    <tr>\n      <td>hour</td>\n      <td>0-23</td>\n    </tr>\n    <tr>\n      <td>minute</td>\n      <td>0-60</td>\n    </tr>\n    <tr>\n      <td>second</td>\n      <td>0-61</td>\n    </tr>\n  </tbody>\n</table>\n<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(12);  // Noncompliant; rolls d into the next year\n\nCalendar c = new GregorianCalendar(2014, 12, 25);  // Noncompliant\nif (c.get(Calendar.MONTH) == 12) {  // Noncompliant; invalid comparison\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(11);\n\nCalendar c = new Gregorian Calendar(2014, 11, 25);\nif (c.get(Calendar.MONTH) == 11) {\n  // ...\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224557927	1576224557972	2	java
1356	Methods should not have too many return statements	S1142	\N	squid	<p>Having too many return statements in a method increases the method's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic boolean myMethod() { // Noncompliant; there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	brain-overload	0	HTML	1576224558018	1576224558020	1	java
1357	Non-public methods should not be "@Transactional"	S2230	\N	squid	<p>Marking a non-public method <code>@Transactional</code> is both useless and misleading because Spring doesn't "see" non-<code>public</code>\nmethods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.</p>\n<p>Therefore marking a <code>private</code> method, for instance, <code>@Transactional</code> can only result in a runtime error or exception if the\nmethod is actually written to be <code>@Transactional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Transactional  // Noncompliant\nprivate void doTheThing(ArgClass arg) {\n  // ...\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	spring	0	HTML	1576224558028	1576224558031	2	java
1403	Getters and setters should access the expected fields	S4275	\N	typescript	<p>Getters and setters provide a way to enforce encapsulation by providing <code>public</code> methods that give controlled access to\n<code>private</code> fields. However in classes with multiple fields it is not unusual that cut and paste is used to quickly create the needed getters\nand setters, which can result in the wrong field being accessed by a getter or setter.</p>\n<p>This rule raises an issue in any of these cases:</p>\n<ul>\n  <li> A setter does not update the field with the corresponding name. </li>\n  <li> A getter does not access the field with the corresponding name. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  private _x: number = 0;\n  private y: number = 0;\n\n  public get x() {  // Noncompliant: field 'x' is not used in the return value\n    return this.y;\n  }\n\n  public setX(val: number) { // Noncompliant: field 'x' is not updated\n    if (val &gt;= 0 &amp;&amp; val &lt; 10) {\n      this.y = val;\n    }\n  }\n\n  public getY() { // Noncompliant: field 'y' is not used in the return value\n    return this.x;\n  }\n}{code}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private _x: number = 0;\n  private y: number = 0;\n\n  public get x() {\n    return this._x;\n  }\n\n  public setX(val: number) {\n    if (val &gt;= 0 &amp;&amp; val &lt; 10) {\n      this.x = val;\n    }\n  }\n\n  public getY() {\n    return this.y;\n  }\n}{code}\n</pre>	3	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224559202	1576224559251	2	typescript
1404	Array contents should be used	S4030	\N	typescript	<p>When a collection is populated but its contents are never used, then it is surely some kind of mistake. Either refactoring has rendered the\ncollection moot, or an access is missing.</p>\n<p>This rule raises an issue when no methods are called on a collection other than those that add or remove values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction getLength(a: string, b: string, c: string) {\n  const strings = [];  // Noncompliant\n  strings.push(a);\n  strings.push(b);\n  strings.push(c);\n\n  return a.length + b.length + c.length;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction getLength(a: string, b: string, c: string) {\n  return a.length + b.length + c.length;\n}\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	2min	\N	suspicious,unused	0	HTML	1576224559300	1576224559301	1	typescript
1405	Code should not be dynamically injected and executed	S1523	\N	typescript	<p>The <code>eval</code> function is a way to run arbitrary code at run-time. Generally it is considered to be very dangerous because it allows\nexecution of arbitrary code. Its use is thus discouraged. If you have carefully verified that there is no other option than to use this construct, pay\nspecial attention not to pass any user-provided data into it without properly validating it beforehand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\neval(code_to_be_dynamically_executed)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/95.html">MITRE CWE-95</a> - CWE-95: Improper Neutralization of Directives in Dynamically\n  Evaluated Code ('Eval Injection') </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting\n  (XSS) </li>\n</ul>	3	\N	READY	ts	CONSTANT_ISSUE	\N	30min	\N	cwe,owasp-a3	0	HTML	1576224559302	1576224559303	3	typescript
1265	"Object.wait(...)" and "Condition.await(...)" should be called inside a "while" loop	S2274	\N	squid	<p>According to the documentation of the Java <code>Condition</code> interface:</p>\n<blockquote>\n  <p>When waiting upon a <code>Condition</code>, a "spurious wakeup" is permitted to occur, in general, as a concession to the underlying platform\n  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state\n  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications\n  programmers always assume that they can occur and so always wait in a loop.</p>\n</blockquote>\n<p>The same advice is also found for the <code>Object.wait(...)</code> method:</p>\n<blockquote>\n  <p>waits should always occur in loops, like this one:</p>\n  <pre>\nsynchronized (obj) {\n  while (&lt;condition does not hold&gt;){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nsynchronized (obj) {\n  if (!suitableCondition()){\n    obj.wait(timeout);   //the thread can wake up even if the condition is still false\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nsynchronized (obj) {\n  while (!suitableCondition()){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/9QIhAQ">CERT THI03-J.</a> - Always invoke wait() and await() methods inside a loop\n  </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cert,multi-threading	0	HTML	1576224555390	1576224555433	1	java
1266	Boxing and unboxing should not be immediately reversed	S2153	\N	squid	<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = (int) d;\n\n  examineInt(i);\n\n  examineInteger(i);\n  examineInteger(iger1);\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224555478	1576224555524	2	java
1309	pom elements should be in the recommended order	S3423	\N	squid	<p>The POM Code Convention is the Maven project's internal recommendation for POM element ordering. It calls for listing modifiers in the following\norder:</p>\n<ol>\n  <li> &lt;modelVersion/&gt; </li>\n  <li> &lt;parent/&gt; </li>\n  <li> &lt;groupId/&gt; </li>\n  <li> &lt;artifactId/&gt; </li>\n  <li> &lt;version/&gt; </li>\n  <li> &lt;packaging/&gt; </li>\n  <li> &lt;name/&gt; </li>\n  <li> &lt;description/&gt; </li>\n  <li> &lt;url/&gt; </li>\n  <li> &lt;inceptionYear/&gt; </li>\n  <li> &lt;organization/&gt; </li>\n  <li> &lt;licenses/&gt; </li>\n  <li> &lt;developers/&gt; </li>\n  <li> &lt;contributors/&gt; </li>\n  <li> &lt;mailingLists/&gt; </li>\n  <li> &lt;prerequisites/&gt; </li>\n  <li> &lt;modules/&gt; </li>\n  <li> &lt;scm/&gt; </li>\n  <li> &lt;issueManagement/&gt; </li>\n  <li> &lt;ciManagement/&gt; </li>\n  <li> &lt;distributionManagement/&gt; </li>\n  <li> &lt;properties/&gt; </li>\n  <li> &lt;dependencyManagement/&gt; </li>\n  <li> &lt;dependencies/&gt; </li>\n  <li> &lt;repositories/&gt; </li>\n  <li> &lt;pluginRepositories/&gt; </li>\n  <li> &lt;build/&gt; </li>\n  <li> &lt;reporting/&gt; </li>\n  <li> &lt;profiles/&gt; </li>\n</ol>\n<p>Not following this convention has no technical impact, but will reduce the pom's readability because most developers are used to the standard\norder.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://maven.apache.org/developers/conventions/code.html#POM_Code_Convention">POM Code Convention</a> </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	convention,maven	0	HTML	1576224557195	1576224557241	1	java
1310	Redundant modifiers should not be used	S2333	\N	squid	<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically\n<code>public static final</code>. There is no need to explicitly declare them so.</p>\n<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>\n<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class, and <code>private</code> is redundant on the\nconstructor of an <code>Enum</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Vehicle {\n\n  public void go(int speed, Direction direction);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Vehicle {\n\n  void go(int speed, Direction direction);\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	clumsy,finding	0	HTML	1576224557288	1576224557289	1	java
1311	Instance methods should not write to "static" fields	S2696	\N	squid	<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code>\nmethods.</p>\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	multi-threading	0	HTML	1576224557290	1576224557290	1	java
1358	Jump statements should not occur in "finally" blocks	S1143	\N	squid	<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and so on from a <code>finally</code> block suppresses the propagation of any\nunhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and\n<code>goto</code>) would force control flow to leave a <code>finally</code> block. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println("OK");   // incorrect "OK" message is printed\n  } catch (RuntimeException e) {\n    System.out.println("ERROR");  // this message is not shown\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n    return;      // Noncompliant - prevents the RuntimeException from being propagated\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println("OK");\n  } catch (RuntimeException e) {\n    System.out.println("ERROR");  // "ERROR" is printed as expected\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/584.html">MITRE, CWE-584</a> - Return Inside Finally Block </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/mIEbAQ">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	cert,cwe,error-handling	0	HTML	1576224558036	1576224558080	2	java
1359	"URL.hashCode" and "URL.equals" should be avoided	S2112	\N	squid	<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both may trigger a name service (usually DNS) lookup to\nresolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. <code>URI</code> on the other hand\nmakes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>\n<p>In general it is better to use the <code>URI</code> class until access to the resource is actually needed, at which point you can just convert the\n<code>URI</code> to a <code>URL</code> using <code>URI.toURL()</code>.</p>\n<p>This rule checks for uses of <code>URL</code> 's in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and\n<code>hashCode</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();  // Noncompliant\n\n  URL homepage = new URL("http://sonarsource.com");  // Compliant\n  if (homepage.equals(url)) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant\n\n  URI homepage = new URI("http://sonarsource.com");  // Compliant\n  URI uri = url.toURI();\n  if (homepage.equals(uri)) {  // Compliant\n    // ...\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	performance	0	HTML	1576224558125	1576224558168	1	java
1406	Variables should be declared with "let" or "const"	S3504	\N	typescript	<p>The distinction between the variable types created by <code>var</code> and by <code>let</code> is significant, and a switch to <code>let</code>\nwill help alleviate many of the variable scope issues which have caused confusion in the past. </p>\n<p>This rule raises an issue when <code>var</code> is used instead of <code>const</code> or <code>let</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar color = "blue";\nvar size = 4;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst color = "blue";\nlet size = 4;\n</pre>	3	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	bad-practice,es2015	0	HTML	1576224559304	1576224559305	1	typescript
1407	Variables should not be shadowed	S1524	\N	typescript	<p>Overriding a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of code.\nFurther, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n  let x = bar(1);\n  if (x &gt; 0) {\n      let x = bar(2); // Noncompliant\n      console.log(x);\n  } else {\n     console.log("Wrong Value");\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n  let x = bar(1);\n  if (x &gt; 0) {\n      let y = bar(2);\n      console.log(y);\n  } else {\n     console.log("Wrong Value");\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 5.2 - Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that\n  identifier </li>\n  <li> MISRA C++:2008, 2-10-2 - Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope </li>\n  <li> MISRA C:2012, 5.3 - An identifier declared in an inner scope shall not hide an identifier declared in an outer scope </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/VwE">CERT, DCL01-C.</a> - Do not reuse variable names in subscopes </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/cwAhAQ">CERT, DCL01-CPP.</a> - Do not reuse variable names in subscopes </li>\n</ul>	3	\N	READY	ts	CONSTANT_ISSUE	\N	10min	\N	cert,misra,suspicious	0	HTML	1576224559306	1576224559349	1	typescript
1408	Debugger statements should not be used	S1525	\N	typescript	<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint\nin the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to\nattacks in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write("loop index is " + i);\n  // Wait for user to resume.\n  debugger;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write("loop index is " + i);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>\n</ul>	1	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	cwe,user-experience	0	HTML	1576224559394	1576224559396	3	typescript
1267	Method parameters should be declared with base types	S3242	\N	squid	<p>For maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class\nare required by a method, a type higher up the class hierarchy should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void printSize(ArrayList&lt;Object&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(List&lt;Object&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void printSize(Collection&lt;?&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(Iterable&lt;?&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Parameters in non-public methods are not checked, because such methods are not intended to be generally reusable. <code>java.lang.String</code>\nparameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context\nthan method invocation or enhanced for loop are also excluded.</p>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	api-design	0	HTML	1576224555570	1576224555612	1	java
1268	Collapsible "if" statements should be merged	S1066	\N	squid	<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224555658	1576224555661	1	java
1269	Cryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)	S2277	\N	squid	<p>Without OAEP in RSA encryption, it takes less work for an attacker to decrypt the data or infer patterns from the ciphertext. This rule logs an\nissue as soon as a literal value starts with <code>RSA/NONE</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance("RSA/NONE/NoPadding");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance("RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/780.html">MITRE CWE-780</a> - Use of RSA Algorithm without OAEP </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE CWE-327</a>: Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration">OWASP Top Ten 2013 Category A5</a> - Security\n  Misconfiguration </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#RSA_NO_PADDING">RSA NoPadding Unsafe</a> </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cwe,owasp-a5,owasp-a6,sans-top25-porous	0	HTML	1576224555664	1576224555709	3	java
1312	Dependencies should not have "system" scope	S3422	\N	squid	<p><code>system</code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact\nin an environment that's not configured just like yours is, your code won't work. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;dependency&gt;\n  &lt;groupId&gt;javax.sql&lt;/groupId&gt;\n  &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;\n  &lt;version&gt;2.0&lt;/version&gt;\n  &lt;scope&gt;system&lt;/scope&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;systemPath&gt;/usr/bin/lib/rt.jar&lt;/systemPath&gt;  &lt;!-- remove this --&gt;\n&lt;/dependency&gt;\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	lock-in,maven	0	HTML	1576224557291	1576224557292	2	java
1313	Boolean literals should not be redundant	S1125	\N	squid	<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224557292	1576224557293	1	java
1314	Local variables should not be declared and then immediately returned or thrown	S1488	\N	squid	<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	clumsy	0	HTML	1576224557294	1576224557295	1	java
1315	Custom resources should be closed	S3546	\N	squid	<p>Leaking resources in an application is never a good idea, as it can lead to memory issues, and even the crash of the application. This rule\ntemplate allows you to specify which constructions open a resource and how it is closed in order to raise issue within a method scope when custom\nresources are leaked.</p>\n<h2>See also</h2>\n<ul>\n  <li> {rule:squid:S2095} - Resources should be closed </li>\n</ul>	4	\N	READY	java	\N	\N	\N	\N	denial-of-service	1	HTML	1576224557296	1576224557296	2	java
1360	A "while" loop should be used instead of a "for" loop	S1264	\N	squid	<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a\n<code>while</code> loop should be used instead to increase readability. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224558213	1576224558214	1	java
1361	Nested blocks of code should not be left empty	S00108	S108	squid	<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>\nblocks are still considered empty even with comments because they can still affect program flow.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224558216	1576224558217	1	java
1362	"ResultSet.isLast()" should not be used	S2232	\N	squid	<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code>\nresult sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear\non what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstmt.executeQuery("SELECT name, address FROM PERSON");\nResultSet rs = stmt.getResultSet();\nwhile (! rs.isLast()) { // Noncompliant\n  // process row\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nResultSet rs = stmt.executeQuery("SELECT name, address FROM PERSON");\nwhile (! rs.next()) {\n  // process row\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	performance,pitfall,sql	0	HTML	1576224558219	1576224558220	1	java
1409	Variables should be declared before they are used	S1526	\N	typescript	<p>Variables declared with <code>var</code> have the special property that regardless of where they're declared in a function they "float" to the top\nof the function and are available for use even before they're declared. That makes scoping confusing, especially for new coders. To keep confusion to\na minimum, <code>var</code> declarations should happen before the variables they declare are used for the first time.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 1;\n\nfunction fun(){\n  alert(x); // Noncompliant as x is declared later in the same scope\n  if(something) {\n    var x = 42; // Declaration in function scope (not block scope!) shadows global variable\n  }\n}\n\nfun(); // Unexpectedly alerts "undefined" instead of "1"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = 1;\n\nfunction fun() {\n  print(x);\n  if (something) {\n    x = 42;\n  }\n}\n\nfun(); // Print "1"\n</pre>	4	\N	READY	ts	CONSTANT_ISSUE	\N	10min	\N	pitfall	0	HTML	1576224559400	1576224559402	1	typescript
1410	Variables should not be redeclared	S2814	\N	typescript	<p>This rule checks that a declaration doesn't use a name that is already in use. Indeed, it is possible to use the same symbol multiple times as\neither a variable or a function, but doing so is likely to confuse maintainers. Further it's possible that such reassignments are made in error, with\nthe developer not realizing that the value of the variable is overwritten by the new assignment.</p>\n<p>This rule also applies to function parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction myFunc(arg) {\n  var a = "Ayyyyye";\n  var arg = "event"; // Noncompliant, argument value is lost\n  var a = "Howdy";  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar a = 'foo';\nfunction otherName() {}\nconsole.log(a);\n\nfunction myFunc(arg) {\n  var newName = "event";\n}\n\nfun(); // prints "foo"\n\nfunction fun() {\n  print("foo");\n}\n\nfun(); // prints "foo"\n\nfunction printBar() {\n  print("bar");\n}\n\nprintBar(); // prints "bar"\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	20min	\N	confusing	0	HTML	1576224559406	1576224559422	1	typescript
1411	Default type parameters should be omitted	S4157	\N	typescript	<p>There's no reason to repeat a default type unless it is early in a list and other, non-default types come after it. Instead, leave it out and only\nsupply type when it is something other than the default.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo&lt;N = number, S = string&gt;() {}\nfoo&lt;number, string&gt;();  // Noncompliant; both types redundant\nfoo&lt;string, string&gt;();  // Noncompliant; 2nd string is redundant\nfoo&lt;number, number&gt;();  // Ignored; number is redundant but required\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo&lt;N = number, S = string&gt;() {}\nfoo();\nfoo&lt;string&gt;();\nfoo&lt;number, number&gt;();\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	2min	\N	clumsy	0	HTML	1576224559425	1576224559426	1	typescript
1412	Class and interface names should comply with a naming convention	S101	\N	typescript	<p>Shared coding conventions allow teams to collaborate effectively. This rule raises an issue when class or interface names are not in\n<em>PascalCase</em> (i.e. camel case with an initial capital letter).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224559428	1576224559429	1	typescript
1270	"final" classes should not have "protected" members	S2156	\N	squid	<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>\nmembers, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a\n<code>final</code> class <code>protected</code> is confusingly pointless.</p>\n<p>Note that the <code>protected</code> members of a class can also be seen and used by other classes that are placed within the same package, this\ncould lead to accidental, unintended access to otherwise private members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic final class MyFinalClass {\n\n  protected String name = "Fred";  // Noncompliant\n  protected void setName(String name) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class MyFinalClass {\n\n  private String name = "Fred";\n  public void setName(String name) {\n    // ...\n  }\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\nto make the code testable.</p>\n<pre>\npublic final class MyFinalClass {\n  @VisibleForTesting\n  protected Logger logger; // Compliant\n\n  @VisibleForTesting\n  protected int calculateSomethingComplex(String input) { // Compliant\n    // ...\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	confusing	0	HTML	1576224555754	1576224555801	1	java
1271	Expressions should not be too complex	S1067	\N	squid	<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>	3	\N	READY	java	LINEAR_OFFSET	1min	5min	per complexity point above the threshold	brain-overload	0	HTML	1576224555847	1576224555849	1	java
1272	Lambdas and anonymous classes should not have too many lines of code	S1188	\N	squid	<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class.\nBut those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the\nsource code can quickly become unreadable.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	java8	0	HTML	1576224555856	1576224555858	1	java
1316	Tests should include assertions	S2699	\N	squid	<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the\ncode under test.</p>\n<p>This rule raises an exception when no assertions from any of the following frameworks are found in a test:</p>\n<ul>\n  <li> Junit </li>\n  <li> Fest 1.x </li>\n  <li> Fest 2.x </li>\n  <li> Rest-assured 2.0 </li>\n  <li> AssertJ </li>\n  <li> Hamcrest </li>\n  <li> Spring's <code>org.springframework.test.web.servlet.ResultActions.andExpect()</code> </li>\n  <li> Truth Framework </li>\n  <li> Mockito </li>\n  <li> EasyMock </li>\n  <li> JMock </li>\n  <li> WireMock </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoSomething() {  // Noncompliant\n  MyClass myClass = new MyClass();\n  myClass.doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoSomething() {\n  MyClass myClass = new MyClass();\n  assertNull(myClass.doSomething());  // JUnit assertion\n  assertThat(myClass.doSomething()).isNull();  // Fest assertion\n}\n</pre>	4	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	tests	0	HTML	1576224557301	1576224557302	1	java
1317	Return of boolean expressions should not be wrapped into an "if-then-else" statement	S1126	\N	squid	<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	clumsy	0	HTML	1576224557304	1576224557304	1	java
1318	JUnit assertions should include messages	S2698	\N	squid	<p>Adding messages to JUnit assertions is an investment in your future productivity. Spend a few seconds writing them now, and you'll save a lot of\ntime on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the tests and the\nassertion messages work as a sort of documentation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertEquals(4, list.size());  // Noncompliant\n\ntry {\n  fail();  // Noncompliant\n} catch (Exception e) {\n  assertThat(list.get(0)).isEqualTo("pear");  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertEquals("There should have been 4 Fruits in the list", 4, list.size());\n\ntry {\n  fail("And exception is expected here");\n} catch (Exception e) {\n  assertThat(list.get(0)).as("check first element").overridingErrorMessage("The first element should be a pear, not a %s", list.get(0)).isEqualTo("pear");\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	tests	0	HTML	1576224557305	1576224557306	1	java
1319	Redundant pairs of parentheses should be removed	UselessParenthesesCheck	S1110	squid	<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	1min	\N	confusing	0	HTML	1576224557306	1576224557307	1	java
1363	"BigDecimal(double)" should not be used	S2111	\N	squid	<p>Because of floating point imprecision, you're unlikely to get the value you expect from the <code>BigDecimal(double)</code> constructor. </p>\n<p>From <a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)">the JavaDocs</a>:</p>\n<blockquote>\n  The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which\n  is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to\n  0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a\n  binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances\n  notwithstanding.\n</blockquote>\n<p>Instead, you should use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors, or the\nconstructor that takes a <code>String</code> argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above\nBigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d);\nBigDecimal bd2 = new BigDecimal("1.1"); // using String constructor will result in precise value\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NQAVAg">CERT, NUM10-J.</a> - Do not construct BigDecimal objects from floating-point\n  literals </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert	0	HTML	1576224558221	1576224558264	2	java
1364	Lines should not be too long	S00103	S103	squid	<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224558308	1576224558309	1	java
1413	"===" and "!==" should be used instead of "==" and "!="	S1440	\N	typescript	<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For\nexample, it evaluates <code>' \\t\\r\\n' == 0</code> as <code>true</code>.</p>\n<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (var == 'howdy') {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (var === 'howdy') {...}\n</pre>\n<h2>Exceptions</h2>\n<p>Even if testing the equality of a variable against <code>null</code> doesn't do exactly what most TypeScript developers believe, the use of\n<code>==</code> or <code>!=</code> is tolerated in such contexts. As shown below, if <code>foo</code> hasn't been initialized, its default value is\nnot <code>null</code> but <code>undefined</code>. Nevertheless <code>undefined == null</code>, so TypeScript developers get the expected behavior.</p>\n<pre>\nif (foo == null) {...}  // ignored\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224559430	1576224559431	1	typescript
1414	Collection sizes and array length comparisons should make sense	S3981	\N	typescript	<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or\nequal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return\n<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (someSet.size &gt;= 0) {...} // Noncompliant\n\nif (someMap.size &lt; 0) {...} // Noncompliant\n\nconst result = someArray.length &gt;= 0;  // Noncompliant\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224559432	1576224559433	2	typescript
1415	"module" should not be used	S4156	\N	typescript	<p>Each file is considered an "external" module. The use of the <code>module</code> keyword creates an internal module, and was used before the\nECMAScript 2015 addition of <code>namespace</code>s for the same purpose. Now that <code>namespace</code> is available, the use of <code>module</code>\nis deprecated because it does the same thing, and its use could confuse maintainers unaware of the history of the language.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmodule myMod {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnamespace myMod {\n  // ...\n}\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	obsolete	0	HTML	1576224559434	1576224559435	1	typescript
1416	Quotes for string literals should be used consistently	S1441	\N	typescript	<p>Shared code conventions allow teams to collaborate efficiently. This rule checks that all non-JSX string literals use the same kind of quotes, and\nrequires double quotes in JSX code, regardless of the parameter value.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Using the parameter default (forcing single quotes):</p>\n<pre>\nlet message = "Hello, World!"; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet message = 'Hello, World!';\n</pre>\n<h2>Exceptions</h2>\n<p>Strings that contain quotes are ignored.</p>\n<pre>\nlet heSaid = "Then he said 'What?'."  // ignored\nlet sheSaid = '"Whatever!" she replied.'  // ignored\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224559436	1576224559437	1	typescript
1273	"wait(...)" should be used instead of "Thread.sleep(...)" when a lock is held	S2276	\N	squid	<p>If <code>Thread.sleep(...)</code> is called when the current thread holds a lock, it could lead to performance and scalability issues, or even\nworse to deadlocks because the execution of the thread holding the lock is frozen. It's better to call <code>wait(...)</code> on the monitor object to\ntemporarily release the lock and allow other threads to run.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      Thread.sleep(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      monitor.wait(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/FgG7AQ">CERT, LCK09-J.</a> - Do not perform operations that can block while holding a\n  lock </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,multi-threading,performance	0	HTML	1576224555866	1576224555868	2	java
1274	Unused "private" fields should be removed	S1068	\N	squid	<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,unused	0	HTML	1576224555872	1576224555917	1	java
1320	Unused "private" methods should be removed	UnusedPrivateMethod	S1144	squid	<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> methods that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n  private void unusedPrivateMethod(){...}\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated methods.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/OYIyAQ">CERT, MSC07-CPP.</a> - Detect and remove dead code </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,unused	0	HTML	1576224557308	1576224557352	1	java
1321	Useless imports should be removed	UselessImportCheck	S1128	squid	<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	unused	0	HTML	1576224557401	1576224557402	1	java
1322	"switch" statements should not have too many "case" clauses	S1479	\N	squid	<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	brain-overload	0	HTML	1576224557404	1576224557405	1	java
1219	Exceptions should not be thrown in finally blocks	S1163	\N	squid	<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code>\nblock, and the masked's exception message and stack trace will be lost.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n  throw new RuntimeException();       // Noncompliant; masks the IllegalArgumentException\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/soUbAQ">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block\n  </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	cert,error-handling,suspicious	0	HTML	1576224554332	1576224554333	1	java
1220	Track uses of disallowed methods	S2253	\N	squid	<p>This rule allows banning certain methods.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n  <li> methodName: replace </li>\n  <li> argumentTypes: java.lang.CharSequence, java.lang.CharSequence </li>\n</ul>\n<pre>\nString name;\nname.replace("A","a");  // Noncompliant\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	1	HTML	1576224554335	1576224554335	1	java
1221	Loop conditions should be true at least once	S2252	\N	squid	<p>If a <code>for</code> loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always\nbugs, particularly when the initial value and stop conditions are hard-coded.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 10; i &lt; 10; i++) {  // Noncompliant\n  // ...\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224554341	1576224554342	2	java
1222	Primitives should not be boxed just for "String" conversion	S2131	\N	squid	<p>"Boxing" is the process of putting a primitive value into a primitive-wrapper object. When that's done purely to use the wrapper class'\n<code>toString</code> method, it's a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a\nclass instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code>\nargument should be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myInt = 4;\nString myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp; discards an Integer object\nmyIntString = Integer.valueOf(myInt).toString(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myInt = 4;\nString myIntString = Integer.toString(myInt);\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	performance	0	HTML	1576224554344	1576224554346	1	java
1063	"Object.wait(...)" should never be called on objects that implement "java.util.concurrent.locks.Condition"	S1844	\N	squid	<p>From the Java API documentation:</p>\n<blockquote>\n  <p><code>Condition</code> factors out the <code>Object</code> monitor methods (<code>wait</code>, <code>notify</code> and <code>notifyAll</code>)\n  into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations.\n  Where a <code>Lock</code> replaces the use of <code>synchronized</code> methods and statements, a <code>Condition</code> replaces the use of the\n  <code>Object</code> monitor methods.</p>\n</blockquote>\n<p>The purpose of implementing the <code>Condition</code> interface is to gain access to its more nuanced <code>await</code> methods. Therefore,\ncalling the method <code>Object.wait(...)</code> on a class implementing the <code>Condition</code> interface is silly and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.wait();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.await();\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	suspicious	0	HTML	1576224550452	1576224550496	1	java
1064	Methods and field names should not be the same or differ only by capitalization	S1845	\N	squid	<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is\nconfusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field\nwith exactly the same name and visibility.</p>\n<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead\nadded a new method with nearly the same name.</p>\n<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the\ncase where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be\ndisruptive to callers. Therefore renaming the member is the recommended action.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Car{\n\n  public DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // Noncompliant; duplicates field name\n}\n\npublic class MyCar extends Car{\n  public void teardown(){...}  // Noncompliant; not an override. It it really what's intended?\n\n  public void drivefast(){...}\n\n  public void driveFast(){...} //Huh?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Car{\n\n  private DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // field visibility reduced\n}\n\npublic class MyCar extends Car{\n  @Override\n  public void tearDown(){...}\n\n  public void drivefast(){...}\n\n  public void driveReallyFast(){...}\n\n}\n</pre>	4	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	confusing	0	HTML	1576224550542	1576224550584	1	java
1119	"public static" fields should be constant	S1444	\N	squid	<p>There is no good reason to declare a field "public" and "static" without also declaring it "final". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/500.html">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/QQBqAQ">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cert,cwe	0	HTML	1576224552061	1576224552061	3	java
1120	Week Year ("YYYY") should not be used for date formatting	S3986	\N	squid	<p>Few developers are aware of the difference between <code>Y</code> for "Week year" and <code>y</code> for Year when formatting and parsing a date\nwith <code>SimpleDateFormat</code>. That's likely because for most dates, Week year and Year are the same, so testing at any time other than the first\nor last week of the year will yield the same value for both <code>y</code> and <code>Y</code>. But in the last week of December and the first week of\nJanuary, you may get unexpected results.</p>\n<p>According to the <a href="http://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html#week_year">Javadoc</a>:</p>\n<blockquote>\n  <p>A week year is in sync with a WEEK_OF_YEAR cycle. All weeks between the first and last weeks (inclusive) have the same week year value.\n  Therefore, the first and last days of a week year may have different calendar year values.</p>\n  <p>For example, January 1, 1998 is a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (ISO 8601 standard compatible\n  setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is 1998 for the last three days of calendar\n  year 1997. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three\n  days of 1998 then are part of week 53 of 1997 and their week year is 1997.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate date = new SimpleDateFormat("yyyy/MM/dd").parse("2015/12/31");\nString result = new SimpleDateFormat("YYYY/MM/dd").format(date);   //Noncompliant; yields '2016/12/31'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDate date = new SimpleDateFormat("yyyy/MM/dd").parse("2015/12/31");\nString result = new SimpleDateFormat("yyyy/MM/dd").format(date);   //Yields '2015/12/31' as expected\n</pre>\n<h2>Exceptions</h2>\n<pre>\nDate date = new SimpleDateFormat("yyyy/MM/dd").parse("2015/12/31");\nString result = new SimpleDateFormat("YYYY-ww").format(date);  //compliant, 'Week year' is used along with 'Week of year'. result = '2016-01'\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	suspicious	0	HTML	1576224552063	1576224552107	2	java
1121	Unused "private" classes should be removed	S3985	\N	squid	<p><code>private</code> classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  ...\n  private class MyUnusedPrivateClass {...} // Noncompliant\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	unused	0	HTML	1576224552152	1576224552154	1	java
1122	Inheritance tree of classes should not be too deep	MaximumInheritanceDepth	S110	squid	<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by\ncreating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating\na deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object\noriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</p>\n<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed. </p>	2	\N	READY	java	LINEAR_OFFSET	30min	4h	Number of parents above the defined threshold	design	0	HTML	1576224552156	1576224552157	1	java
1123	Octal values should not be used	S1314	\N	squid	<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myNumber = 8;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>\n  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than "\\0") shall not be used </li>\n  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/_QC7AQ">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a\n  decimal value </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/hYClBg">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,misra,pitfall	0	HTML	1576224552161	1576224552162	1	java
1170	"==" and "!=" should not be used when "equals" is overridden	S1698	\N	squid	<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>\nmethod inherited from <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>\n<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots\nsuspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString firstName = getFirstName();   //String is a good example of a class overriding the equals method\nString lastName = getLastName();\n\nif (firstName == lastName) { ... };   // Non-compliant, the two literals can have the same value and yet the condition is false\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h2>Exceptions</h2>\n<p>Comparing two instances of the <code>Class</code> object will not raise an issue.</p>\n<pre>\nClass c;\nif(c == Integer.class) { //No issue raised\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/595.html">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/597.html">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/wwD1AQ">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of\n  boxed primitives </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/8AEqAQ">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference\n  equality </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	cert,cwe,suspicious	0	HTML	1576224553072	1576224553116	1	java
1171	Nested "enum"s should not be declared static	S2786	\N	squid	<p>According to <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9">the docs</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	clumsy	0	HTML	1576224553163	1576224553165	1	java
1172	Files should not be empty	EmptyFile	S2309	squid	<p>Files with no lines of code clutter a project and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n//package org.foo;\n//\n//public class Bar {}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	unused	0	HTML	1576224553169	1576224553171	1	java
1223	Exception classes should be immutable	S1165	\N	squid	<p>Exceptions are meant to represent the application's state at the point at which an error occurred.</p>\n<p>Making all fields in an <code>Exception</code> class <code>final</code> ensures that this state:</p>\n<ul>\n  <li> Will be fully defined at the same time the <code>Exception</code> is instantiated. </li>\n  <li> Won't be updated or corrupted by a questionable error handler. </li>\n</ul>\n<p>This will enable developers to quickly understand what went wrong.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private int status;                               // Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private final int status;\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	error-handling	0	HTML	1576224554348	1576224554349	1	java
1224	Classes extending java.lang.Thread should override the "run" method	S2134	\N	squid	<p>According to the Java API documentation:</p>\n<blockquote>\n  <p>There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the\n  run method of class Thread. An instance of the subclass can then be allocated and started...</p>\n  <p>The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An\n  instance of the class can then be allocated, passed as an argument when creating Thread, and started.</p>\n</blockquote>\n<p>By definition, extending the Thread class without overriding the <code>run</code> method doesn't make sense, and implies that the contract of the\n<code>Thread</code> class is not well understood.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyRunner extends Thread { // Noncompliant; run method not overridden\n\n  public void doSometing() {...}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If <code>run()</code> is not overridden in a class extending <code>Thread</code>, it means that starting the thread will actually call\n<code>Thread.run()</code>. However, <code>Thread.run()</code> does nothing if it has not been fed with a target <code>Runnable</code>. The rule\nconsequently ignore classes extending <code>Thread</code> if they are calling, in their constructors, the <code>super(...)</code> constructor with a\nproper <code>Runnable</code> target.</p>\n<pre>\nclass MyThread extends Thread { // Compliant - calling super constructor with a Runnable\n  MyThread(Runnable target) {\n    super(target); // calling super constructor with a Runnable, which will be used for when Thread.run() is executed\n    // ...\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	multi-threading,pitfall	0	HTML	1576224554350	1576224554396	2	java
1065	Anonymous inner classes containing only one method should become lambdas	S1604	\N	squid	<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	java8	0	HTML	1576224550630	1576224550632	1	java
1066	"Iterator.hasNext()" should not call "Iterator.next()"	S1849	\N	squid	<p>Calling <code>Iterator.hasNext()</code> is not supposed to have any side effects, and therefore should not change the state of the iterator.\n<code>Iterator.next()</code> advances the iterator by one item. So calling it inside <code>Iterator.hasNext()</code>, breaks the\n<code>hasNext()</code> contract, and will lead to unexpected behavior in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FibonacciIterator implements Iterator&lt;Integer&gt;{\n...\n@Override\npublic boolean hasNext() {\n  if(next() != null) {\n    return true;\n  }\n  return false;\n}\n...\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	\N	0	HTML	1576224550635	1576224550637	2	java
1067	Tests should not be ignored	S1607	\N	squid	<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.</p>\n<p>This rule raises an issue for each ignored test that does not have a notation about why it is being skipped.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Ignore  // Noncompliant\n@Test\npublic void testDoTheThing() {\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoTheThing() {\n  // ...\n</pre>\n<h2>Exceptions</h2>\n<p>The rule doesn't raise an issue if there is a comment in the @Ignore annotation</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	suspicious,tests	0	HTML	1576224550640	1576224550642	1	java
1068	Switch cases should end with an unconditional "break" statement	S128	\N	squid	<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 4:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/YIFLAQ">CERT, MSC17-C.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZoFLAQ">CERT, MSC18-CPP.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/ewHAAQ">CERT, MSC52-J.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	cert,cwe,misra,suspicious	0	HTML	1576224550646	1576224550689	1	java
1069	Methods should not be too complex	MethodCyclomaticComplexity	S1541	squid	<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>	3	\N	READY	java	LINEAR_OFFSET	1min	10min	per complexity point above the threshold	brain-overload	0	HTML	1576224550734	1576224550738	1	java
1124	Track uses of "CHECKSTYLE:OFF" suppression comments	S1315	\N	squid	<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// CHECKSTYLE:OFF\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	bad-practice	0	HTML	1576224552164	1576224552165	1	java
1125	"StringBuilder" and "StringBuffer" should not be instantiated with a character	S1317	\N	squid	<p>Instantiating a <code>StringBuilder</code> or a <code>StringBuffer</code> with a character is misleading because most Java developers would expect\nthe character to be the initial value of the <code>StringBuffer</code>. </p>\n<p>What actually happens is that the int representation of the character is used to determine the initial size of the <code>StringBuffer</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStringBuffer foo = new StringBuffer('x');   //equivalent to StringBuffer foo = new StringBuffer(120);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuffer foo = new StringBuffer("x");\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224552166	1576224552167	2	java
1126	Declarations should use Java collection interfaces such as "List" rather than specific implementation classes such as "LinkedList"	S1319	\N	squid	<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n  <li> is returned from a <code>public</code> method. </li>\n  <li> is accepted as an argument to a <code>public</code> method. </li>\n  <li> is exposed as a <code>public</code> member. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - "employees" should have type "Set" rather than "HashSet"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	bad-practice	0	HTML	1576224552169	1576224552213	1	java
1127	Track uses of "NOPMD" suppression comments	S1310	\N	squid	<p>This rule allows you to track the use of the PMD suppression comment mechanism. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// NOPMD\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	bad-practice	0	HTML	1576224552259	1576224552261	1	java
1128	Conditionals should start on new lines	S3972	\N	squid	<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its\nresulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>} </code> from a preceding\n<code>else</code> or <code>else if</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers\nfail to understand that the two statements are unconnected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n</pre>\n<p>Or</p>\n<pre>\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	suspicious	0	HTML	1576224552265	1576224552267	1	java
1173	"super.finalize()" should be called at the end of "Object.finalize()" implementations	ObjectFinalizeOverridenCallsSuperFinalizeCheck	S1114	squid	<p>Overriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.</p>\n<p>Calling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also\ndispose some system resources.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprotected void finalize() {   // Noncompliant; no call to super.finalize();\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  super.finalize();  // Noncompliant; this call should come last\n  releaseSomeResources();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprotected void finalize() {\n  releaseSomeResources();\n  super.finalize();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/568.html">MITRE, CWE-568</a> - finalize() Method Without super.finalize() </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,cwe	0	HTML	1576224553175	1576224553221	2	java
1174	"File.createTempFile" should not be used to create a directory	S2976	\N	squid	<p>Using <code>File.createTempFile</code> as the first step in creating a temporary directory causes a race condition and is inherently unreliable and\ninsecure. Instead, <code>Files.createTempDirectory</code> (Java 7+) or a library function such as Guava's similarly-named\n<code>Files.createTempDir</code> should be used.</p>\n<p>This rule raises an issue when the following steps are taken in immediate sequence:</p>\n<ul>\n  <li> call to <code>File.createTempFile</code> </li>\n  <li> delete resulting file </li>\n  <li> call <code>mkdir</code> on the File object </li>\n</ul>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile tempDir;\ntempDir = File.createTempFile("", ".");\ntempDir.delete();\ntempDir.mkdir();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPath tempPath = Files.createTempDirectory("");\nFile tempDir = tempPath.toFile();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities">OWAPS Top Ten 2013 Category A9</a> - Using\n  Components with Known Vulnerabilities </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	owasp-a9	0	HTML	1576224553269	1576224553271	3	java
1012	"action" mappings should not have too many "forward" entries	S3373	\N	squid	<p>It makes sense to handle all related actions in the same place. Thus, the same <code>&lt;action&gt;</code> might logically handle all facets of\nCRUD on an entity, with no confusion in the naming about which <code>&lt;forward/&gt;</code> handles which facet. But go very far beyond that, and it\nbecomes difficult to maintain a transparent naming convention. </p>\n<p>So to ease maintenance, this rule raises an issue when an <code>&lt;action&gt;</code> has more than the allowed number of\n<code>&lt;forward/&gt;</code> tags.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 4:</p>\n<pre>\n&lt;action path='/book' type='myapp.BookDispatchAction' name='form' parameter='method'&gt;\n  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;\n  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;\n  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;\n  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;\n  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;  &lt;!-- Noncompliant --&gt;\n&lt;/action&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;action path='/book' type='myapp.BookDispatchAction' name='bookForm' parameter='method'&gt;\n  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;\n  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;\n  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;\n  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;\n&lt;/action&gt;\n\n&lt;action path='/author' type='myapp.AuthorDispatchAction' name='authorForm' parameter='method'&gt;\n  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;\n&lt;/action&gt;\n</pre>	1	\N	READY	java	LINEAR	20min	\N	per extra forward	brain-overload,struts	0	HTML	1576224548879	1576224548925	1	java
1013	Array designators "[]" should be located after the type in method signatures	S1195	\N	squid	<p>According to the Java Language Specification: </p>\n<blockquote>\n  <p>For compatibility with older versions of the Java SE platform,</p>\n  <p>the declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the\n  array type after the formal parameter list.</p>\n  <p>This obsolescent syntax should not be used in new code.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getVector()[] { /* ... */ }    // Noncompliant\n\npublic int[] getMatrix()[] { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int[] getVector() { /* ... */ }\n\npublic int[][] getMatrix() { /* ... */ }\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224548972	1576224548973	1	java
1014	"equals" methods should be symmetric and work for subclasses	S2162	\N	squid	<p>A key facet of the <code>equals</code> contract is that if <code>a.equals(b)</code> then <code>b.equals(a)</code>, i.e. that the relationship is\nsymmetric. </p>\n<p>Using <code>instanceof</code> breaks the contract when there are subclasses, because while the child is an <code>instanceof</code> the parent, the\nparent is not an <code>instanceof</code> the child. For instance, assume that <code>Raspberry extends Fruit</code> and adds some fields (requiring a\nnew implementation of <code>equals</code>):</p>\n<pre>\nFruit fruit = new Fruit();\nRaspberry raspberry = new Raspberry();\n\nif (raspberry instanceof Fruit) { ... } // true\nif (fruit instanceof Raspberry) { ... } // false\n</pre>\n<p>If similar <code>instanceof</code> checks were used in the classes' <code>equals</code> methods, the symmetry principle would be broken:</p>\n<pre>\nraspberry.equals(fruit); // false\nfruit.equals(raspberry); //true\n</pre>\n<p>Additionally, non <code>final</code> classes shouldn't use a hardcoded class name in the <code>equals</code> method because doing so breaks the\nmethod for subclasses. Instead, make the comparison dynamic.</p>\n<p>Further, comparing to an unrelated class type breaks the contract for that unrelated type, because while\n<code>thisClass.equals(unrelatedClass)</code> can return true, <code>unrelatedClass.equals(thisClass)</code> will not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (Fruit.class == obj.getClass()) { // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    if (obj instanceof Fruit ) {  // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    else if (obj instanceof Season) { // Noncompliant; symmetry broken for Season class\n      // ...\n    }\n    //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (this.getClass() == obj.getClass()) {\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    return false;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/zIUbAQ">CERT, MET08-J.</a> - Preserve the equality contract when overriding the\n  equals() method </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert	0	HTML	1576224548976	1576224549021	2	java
1070	Track comments matching a regular expression	S124	\N	squid	<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing "REVIEW".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	1	HTML	1576224550749	1576224550749	1	java
1071	Annotation repetitions should not be wrapped	S1710	\N	squid	<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	java8	0	HTML	1576224550759	1576224550761	1	java
1072	Standard functional interfaces should not be redefined	S1711	\N	squid	<p>Just as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard\nfunctional interfaces.</p>\n<p>Doing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of\nconfusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@FunctionalInterface\npublic interface MyInterface { // Noncompliant\n\tdouble toDouble(int a);\n}\n\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier { // Noncompliant\n  boolean get();\n  default boolean isFalse() {\n    return !get();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(MyInterface instance){\n\treturn instance.toDouble(a);\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier\n  default boolean isFalse() {\n    return !getAsBoolean();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(IntToDoubleFunction instance){\n\treturn instance.applyAsDouble(a);\n    }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	java8	0	HTML	1576224550764	1576224550808	1	java
1129	Loggers should be "private static final" and should share a naming convention	S1312	\N	squid	<p>Loggers should be:</p>\n<ul>\n  <li> <code>private</code>: not accessible outside of their parent classes. If another class needs to log something, it should instantiate its own\n  logger. </li>\n  <li> <code>static</code>: not dependent on an instance of a class (an object). When logging something, contextual information can of course be\n  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>\n  <li> <code>final</code>: created once and only once per class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>\n<pre>\npublic Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);\n</pre>\n<h2>Exceptions</h2>\n<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224552271	1576224552273	1	java
1130	Getters and setters should be synchronized in pairs	S2886	\N	squid	<p>When one part of a getter/setter pair is <code>synchronized</code> the other part should be too. Failure to synchronize both sides of a pair may\nresult in inconsistent behavior at runtime as callers access an inconsistent method state.</p>\n<p>This rule raises an issue when either the method or the contents of one method in a getter/setter pair are synchrnoized but the other is not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public String getName() {  // Noncompliant\n    return this.name;\n  }\n\n  public void setAge(int age) {  // Noncompliant\n    this.age = age;\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public synchronized String getName() {\n    return this.name;\n  }\n\n  public void setAge(int age) {\n    synchronized (this) {\n      this.age = age;\n   }\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/I4BoAg">CERT, VNA01-J.</a> - Ensure visibility of shared references to immutable\n  objects </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,multi-threading	0	HTML	1576224552281	1576224552325	2	java
1131	IP addresses should not be hardcoded	S1313	\N	squid	<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>\n<ul>\n  <li> a recompile is required if the address changes </li>\n  <li> it forces the same address to be used in every environment (dev, sys, qa, prod) </li>\n  <li> it places the responsibility of setting the value to use in production on the shoulders of the developer </li>\n  <li> it allows attackers to decompile the code and thereby discover a potentially sensitive address </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString ip = "127.0.0.1";\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString ip = System.getProperty("myapplication.ip");\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	cert	0	HTML	1576224552370	1576224552372	3	java
1175	"clone" should not be overridden	S2975	\N	squid	<p>Many consider <code>clone</code> and <code>Cloneable</code> broken in Java, largely because the rules for overriding <code>clone</code> are tricky\nand difficult to get right, according to Joshua Bloch:</p>\n<blockquote>\n  Object's clone method is very tricky. It's based on field copies, and it's "extra-linguistic." It creates an object without calling a constructor.\n  There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years, both in and\n  outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have a shallow\n  copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don't have two independent objects.\n  If you modify one, the other changes as well. And all of a sudden, you get random behavior.\n</blockquote>\n<p>A copy constructor or copy factory should be used instead.</p>\n<p>This rule raises an issue when <code>clone</code> is overridden, whether or not <code>Cloneable</code> is implemented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  public Object clone() { // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  MyClass (MyClass source) {\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://www.artima.com/intv/bloch13.html">Copy Constructor versus Cloning</a> </li>\n</ul>\n<h3>See Also</h3>\n<ul>\n  <li> {rule:squid:S2157} - "Cloneables" should implement "clone" </li>\n  <li> {rule:squid:S1182} - Classes that override "clone" should be "Cloneable" and call "super.clone()" </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	suspicious	0	HTML	1576224553274	1576224553321	1	java
1176	"Map.get" and value test should be replaced with single method call	S3824	\N	squid	<p>It's a common pattern to test the result of a <code>java.util.Map.get()</code> against <code>null</code> before proceeding with adding or changing\nthe value in the map. However the <code>java.util.Map</code> API offers a significantly better alternative in the form of the\n<code>computeIfPresent()</code> and <code>computeIfAbsent()</code> methods. Using these instead leads to cleaner and more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nV value = map.get(key);\nif (value == null) {  // Noncompliant\n  value = V.createFor(key);\n  if (value != null) {\n    map.put(key, value);\n  }\n}\nreturn value;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn map.computeIfAbsent(key, k -&gt; V.createFor(k));\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	java8	0	HTML	1576224553366	1576224553368	1	java
1015	URIs should not be hardcoded	S1075	\N	squid	<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may\nnot exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems\nusually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by\ncustomizable parameter.</p>\n<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>\n<p>This rule raises an issue when URI's or path delimiters are hard coded.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  public Collection&lt;User&gt; listUsers() {\n    File userList = new File("/home/mylogin/Dev/users.txt"); // Non-Compliant\n    Collection&lt;User&gt; users = parse(userList);\n    return users;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  // Configuration is a class that returns customizable properties: it can be mocked to be injected during tests.\n  private Configuration config;\n  public Foo(Configuration myConfig) {\n    this.config = myConfig;\n  }\n  public Collection&lt;User&gt; listUsers() {\n    // Find here the way to get the correct folder, in this case using the Configuration object\n    String listingFolder = config.getProperty("myApplication.listingFolder");\n    // and use this parameter instead of the hard coded path\n    File userList = new File(listingFolder, "users.txt"); // Compliant\n    Collection&lt;User&gt; users = parse(userList);\n    return users;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	android,cert	0	HTML	1576224549064	1576224549107	1	java
1016	"finalize" should not set fields to "null"	S2165	\N	squid	<p>There is no point in setting class fields to <code>null</code> in a finalizer. If this this is a hint to the garbage collector, it is unnecessary -\nthe object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  @Override\n  void finalize() {\n    name = null;  // Noncompliant; completely unnecessary\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	clumsy,performance	0	HTML	1576224549152	1576224549153	1	java
1017	Default annotation parameter values should not be passed as arguments	S3254	\N	squid	<p>Specifying the default value for an annotation parameter is redundant. Such values should be omitted in the interests of readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@MyAnnotation(arg = "def")  // Noncompliant\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default "def";\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@MyAnnotation\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default "def";\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	clumsy,finding	0	HTML	1576224549156	1576224549157	1	java
1018	Array designators "[]" should be on the type, not the variable	S1197	\N	squid	<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the\nvariable name to know whether or not a variable is an array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][];   // Noncompliant\nint[] matrix[];   // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint[][] matrix;   // Compliant\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224549160	1576224549161	1	java
1073	"Thread.sleep" should not be used in tests	S2925	\N	squid	<p>Using <code>Thread.sleep</code> in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on\nenvironment ("Passes on my machine!") or load. Don't rely on timing (use mocks) or use libraries such as <code>Awaitility</code> for asynchroneous\ntesting. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  Thread.sleep(500);  // Noncompliant\n  // assertions...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant\n  // assertions...\n}\n\nprivate Callable&lt;Boolean&gt; didTheThing() {\n  return new Callable&lt;Boolean&gt;() {\n    public Boolean call() throws Exception {\n      // check the condition that must be fulfilled...\n    }\n  };\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	bad-practice	0	HTML	1576224550853	1576224550855	1	java
1074	JUnit rules should be used	S2924	\N	squid	<p>While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test, several others do not, and\nthere's no reason to leave them cluttering up the file if they're not in use.</p>\n<p>This rule raises an issue when <code>Test</code> class fields of the following types aren't used by any of the test methods:\n<code>TemporaryFolder</code>, and <code>TestName</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Rule\n  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey("mykey");\n    assertThat(def.getKey(), is("mykey"));\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey("mykey");\n    assertThat(def.getKey(), is("mykey"));\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	tests,unused	0	HTML	1576224550858	1576224550859	1	java
1075	Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply	S134	\N	squid	<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making\nwhat's known as "Spaghetti code".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nif (condition1) {                  // Compliant - depth = 1\n  /* ... */\n  if (condition2) {                // Compliant - depth = 2\n    /* ... */\n    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n      /* ... */\n      if (condition4) {            // Noncompliant - depth = 4\n        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	brain-overload	0	HTML	1576224550862	1576224550864	1	java
1132	Non-thread-safe fields should not be static	S2885	\N	squid	<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");\n  private Calendar calendar = Calendar.getInstance();\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	multi-threading	0	HTML	1576224552375	1576224552378	2	java
1133	Track breaches of architectural constraints	ArchitecturalConstraint	S1212	squid	<p>A source code comply to an architectural model when it fully adheres to a set of architectural constraints. A constraint allows to deny references\nbetween classes by pattern.</p>\n<p>You can for instance use this rule to :</p>\n<ul>\n  <li> forbid access to <code>**.web.**</code> from <code>**.dao.**</code> classes </li>\n  <li> forbid access to <code>java.util.Vector</code>, <code>java.util.Hashtable</code> and <code>java.util.Enumeration</code> from any classes </li>\n  <li> forbid access to <code>java.sql.**</code> from <code>**.ui.**</code> and <code>**.web.**</code> classes </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	1	HTML	1576224552381	1576224552381	1	java
1134	The Object.finalize() method should not be overriden	ObjectFinalizeOverridenCheck	S1113	squid	<p>The <code>Object.finalize()</code> method is called on an object by the garbage collector when it determines that there are no more references to\nthe object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be\nfew microseconds to few minutes later. So when system resources need to be disposed by an object, it's better to not rely on this asynchronous\nmechanism to dispose them.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  ...\n  protected void finalize() {\n    releaseSomeResources();    // Noncompliant\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cert,unpredictable	0	HTML	1576224552388	1576224552390	1	java
1177	"catch" clauses should do more than rethrow	S2737	\N	squid	<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting\nit bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads. </p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      //...\n  }\n  catch (IOException e) {  // Noncompliant\n    throw e;\n  }\n  return sb.toString();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      //...\n  }\n  catch (IOException e) {\n    logger.LogError(e);\n    throw e;\n  }\n  return sb.toString();\n}\n</pre>\n<p>or</p>\n<pre>\npublic String readFile(File f) throws IOException {\n  StringBuilder sb = new StringBuilder();\n  FileReader fileReader = new FileReader(fileName);\n  BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n  while((line = bufferedReader.readLine()) != null) {\n    //...\n\n  return sb.toString();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,clumsy,finding,unused	0	HTML	1576224553372	1576224553417	1	java
1019	Math should not be performed on floats	S2164	\N	squid	<p>For small numbers, <code>float</code> math has enough precision to yield the expected value, but for larger numbers, it does not.\n<code>BigDecimal</code> is the best alternative, but if a primitive is required, use a <code>double</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat a = 16777216.0f;\nfloat b = 1.0f;\nfloat c = a + b; // Noncompliant; yields 1.6777216E7 not 1.6777217E7\n\ndouble d = a + b; // Noncompliant; addition is still between 2 floats\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfloat a = 16777216.0f;\nfloat b = 1.0f;\nBigDecimal c = BigDecimal.valueOf(a).add(BigDecimal.valueOf(b));\n\ndouble d = (double)a + (double)b;\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when the mathematical expression is only used to build a string.</p>\n<pre>\nSystem.out.println("["+getName()+"] " +\n           "\\n\\tMax time to retrieve connection:"+(max/1000f/1000f)+" ms.");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/DgU">CERT, FLP02-C.</a> - Avoid using floating-point numbers when precise computation\n  is needed </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert	0	HTML	1576224549163	1576224549165	2	java
1020	Struts validation forms should have unique names	S3374	\N	squid	<p>According to the Common Weakness Enumeration,</p>\n<blockquote>\n  If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the\n  other. This decision might not correspond to the programmer's expectations...\n</blockquote>\n<p>In such a case, it is likely that the two forms should be combined. At the very least, one should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;form-validation&gt;\n  &lt;formset&gt;\n    &lt;form name="BookForm"&gt; ... &lt;/form&gt;\n    &lt;form name="BookForm"&gt; ... &lt;/form&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;/formset&gt;\n&lt;/form-validation&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;form-validation&gt;\n  &lt;formset&gt;\n    &lt;form name="BookForm"&gt; ... &lt;/form&gt;\n  &lt;/formset&gt;\n&lt;/form-validation&gt;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/102.html">MITRE, CWE-102</a> - Struts: Duplicate Validation Forms </li>\n  <li> <a href="https://www.owasp.org/index.php/Struts:_Duplicate_Validation_Forms#Struts:_Duplicate_Validation_Forms">OWASP, Improper Data\n  Validation</a> - Struts: Duplicate Validation Forms </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cwe,struts	0	HTML	1576224549167	1576224549168	3	java
1021	"compareTo" should not return "Integer.MIN_VALUE"	S2167	\N	squid	<p>It is the sign, rather than the magnitude of the value returned from <code>compareTo</code> that matters. Returning <code>Integer.MIN_VALUE</code>\ndoes <em>not</em> convey a higher degree of inequality, and doing so can cause errors because the return value of <code>compareTo</code> is sometimes\ninversed, with the expectation that negative values become positive. However, inversing <code>Integer.MIN_VALUE</code> yields\n<code>Integer.MIN_VALUE</code> rather than <code>Integer.MAX_VALUE</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return Integer.MIN_VALUE;  // Noncompliant\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return -1;\n  }\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224549170	1576224549172	2	java
1076	Local variables should not shadow class fields	HiddenFieldCheck	S1117	squid	<p>Shadowing fields with a local variable is a bad practice that reduces code readability: it makes it confusing to know whether the field or the\nvariable is being used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/2ADEAw">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,pitfall	0	HTML	1576224550869	1576224550871	1	java
1077	All branches in a conditional structure should not have exactly the same implementation	S3923	\N	squid	<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224550873	1576224550875	2	java
1078	Exceptions should not be thrown from servlet methods	S1989	\N	squid	<p>Even though the signatures for methods in a servlet include <code>throws IOException, ServletException</code>, it's a bad idea to let such\nexceptions be thrown. Failure to catch exceptions in a servlet could leave a system in a vulnerable state, possibly resulting in denial-of-service\nattacks, or the exposure of sensitive information because when a servlet throws an exception, the servlet container typically sends debugging\ninformation back to the user. And that information could be very valuable to an attacker. </p>\n<p>This rule checks all exceptions in methods named "do*" are explicitly handled in servlet classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  String ip = request.getRemoteAddr();\n  InetAddress addr = InetAddress.getByName(ip); // Noncompliant; getByName(String) throws UnknownHostException\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  try {\n    String ip = request.getRemoteAddr();\n    InetAddress addr = InetAddress.getByName(ip);\n    //...\n  }\n  catch (UnknownHostException uhex) {\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/600.html">MITRE, CWE-600</a> - Uncaught Exception in Servlet </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/s4EVAQ">CERT, ERR01-J.</a> - Do not allow exceptions to expose sensitive information\n  </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten Category A6</a> - Sensitive Data Exposure </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cert,cwe,error-handling,owasp-a6	0	HTML	1576224550878	1576224550923	3	java
1135	"for" loop stop conditions should be invariant	ForLoopCounterChangedCheck	S127	squid	<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>\n  <li> When the stop condition depend upon a method call </li>\n  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {\n  ...\n  i = i - 1; // Noncompliant; counter updated in the body of the loop\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {...}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the\n  loop. </li>\n  <li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>. </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	misra,pitfall	0	HTML	1576224552395	1576224552441	1	java
1136	Method parameters, caught exceptions and foreach variables' initial values should not be ignored	S1226	\N	squid	<p>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as <code>final</code>, then at least read\nbefore reassignment.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doTheThing(String str, int i, List&lt;String&gt; strings) {\n  str = Integer.toString(i);  // Noncompliant\n\n  for (String s : strings) {\n    s = "hello world";  // Noncompliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	misra	0	HTML	1576224552486	1576224552489	2	java
1137	Silly bit operations should not be performed	S2437	\N	squid	<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>\n<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and\n<code>anyValue | 0</code>.</p>	4	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224552492	1576224552494	1	java
1138	Packages should have a javadoc file 'package-info.java'	S1228	\N	squid	<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using\njavadoc and declare package annotations.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n* This package has non null parameters and is documented.\n**/\n@ParametersAreNonnullByDefault\npackage org.foo.bar;\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	convention	0	HTML	1576224552497	1576224552499	1	java
1178	Assertions should be complete	S2970	\N	squid	<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:</p>\n<ul>\n  <li> Fest: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> AssertJ: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> Mockito: <code>verify</code> is not followed by a method invocation </li>\n</ul>\n<p>In such cases, what is intended to be a test doesn't actually verify anything</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result); // Noncompliant; nothing is actually checked, the test passes whether "result" is true or false\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add("one");\nmockedList.clear();\n// let's check that "add" and "clear" methods are actually called\nMockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result).isTrue();\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add("one");\nmockedList.clear();\n// let's check that "add" and "clear" methods are actually called\nMockito.verify(mockedList).add("one");\nMockito.verify(mockedList).clear();\n</pre>\n<h2>Exceptions</h2>\n<p>Variable assignments and return statements are skipped to allow helper methods.</p>\n<pre>\nprivate BooleanAssert check(String filename, String key) {\n  String fileContent = readFileContent(filename);\n  performReplacements(fileContent);\n  return assertThat(fileContent.contains(key)); // No issue is raised here\n}\n\n@Test\npublic void test() {\n  check("foo.txt", "key1").isTrue();\n  check("bar.txt", "key2").isTrue();\n}\n</pre>	4	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	tests	0	HTML	1576224553462	1576224553509	1	java
1179	Maps with keys that are enum values should be replaced with EnumMap	S1640	\N	squid	<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more\nefficient than other sets because the underlying data structure is a simple array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;COLOR, String&gt; (COLOR.class);\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	performance	0	HTML	1576224553554	1576224553556	1	java
1180	Inner classes should not have too many lines of code	S2972	\N	squid	<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold\nshould probably be externalized to its own file.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	brain-overload	0	HTML	1576224553560	1576224553562	1	java
1022	Nested code blocks should not be used	S1199	\N	squid	<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	bad-practice	0	HTML	1576224549173	1576224549175	1	java
1023	Classes named like "Exception" should extend "Exception" or a subclass	S2166	\N	squid	<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing "exception" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation\nthat a class' name will indicate what it is and/or does.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitException {  // Noncompliant; this has nothing to do with Exception\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException {  // Noncompliant; the extends clause was forgotten?\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitSport {\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException extends Exception {\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	convention,pitfall	0	HTML	1576224549177	1576224549178	1	java
1024	Double-checked locking should not be used	S2168	\N	squid	<p>Double-checked locking is the practice of checking a lazy-initialized object's state both before and after a <code>synchronized</code> block is\nentered to determine whether or not to initialize the object.</p>\n<p>It does not work reliably in a platform-independent manner without additional synchronization for mutable instances of anything other than\n<code>float</code> or <code>int</code>. Using double-checked locking for the lazy initialization of any other type of primitive or mutable object\nrisks a second thread using an uninitialized or partially initialized member while the first thread is still creating it, and crashing the\nprogram.</p>\n<p>There are multiple ways to fix this. The simplest one is to simply not use double checked locking at all, and synchronize the whole method instead.\nWith early versions of the JVM, synchronizing the whole method was generally advised against for performance reasons. But <code>synchronized</code>\nperformance has improved a lot in newer JVMs, so this is now a preferred solution. If you prefer to avoid using <code>synchronized</code> altogether,\nyou can use an inner <code>static class</code> to hold the reference instead. Inner static classes are guaranteed to load lazily.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@NotThreadSafe\npublic class DoubleCheckedLocking {\n    private static Resource resource;\n\n    public static Resource getInstance() {\n        if (resource == null) {\n            synchronized (DoubleCheckedLocking.class) {\n                if (resource == null)\n                    resource = new Resource();\n            }\n        }\n        return resource;\n    }\n\n    static class Resource {\n\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@ThreadSafe\npublic class SafeLazyInitialization {\n    private static Resource resource;\n\n    public synchronized static Resource getInstance() {\n        if (resource == null)\n            resource = new Resource();\n        return resource;\n    }\n\n    static class Resource {\n    }\n}\n</pre>\n<p>With inner static holder:</p>\n<pre>\n@ThreadSafe\npublic class ResourceFactory {\n    private static class ResourceHolder {\n        public static Resource resource = new Resource(); // This will be lazily initialised\n    }\n\n    public static Resource getResource() {\n        return ResourceFactory.ResourceHolder.resource;\n    }\n\n    static class Resource {\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html">The "Double-Checked Locking is Broken" Declaration</a> </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/IgAZAg">CERT, LCK10-J.</a> - Use a correct form of the double-checked locking idiom\n  </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/609.html">MITRE, CWE-609</a> - Double-checked locking </li>\n  <li> <a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-12.html#jls-12.4">JLS 12.4</a> - Initialization of Classes and Interfaces </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cert,cwe,multi-threading	0	HTML	1576224549180	1576224549228	2	java
1025	The names of methods with boolean return values should start with "is" or "has"	S2047	\N	squid	<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the\ndocumentation. Toward that end, methods returning a boolean should have names that start with "is" or "has" rather than with "get".</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean getFoo() { // Noncompliant\n  // ...\n}\n\npublic boolean getBar(Bar c) { // Noncompliant\n  // ...\n}\n\npublic boolean testForBar(Bar c) { // Compliant - The method does not start by 'get'.\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isFoo() {\n  // ...\n}\n\npublic boolean hasBar(Bar c) {\n  // ...\n}\n\npublic boolean testForBar(Bar c) {\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are excluded.</p>\n<pre>\n@Override\npublic boolean getFoo(){\n  // ...\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	convention	0	HTML	1576224549273	1576224549275	1	java
1079	"DateUtils.truncate" from Apache Commons Lang library should not be used	S2718	\N	squid	<p>The use of the <code>Instant</code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils</code> class\nfrom Commons Lang.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Date trunc(Date date) {\n  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic Date trunc(Date date) {\n  Instant instant = date.toInstant();\n  instant = instant.truncatedTo(ChronoUnit.SECONDS);\n  return Date.from(instant);\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	java8,performance	0	HTML	1576224550968	1576224550968	1	java
1080	Unnecessary semicolons should be omitted	S2959	\N	squid	<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224550969	1576224550970	1	java
1081	Synchronization should not be based on Strings or boxed primitives	S1860	\N	squid	<p>Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock\nwith unhelpful stacktraces. Specifically, <code>String</code> literals, and boxed primitives such as Integers should not be used as lock objects\nbecause they are pooled and reused. The story is even worse for <code>Boolean</code> objects, because there are only two instances of\n<code>Boolean</code>, <code>Boolean.TRUE</code> and <code>Boolean.FALSE</code> and every class that uses a Boolean will be referring to one of the\ntwo.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate static final Boolean bLock = Boolean.FALSE;\nprivate static final Integer iLock = Integer.valueOf(0);\nprivate static final String sLock = "LOCK";\n\npublic void doSomething() {\n\n  synchronized(bLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(iLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(sLock) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Object lock1 = new Object();\nprivate static final Object lock2 = new Object();\nprivate static final Object lock3 = new Object();\n\npublic void doSomething() {\n\n  synchronized(lock1) {\n    // ...\n  }\n  synchronized(lock2) {\n    // ...\n  }\n  synchronized(lock3) {\n    // ...\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/rQGeAQ">CERT, LCK01-J.</a> - Do not synchronize on objects that may be reused </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert,multi-threading	0	HTML	1576224550971	1576224551016	2	java
1139	"Threads" should not be used where "Runnables" are expected	S2438	\N	squid	<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are\ndifferent, and mixing them is a bad practice that will likely lead to headaches in the future.</p>\n<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose\nrunning should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tThread r =new Thread() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println("a");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tRunnable r =new Runnable() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println("a");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	multi-threading,pitfall	0	HTML	1576224552503	1576224552505	1	java
1140	The default unnamed package should not be used	S1220	\N	squid	<p>According to the Java Language Specification:</p>\n<blockquote>\n  <p>Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just\n  beginning development.</p>\n</blockquote>\n<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example;\n\npublic class MyClass{ /* ... */ }\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	convention	0	HTML	1576224552509	1576224552511	1	java
1141	Methods should not be named "hashcode" or "equal"	S1221	\N	squid	<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on\n  the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ }\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	pitfall	0	HTML	1576224552514	1576224552516	2	java
1142	"readObject" should not be "synchronized"	S2675	\N	squid	<p>A <code>readObject</code> method is written when a <code>Serializable</code> object needs special handling to be rehydrated from file. It should be\nthe case that the object being created by <code>readObject</code> is only visible to the thread that invoked the method, and the\n<code>synchronized</code> keyword is not needed, and using <code>synchronized</code> anyway is just confusing. If this is not the case, the method\nshould be refactored to make it the case.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate synchronized void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Compliant\n  //...\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	confusing	0	HTML	1576224552519	1576224552522	1	java
1181	Sets with elements that are enum values should be replaced with EnumSet	S1641	\N	squid	<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other\nsets because the underlying data structure is a simple bitmap.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();\n    warm.add(COLORS.RED);\n    warm.add(COLORS.ORANGE);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    EnumSet&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	performance	0	HTML	1576224553569	1576224553572	1	java
1182	Classes without "public" constructors should be "final"	S2974	\N	squid	<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class PrivateConstructorClass {  // Noncompliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class PrivateConstructorClass {  // Compliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	design	0	HTML	1576224553576	1576224553578	1	java
1183	Strings should not be concatenated using '+' in a loop	S1643	\N	squid	<p>Strings are immutable objects, so concatenation doesn't simply add the new String to the end of the existing string. Instead, in each loop\niteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted\nback to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is\npreferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = "";\nfor (int i = 0; i &lt; arrayOfStrings.length ; ++i) {\n  str = str + arrayOfStrings[i];\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuilder bld = new StringBuilder();\n  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {\n    bld.append(arrayOfStrings[i]);\n  }\n  String str = bld.toString();\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	performance	0	HTML	1576224553581	1576224553584	1	java
1026	Default EJB interceptors should be declared in "ejb-jar.xml"	S3281	\N	squid	<p>Default interceptors, such as application security interceptors, must be listed in the <code>ejb-jar.xml</code> file, or they will not be treated\nas default. </p>\n<p>This rule applies to projects that contain JEE Beans (any one of <code>javax.ejb.Singleton</code>, <code>MessageDriven</code>,\n<code>Stateless</code> or <code>Stateful</code>).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// file: ejb-interceptors.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt;\n      &lt;ejb-name&gt;*&lt;/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;&lt;!-- Noncompliant; will not be treated as default --&gt;\n   &lt;/interceptor-binding&gt;\n&lt;/assembly-descriptor&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// file: ejb-jar.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt;\n      &lt;ejb-name&gt;*&lt;/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;\n   &lt;/interceptor-binding&gt;\n&lt;/assembly-descriptor&gt;\n</pre>	4	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224549277	1576224549279	3	java
1027	SHA-1 and Message-Digest hash algorithms should not be used	S2070	\N	squid	<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,\nit takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash\nvalue gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,\nMD4, MD6, RIPEMD160.</p>\n<p>The following APIs are tracked for use of obsolete crypto algorithms:</p>\n<p> * <code>java.security.AlgorithmParameters</code> (JDK)</p>\n<p> * <code>java.security.AlgorithmParameterGenerator</code> (JDK)</p>\n<p> * <code>java.security.MessageDigest</code> (JDK)</p>\n<p> * <code>java.security.KeyFactory</code> (JDK)</p>\n<p> * <code>java.security.KeyPairGenerator</code> (JDK)</p>\n<p> * <code>java.security.Signature</code> (JDK)</p>\n<p> * <code>javax.crypto.Mac</code> (JDK)</p>\n<p> * <code>javax.crypto.KeyGenerator</code> (JDK)</p>\n<p> * <code>org.apache.commons.codec.digest.DigestUtils</code> (Apache Commons Codec)</p>\n<p> * <code>com.google.common.hash.Hashing</code> (Guava)</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance("SHA1");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance("SHA-256");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/328">MITRE, CWE-328</a> - Reversible One-Way Hash </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/327">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#WEAK_MESSAGE_DIGEST">MessageDigest Is Weak</a> </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	cwe,owasp-a6,sans-top25-porous	0	HTML	1576224549282	1576224549324	3	java
1028	EJB interceptor exclusions should be declared as annotations	S3282	\N	squid	<p>Exclusions for default interceptors can be declared either in xml or as class annotations. Since annotations are more visible to maintainers, they\nare preferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;assembly-descriptor&gt;\n      &lt;interceptor-binding&gt;\n         &lt;ejb-name&gt;MyExcludedClass&lt;/ejb-name&gt;\n         &lt;exclude-default-interceptors&gt;true&lt;/exclude-default-interceptors&gt; &lt;!-- Noncompliant --&gt;\n         &lt;exclude-class-interceptors&gt;true&lt;/exclude-class-interceptors&gt; &lt;!-- Noncomopliant --&gt;\n         &lt;method&gt;\n           &lt;method-name&gt;doTheThing&lt;/method-name&gt;\n         &lt;/method&gt;\n      &lt;/interceptor-binding&gt;\n\n&lt;/assembly-descriptor&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@ExcludeDefaultInterceptors\npublic class MyExcludedClass implements MessageListener\n{\n\n  @ExcludeClassInterceptors\n  @ExcludeDefaultInterceptors\n  public void doTheThing() {\n    // ...\n  }\n</pre>	4	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	pitfall	0	HTML	1576224549369	1576224549371	1	java
1029	Track uses of disallowed constructors	S4011	\N	squid	<p>This rule allows banning usage of certain constructors.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className: java.util.Date </li>\n  <li> argumentTypes: java.lang.String </li>\n</ul>\n<pre>\nDate birthday;\nbirthday = new Date("Sat Sep 27 05:42:21 EDT 1986");  // Noncompliant\nbirthday = new Date(528176541000L); // Compliant\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	1	HTML	1576224549373	1576224549373	1	java
1082	Related "if/else if" statements should not have the same condition	S1862	\N	squid	<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	cert,pitfall,unused	0	HTML	1576224551061	1576224551062	2	java
1083	@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces	S1609	\N	squid	<p>A Single Abstract Method (SAM) interface is a Java interface containing only one method. The Java API is full of SAM interfaces, such as\n<code>java.lang.Runnable</code>, <code>java.awt.event.ActionListener</code>, <code>java.util.Comparator</code> and\n<code>java.util.concurrent.Callable</code>. SAM interfaces have a special place in Java 8 because they can be implemented using Lambda expressions or\nMethod references. </p>\n<p>Using <code>@FunctionalInterface</code> forces a compile break when an additional, non-overriding abstract method is added to a SAM, which would\nbreak the use of Lambda implementations.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>	3	\N	DEPRECATED	java	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224551063	1576224551108	1	java
1084	Parentheses should be removed from a single lambda input parameter when its type is inferred	S1611	\N	squid	<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single\nparameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n(x) -&gt; x * 2\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; x * 2\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	java8	0	HTML	1576224551155	1576224551157	1	java
1085	Literal boolean values should not be used in assertions	S2701	\N	squid	<p>There's no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAssert.assertTrue(true);  // Noncompliant\nassertThat(true).isTrue(); // Noncompliant\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	junit,tests	0	HTML	1576224551161	1576224551163	1	java
1143	Non-constructor methods should not have the same name as the enclosing class	S1223	\N	squid	<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224552525	1576224552528	1	java
1144	The value returned from a stream read should be checked	S2674	\N	squid	<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method. Instead, you must check the value\nreturned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.</p>\n<p>Similarly, you cannot assume that <code>InputStream.skip</code> will actually skip the requested number of bytes, but must check the value returned\nfrom the method.</p>\n<p>This rule raises an issue when an <code>InputStream.read</code> method that accepts a <code>byte[]</code> is called, but the return value is not\nchecked, and when the return value of <code>InputStream.skip</code> is not checked. The rule also applies to <code>InputStream</code> child\nclasses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    is.read(buffer);  // Noncompliant\n    // ...\n  } catch (IOException e) { ... }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    int count = 0;\n    while (count = is.read(buffer) &gt; 0) {\n      // ...\n    }\n  } catch (IOException e) { ... }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/XACSAQ">CERT, FIO10-J.</a> - Ensure the array is filled when using read() to fill an\n  array </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert	0	HTML	1576224552532	1576224552576	2	java
1145	Methods should not return constants	S3400	\N	squid	<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstatic int bestNumber = 12;\n</pre>\n<h2>Exceptions</h2>\n<p>Methods with annotations, such as <code>@Override</code> and Spring's <code>@RequestMapping</code>, are ignored.</p>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	confusing	0	HTML	1576224552621	1576224552623	1	java
1184	Identical expressions should not be used on both sides of a binary operator	S1764	\N	squid	<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n\nc.equals(c); //always true\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println("f is NaN");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> {rule:squid:S1656} - Implements a check on <code>=</code>. </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	cert	0	HTML	1576224553587	1576224553633	2	java
1185	Escaped Unicode characters should not be used	S2973	\N	squid	<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>\n<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a\nprintable character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString prefix = "n\\u00E9e"; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString prefix = "née";\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	confusing	0	HTML	1576224553678	1576224553680	1	java
1186	Sections of code should not be "commented out"	CommentedOutCodeLine	S125	squid	<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be "commented out". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out" </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	misra,unused	0	HTML	1576224553684	1576224553686	1	java
1187	Files should contain only one top-level class or interface each	S1996	\N	squid	<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This\nis doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or\ninterface per file.</p>	2	\N	READY	java	LINEAR	10min	\N	per extra type	brain-overload	0	HTML	1576224553690	1576224553692	1	java
1030	Switches should be used for sequences of simple "String" tests	S2196	\N	squid	<p>Since Java 7, <code>String</code>s can be used as <code>switch</code> arguments. So when a single <code>String</code> is tested against three or\nmore values in an <code>if</code>/<code>else if</code> structure, it should be converted to a switch instead for greater readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ("red".equals(choice)) {  // Noncompliant\n  dispenseRed();\n} else if ("blue".equals(choice)) {\n  dispenseBlue();\n} else if ("yellow".equals(choice)) {\n  dispenseYellow();\n} else {\n  promptUser();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch(choice) {\n  case "Red":\n    dispenseRed();\n    break;\n  case "Blue":\n    dispenseBlue():\n    break;\n  case "Yellow":\n    dispenseYellow();\n    break;\n  default:\n    promptUser();\n    break;\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224549380	1576224549381	1	java
1031	"writeObject" should not be the only "synchronized" code in a class	S3042	\N	squid	<p>The purpose of synchronization is to ensure that only one thread executes a given block of code at a time. There's no real problem with marking\n<code>writeObject</code> <code>synchronized</code>, but if it's highly suspicious if this serialization-related method the only\n<code>synchronized</code> code in a <code>class</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n  public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private synchronized void writeObject(ObjectOutputStream stream) throws IOException { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n   public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private void writeObject(ObjectOutputStream stream) throws IOException {\n    // ...\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	confusing	0	HTML	1576224549384	1576224549386	1	java
1032	Empty statements should be removed	EmptyStatementUsageCheck	S1116	squid	<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  ;                                                       // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse() {\n  System.out.println("Hello, world!");;                     // Noncompliant - double ;\n  ...\n  for (int i = 0; i &lt; 3; System.out.println(i), i++);       // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething() {}\n\nvoid doSomethingElse() {\n  System.out.println("Hello, world!");\n  ...\n  for (int i = 0; i &lt; 3; i++){\n    System.out.println(i);\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. </li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/7gCTAw">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,\n  or while condition </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/i4FtAg">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,\n  or while statement </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	cert,misra,unused	0	HTML	1576224549388	1576224549432	1	java
1033	SQL binding mechanisms should be used	S2077	\N	squid	<p>Applications that execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an\nattacker to include input that changes the query so that unintended commands are executed, or sensitive data is exposed.</p>\n<p>This rule checks a variety of methods from different frameworks which are susceptible to SQL injection if not used properly. Frameworks which are\ncovered are Java JDBC, JPA, JDO, Hibernate and Spring. The following specific method signatures are tested. </p>\n<ul>\n  <li> <code>org.hibernate.Session.createQuery</code> </li>\n  <li> <code>org.hibernate.Session.createSQLQuery</code> </li>\n  <li> <code>java.sql.Statement.executeQuery</code> </li>\n  <li> <code>java.sql.Statement.execute</code> </li>\n  <li> <code>java.sql.Statement.executeUpdate</code> </li>\n  <li> <code>java.sql.Statement.executeLargeUpdate</code> </li>\n  <li> <code>java.sql.Statement.addBatch</code> </li>\n  <li> <code>java.sql.Connection.prepareStatement</code> </li>\n  <li> <code>java.sql.Connection.prepareCall</code> </li>\n  <li> <code>java.sql.Connection.nativeSQL</code> </li>\n  <li> <code>javax.persistence.EntityManager.createNativeQuery</code> </li>\n  <li> <code>javax.persistence.EntityManager.createQuery</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.batchUpdate</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.execute</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.query</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForList</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForMap</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForObject</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForRowSet</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForInt</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.queryForLong</code> </li>\n  <li> <code>org.springframework.jdbc.core.JdbcOperations.update</code> </li>\n  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.&lt;init&gt;</code> </li>\n  <li> <code>org.springframework.jdbc.core.PreparedStatementCreatorFactory.newPreparedStatementCreator</code> </li>\n  <li> <code>javax.jdo.PersistenceManager.newQuery</code> </li>\n  <li> <code>javax.jdo.Query.setFilter</code> </li>\n  <li> <code>javax.jdo.Query.setGrouping</code> </li>\n</ul>\n<p>If a method is defined in an interface, implementations are also tested. For example this is the case for\n<code>org.springframework.jdbc.core.JdbcOperations</code> , which is usually used as <code>org.springframework.jdbc.core.JdbcTemplate</code>). </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  Statement stmt2 = null;\n  PreparedStatement pstmt;\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery("GETDATE()"); // Compliant; parameters not used here\n\n    stmt2 = con.createStatement();\n    ResultSet rs2 = stmt2.executeQuery("select FNAME, LNAME, SSN " +\n                 "from USERS where UNAME=" + user);  // Noncompliant; parameter concatenated directly into query\n\n    pstmt = con.prepareStatement("select FNAME, LNAME, SSN " +\n                 "from USERS where UNAME=" + user);  // Noncompliant; parameter concatenated directly into query\n    ResultSet rs3 = pstmt.executeQuery();\n\n    //...\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query = session.createQuery(  // Compliant\n            "FROM students where fname = " + userInput);  // Noncompliant; parameter binding should be used instead\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  PreparedStatement pstmt = null;\n  String query = "select FNAME, LNAME, SSN " +\n                 "from USERS where UNAME=?"\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery("GETDATE()");\n\n    pstmt = con.prepareStatement(query);\n    pstmt.setString(1, user);  // Compliant; PreparedStatements escape their inputs.\n    ResultSet rs2 = pstmt.executeQuery();\n\n    //...\n  }\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query =  session.createQuery("FROM students where fname = ?");\n  query = query.setParameter(0,userInput);  // Parameter binding escapes all input\n  // ...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/89">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/564.html">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/20.html">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/943.html">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/PgIRAg">CERT, IDS00-J.</a> - Prevent SQL injection </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection </li>\n  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from FindSecBugs rules <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA">Potential SQL/JPQL Injection\n  (JPA)</a>, <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO">Potential SQL/JDOQL Injection (JDO)</a>, <a\n  href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE">Potential SQL/HQL Injection (Hibernate)</a> </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cert,cwe,hibernate,owasp-a1,sans-top25-insecure,sql	0	HTML	1576224549480	1576224549524	3	java
1086	Lambdas should be replaced with method references	S1612	\N	squid	<p>Method/constructor references are more compact and readable than using lambdas, and are therefore preferred. Similarly, <code>null</code> checks\ncan be replaced with references to the <code>Objects::isNull</code> and <code>Objects::nonNull</code> methods.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .map(a -&gt; a.&lt;String&gt;getObject())\n      .forEach(a -&gt; { System.out.println(a); });\n  }\n\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .map(A::&lt;String&gt;getObject)\n      .forEach(System.out::println);\n  }\n\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	java8	0	HTML	1576224551167	1576224551169	1	java
1087	Dead stores should be removed	S1854	\N	squid	<p>A dead store happens when a local variable is assigned a value, including <code>null</code>, that is not read by any subsequent instruction.\nCalculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error,\nit is at best a waste of resources. </p>\n<p>Even assigning <code>null</code> to a variable is a dead store if the variable is not subsequently used. Assigning null as a hint to the garbage\ncollector used to be common practice, but is no longer needed and such code should be eliminated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i &lt; b, i++) {\n    x = x * a;  //Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i &lt; b, i++) {\n    x = x * a;\n  }\n  return x;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, empty string (<code>""</code>), <code>true</code>, and <code>false</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C.</a> - Detect and remove unused values </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/S4IyAQ">CERT, MSC13-CPP.</a> - Detect and remove unused values </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert,cwe,unused	0	HTML	1576224551172	1576224551216	1	java
1088	"toString()" should never be called on a String object	S1858	\N	squid	<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant\nconstruction may be optimized by the compiler, but will be confusing in the meantime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString message = "hello world";\nSystem.out.println(message.toString()); // Noncompliant;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString message = "hello world";\nSystem.out.println(message);\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	clumsy,finding	0	HTML	1576224551260	1576224551261	1	java
1146	"read" and "readLine" return values should be used	S2677	\N	squid	<p>When a method is called that returns data read from some data source, that data should be stored rather than thrown away. Any other course of\naction is surely a bug.</p>\n<p>This rule raises an issue when the return value of any of the following is ignored or merely null-checked: <code>BufferedReader.readLine()</code>,\n<code>Reader.read()</code>, and these methods in any child classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    while (buffReader.readLine() != null) { // Noncompliant\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    String line = null;\n    while ((line = buffReader.readLine()) != null) {\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224552625	1576224552626	2	java
1147	Neither "Math.abs" nor negation should be used on numbers that could be "MIN_VALUE"	S2676	\N	squid	<p>It is possible for a call to <code>hashCode</code> to return <code>Integer.MIN_VALUE</code>. Take the absolute value of such a hashcode and you'll\nstill have a negative number. Since your code is likely to assume that it's a positive value instead, your results will be unreliable.</p>\n<p>Similarly, <code>Integer.MIN_VALUE</code> could be returned from <code>Random.nextInt()</code> or any object's <code>compareTo</code> method, and\n<code>Long.MIN_VALUE</code> could be returned from <code>Random.nextLong()</code>. Calling <code>Math.abs</code> on values returned from these methods\nis similarly ill-advised.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String str) {\n  if (Math.abs(str.hashCode()) &gt; 0) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String str) {\n  if (str.hashCode() != 0) {\n    // ...\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224552629	1576224552630	2	java
1148	Execution of the Garbage Collector should be triggered only by the JVM	S1215	\N	squid	<p>Calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason: there is no way to know exactly what\nwill be done under the hood by the JVM because the behavior will depend on its vendor, version and options:</p>\n<ul>\n  <li> Will the whole application be frozen during the call? </li>\n  <li> Is the <code>-XX:DisableExplicitGC</code> option activated? </li>\n  <li> Will the JVM simply ignore the call? </li>\n  <li> ... </li>\n</ul>\n<p>An application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector should\nbe left exclusively to the JVM.</p>	3	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	bad-practice,unpredictable	0	HTML	1576224552633	1576224552634	1	java
1188	Number patterns should be regular	S3937	\N	squid	<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus\n1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error. </p>\n<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint duos = 1_00_00;\nint million = 1_000_00_000;  // Noncompliant\nint thousand = 1000;\nint tenThousand = 100_00;  // Noncompliant\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	suspicious	0	HTML	1576224553695	1576224553697	1	java
1189	Two branches in a conditional structure should not have exactly the same implementation	S1871	\N	squid	<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<p>or </p>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doFirstThing();\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	design,suspicious	0	HTML	1576224553701	1576224553745	1	java
1190	Classes should not be compared by name	S1872	\N	squid	<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object's type based\non its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted\nclass and thereby gain trusted access.</p>\n<p>Instead, the <code>instanceof</code> operator or the <code>Class.isAssignableFrom()</code> method should be used to check the object's underlying\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage computer;\nclass Pear extends Laptop { ... }\n\npackage food;\nclass Pear extends Fruit { ... }\n\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if ("Pear".equals(item.getClass().getSimpleName())) {  // Noncompliant\n      return true;  // Results in throwing away week-old computers\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (List.class.getName().equals(valueClass.getName())) {  // Noncompliant\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (item instanceof food.Pear) {\n      return true;\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (valueClass.isAssignableFrom(List.class)) {\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/486.html">MITRE, CWE-486</a> - Comparison of Classes by Name </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/LAFlAQ">CERT, OBJ09-J.</a> - Compare classes and not class names </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,cwe	0	HTML	1576224553790	1576224553833	2	java
1034	Values passed to OS commands should be sanitized	S2076	\N	squid	<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any\nexternally-provided values used in those commands. Failure to do so could allow an attacker to include input that executes unintended commands, or\nexposes sensitive data.</p>\n<p>This rule logs issues for dynamically-built commands, and when parameter values are used to influence how a command is run. it's then up to the\nauditor to figure out if the command execution is secure or not. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void listContent(String input) {\n  Runtime rt = Runtime.getRuntime();\n  rt.exec("ls " + input); // Noncompliant; input could easily contain extra commands\n  ...\n}\n\npublic void execute(String command, String argument) {\n  ProcessBuilder pb = new ProcessBuilder(command, argument); // Noncompliant\n  ...\n}\n\npublic void doTheThing(String path) {\n  ProcessBuilder pb = new ProcessBuilder("ls");  // command hard coded. So far, so good\n  pb.redirectOutput(path);  // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/78">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/88">MITRE, CWE-88</a> - Argument Injection or Modification </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection </li>\n  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from the FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#COMMAND_INJECTION">Potential Command Injection</a>\n  </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	cwe,owasp-a1,sans-top25-insecure	0	HTML	1576224549569	1576224549617	3	java
1035	Modulus results should not be checked for direct equality	S2197	\N	squid	<p>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for\nequality with a positive number (or a negative one) could result in unexpected results. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isOdd(int x) {\n  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isOdd(int x) {\n  return x % 2 != 0;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/xAHAAQ">CERT, NUM51-J.</a> - Do not assume that the remainder operator always returns a\n  nonnegative result for integral operands </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NQBi">CERT, INT10-C</a> - Do not assume a positive remainder when using the % operator\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/_YBLAQ">CERT, INT10-CPP.</a> - Do not assume a positive remainder when using the %\n  operator </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,suspicious	0	HTML	1576224549662	1576224549664	1	java
1089	"instanceof" operators that always return "true" or "false" should be removed	S1850	\N	squid	<p><code>instanceof</code> operators that always return <code>true</code> or <code>false</code> are either useless or the result of a misunderstanding\nwhich could lead to unexpected behavior in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  String name = null;\n\n  if (name instanceof String) { // Noncompliant; always false since name is null\n    //...\n  }\n\n  if(param instanceof Number) {  // Noncompliant; always true unless param is null, because param is an Integer\n    doSomething();\n  }\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  doSomething();\n...\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:squid:S2589} instead.</p>	2	\N	DEPRECATED	java	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224551261	1576224551262	2	java
1090	Abstract classes without fields should be converted to interfaces	S1610	\N	squid	<p>With Java 8's "default method" feature, any abstract class without direct or inherited field should be converted into an interface. However, this\nchange may not be appropriate in libraries or other applications where the class is intended to be used as an API.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	java8	0	HTML	1576224551263	1576224551264	1	java
1091	"switch" statements should end with "default" clauses	SwitchLastCaseIsDefaultCheck	S131	squid	<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If the <code>switch</code> parameter is an <code>Enum</code> and if all the constants of this enum are used in the <code>case</code> statements,\nthen no <code>default</code> clause is expected.</p>\n<p>Example:</p>\n<pre>\npublic enum Day {\n    SUNDAY, MONDAY\n}\n...\nswitch(day) {\n  case SUNDAY:\n    doSomething();\n    break;\n  case MONDAY:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP.</a> - Strive for logical completeness </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,misra	0	HTML	1576224551265	1576224551309	1	java
1092	"@Deprecated" code should not be used	CallToDeprecatedMethod	S1874	squid	<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n */\n@Deprecated\npublic class Fum { ... }\n\npublic class Foo {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n}\n\npublic class Bar extends Foo {\n  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method or explicitly mark it as @Deprecated\n}\n\npublic class Bar extends Fum {  // Noncompliant; Fum is deprecated\n\n  public void myMethod() {\n    Foo foo = new Foo();  // okay; the class isn't deprecated\n    foo.doTheThing();  // Noncompliant; doTheThing method is deprecated\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/477.html">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/KgAVAg">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert,cwe,obsolete	0	HTML	1576224551354	1576224551400	1	java
1149	Constructors should only call non-overridable methods	S1699	\N	squid	<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.</p>\n<p>For example:</p>\n<ul>\n  <li> The subclass class constructor starts by contract by calling the parent class constructor. </li>\n  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>\n  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a\n  <code>NullPointerException</code>) can result, because the fields aren't initialized yet. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n\n  public Parent () {\n    doSomething();  // Noncompliant\n  }\n\n  public void doSomething () {  // not final; can be overridden\n    ...\n  }\n}\n\npublic class Child extends Parent {\n\n  private String foo;\n\n  public Child(String foo) {\n    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized\n    this.foo = foo;\n  }\n\n  public void doSomething () {\n    System.out.println(this.foo.length());\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/MYYbAQ">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/TQBi">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or\n  destructors </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	cert,pitfall	0	HTML	1576224552636	1576224552680	1	java
1150	"null" should not be used with "Optional"	S2789	\N	squid	<p>The concept of <code>Optional</code> is that it will be used when <code>null</code> could cause errors. In a way, it replaces <code>null</code>,\nand when <code>Optional</code> is in use, there should never be a question of returning or receiving <code>null</code> from a call.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  if (optional != null) {  // Noncompliant\n    // do something with optional...\n  }\n}\n\n@Nullable // Noncompliant\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  optional.ifPresent(\n    // do something with optional...\n  );\n}\n\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return Optional.empty();\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	java8	0	HTML	1576224552724	1576224552726	2	java
1191	Jump statements should not be used unconditionally	S1751	\N	squid	<p>Having an unconditional <code>break</code>, <code>return</code> or <code>throw</code> in a loop renders it useless; the loop will only execute once\nand the loop structure itself is simply wasted keystrokes.</p>\n<p>Having an unconditional <code>continue</code> in a loop is itself wasted keystrokes.</p>\n<p>For these reasons, unconditional jump statements should never be used except for the final <code>return</code> in a function or method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i;\nfor (i = 0; i &lt; 10; ++i) {\n  System.out.println("i is " + i);\n  break;  // loop only executes once\n}\n\nfor (i = 0; i &lt; 10; ++i) {\n  System.out.println("i is " + i);\n  continue;  // this is meaningless; the loop would continue anyway\n}\n\nfor (i = 0; i &lt; 10; ++i) {\n  System.out.println("i is " + i);\n  return;  // loop only executes once\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i;\nfor (i = 0; i &lt; 10; ++i) {\n  System.out.println("i is " + i);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code. </li>\n  <li> MISRA C++:2008, 0-1-1 - A <em>project</em> shall not contain <em>unreachable code</em>. </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code. </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,misra,unused	0	HTML	1576224553878	1576224553925	1	java
1192	"for" loop increment clauses should modify the loops' counters	S1994	\N	squid	<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) {  // Noncompliant\n  // ...\n  i++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++, j++) {\n  // ...\n}\n</pre>\n<p>Or</p>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n  j++;\n}\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	confusing	0	HTML	1576224553972	1576224553975	1	java
1193	"@NonNull" values should not be set to null	S2637	\N	squid	<p>Fields, parameters and return values marked <code>@NotNull</code>, <code>@NonNull</code>, or <code>@Nonnull</code> are assumed to have non-null\nvalues and are not typically null-checked before use. Therefore setting one of these values to <code>null</code>, or failing to set such a class field\nin a constructor, could cause <code>NullPointerException</code>s at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MainClass {\n\n  @Nonnull\n  private String primary;\n  private String secondary;\n\n  public MainClass(String color) {\n    if (color != null) {\n      secondary = null;\n    }\n    primary = color;  // Noncompliant; "primary" is Nonnull but could be set to null here\n  }\n\n  public MainClass() { // Noncompliant; "primary" Nonnull" but is not initialized\n  }\n\n  @Nonnull\n  public String indirectMix() {\n    String mix = null;\n    return mix;  // Noncompliant; return value is Nonnull, but null is returned.}}\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert,cwe	0	HTML	1576224553979	1576224553987	2	java
1036	Multiple loops over the same set should be combined	S3047	\N	squid	<p>When a method loops multiple over the same set of data, whether it's a list or a set of numbers, it is highly likely that the method could be made\nmore efficient by combining the loops into a single set of iterations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n  }\n  for (String str : strings) {  // Noncompliant\n    doStep2(str);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n    doStep2(str);\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	performance	0	HTML	1576224549668	1576224549671	1	java
1037	Values passed to LDAP queries should be sanitized	S2078	\N	squid	<p>Applications that execute LDAP queries should neutralize any externally-provided values in those commands. Failure to do so could allow an attacker\nto include input that changes the query so that unintended commands are executed, or sensitive data is exposed. Unhappily LDAP doesn't provide any\nprepared statement interfaces like SQL to easily remove this risk. So each time a LDAP query is built dynamically this rule logs an issue.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic User lookupUser(String username, String base, String [] requestedAttrs) {\n\n  // ...\n  DirContext dctx = new InitialDirContext(env);\n\n  SearchControls sc = new SearchControls();\n  sc.setReturningAttributes(requestedAttrs);  // Noncompliant\n  sc.setSearchScope(SearchControls.SUBTREE_SCOPE);\n\n  String filter = "(&amp;(objectClass=user)(sAMAccountName=" + username + "))";\n\n  NamingEnumeration results = dctx.search(base,  // Noncompliant\n        filter,  // Noncompliant; parameter concatenated directly into string\n        sc);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic User lookupUser(String username, String base, String [] requestedAttrs) {\n\n  // ...\n  DirContext dctx = new InitialDirContext(env);\n\n  SearchControls sc = new SearchControls();\n  sc.setReturningAttributes(buildAttrFilter(requestedAttrs));  // Compliant; method presumably scrubs input\n  sc.setSearchScope(SearchControls.SUBTREE_SCOPE);\n\n  String useBase = "ou=People";\n  if (! base.startsWith(useBase)) {\n    useBase = base;\n  }\n\n  String filter = "(&amp;(objectClass=user)(sAMAccountName=" + username.replaceAll("[()| ]","") + "))";\n\n  NamingEnumeration results = dctx.search(useBase,  // Compliant; originally value used conditionally\n        filter,  // Compliant; parameter NOT concatenated directly into string\n        sc);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/90">MITRE CWE-90</a> - Improper Neutralization of Special Elements used in an LDAP Query ('LDAP\n  Injection') </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/CgLEAw">CERT, IDS54-J.</a> - Prevent LDAP injection </li>\n  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#LDAP_INJECTION">Potential LDAP Injection</a> </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	cert,cwe,owasp-a1	0	HTML	1576224549675	1576224549720	3	java
1038	"wait" should not be called when multiple locks are held	S3046	\N	squid	<p>When two locks are held simultaneously, a <code>wait</code> call only releases one of them. The other will be held until some other thread requests\na lock on the awaited object. If no unrelated code tries to lock on that object, then all other threads will be locked out, resulting in a\ndeadlock.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nsynchronized (this.mon1) {  // threadB can't enter this block to request this.mon2 lock &amp; release threadA\n\tsynchronized (this.mon2) {\n\t\tthis.mon2.wait();  // Noncompliant; threadA is stuck here holding lock on this.mon1\n\t}\n}\n</pre>	4	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	deadlock,multi-threading	0	HTML	1576224549770	1576224549771	2	java
1039	Magic numbers should not be used	S109	\N	squid	<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n\tfor(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	brain-overload	0	HTML	1576224549774	1576224549776	1	java
1040	Standard outputs should not be used directly to log anything	S106	\N	squid	<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println("My Message");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log("My Message");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/RoElAQ">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	bad-practice,cert	0	HTML	1576224549781	1576224549783	1	java
1093	"deleteOnExit" should not be used	CallToFileDeleteOnExitMethod	S2308	squid	<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>\n<ul>\n  <li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. </li>\n  <li> For each file handler, the memory associated with the handler is released only at the end of the process. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile file = new File("file.txt");\nfile.deleteOnExit();  // Noncompliant\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	performance	0	HTML	1576224551446	1576224551448	1	java
1094	Close curly brace and the next "else", "catch" and "finally" keywords should be located on the same line	RightCurlyBraceSameLineAsNextBlockCheck	S1107	squid	<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or\n<code>finally</code> keywords.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {                               // Noncompliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {                            // Noncompliant\n    closeConnection();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  } else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  } finally {\n    closeConnection();\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224551453	1576224551455	1	java
1095	"ThreadLocal.withInitial" should be preferred	S4065	\N	squid	<p>Java 8 Introduced <code>ThreadLocal.withInitial</code> which is a simpler alternative to creating an anonymous inner class to initialise a\n<code>ThreadLocal</code> instance.</p>\n<p>This rule raises an issue when a <code>ThreadLocal</code> anonymous inner class can be replaced by a call to\n<code>ThreadLocal.withInitial</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal =\n    new ThreadLocal&lt;List&lt;String&gt;&gt;() { // Noncompliant\n        @Override\n        protected List&lt;String&gt; initialValue() {\n            return new ArrayList&lt;String&gt;();\n        }\n    };\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal = ThreadLocal.withInitial(ArrayList::new);\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	java8	0	HTML	1576224551460	1576224551463	1	java
1096	Redundant casts should not be used	S1905	\N	squid	<p>Unnecessary casting expressions make the code harder to read and understand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void example() {\n  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void example() {\n  for (Foo obj : getFoos()) {\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Casting may be required to distinguish the method to call in the case of overloading:</p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n\n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); //call the first method so cast is not redundant.\n  }\n\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	clumsy,redundant	0	HTML	1576224551466	1576224551468	1	java
1151	Arrays should not be created for varargs parameters	S3878	\N	squid	<p>There's no point in creating an array solely for the purpose of passing it as a varargs (<code>...</code>) argument; varargs <em>is</em> an array.\nSimply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...</code>\nis expected makes the intent ambiguous: Is the array supposed to be one object ora collection of objects?</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(new String[] { "s1", "s2"});  // Noncompliant: unnecessary\n  doTheThing(new String[12]);  // Compliant\n  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous\n  // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing("s1", "s2");\n  doTheThing(new String[12]);\n  doTheOtherThing((Object[]) new String[8]);\n   // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	clumsy	0	HTML	1576224552728	1576224552729	1	java
1152	Thread.run() should not be called directly	S1217	\N	squid	<p>The purpose of the <code>Thread.run()</code> method is to execute code in a separate, dedicated thread. Calling this method directly doesn't make\nsense because it causes its code to be executed in the current thread. </p>\n<p>To get the expected behavior, call the <code>Thread.start()</code> method instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.run(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.start(); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/572.html">MITRE, CWE-572</a> - Call to Thread run() instead of start() </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/KQAiAg">CERT THI00-J.</a> - Do not invoke Thread.run() </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cert,cwe,multi-threading	0	HTML	1576224552731	1576224552732	2	java
1153	Methods returns should not be invariant	S3516	\N	squid	<p>When a method is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.</p>\n<p>This rule raises an issue when a method contains several <code>return</code> statements that all return the same value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint foo(int a) {\n  int b = 12;\n  if (a == 1) {\n    return b;\n  }\n  return b;  // Noncompliant\n}\n</pre>	4	\N	READY	java	LINEAR	2min	\N	Per number of return statements	\N	0	HTML	1576224552734	1576224552735	1	java
1194	Java 8's "Files.exists" should not be used	S3725	\N	squid	<p>The <code>Files.exists</code> method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files\nthat don't actually exist. </p>\n<p>The same goes for <code>Files.notExists</code>, <code>Files.isDirectory</code> and <code>Files.isRegularFile</code>.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPath myPath;\nif(java.nio.Files.exists(myPath)) {  // Noncompliant\n // do something\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPath myPath;\nif(myPath.toFile().exists())) {\n // do something\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://bugs.openjdk.java.net/browse/JDK-8153414">https://bugs.openjdk.java.net/browse/JDK-8153414</a> </li>\n  <li> <a href="https://bugs.openjdk.java.net/browse/JDK-8153414">https://bugs.openjdk.java.net/browse/JDK-8154077</a> </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	java8,performance	0	HTML	1576224553991	1576224553993	1	java
1195	"=+" should not be used instead of "+="	S2757	\N	squid	<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,\n<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when\nthere is at least one whitespace character after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget =- num;  // Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; // Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget = -num;  // Compliant; intent to assign inverse value of num is clear\ntarget += num;\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224553995	1576224553996	2	java
1196	Inappropriate regular expressions should not be used	S2639	\N	squid	<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.</p>\n<p>The following should not be used as regular expressions:</p>\n<ul>\n  <li> <code>.</code> - matches any single character. Used in <code>replaceAll</code>, it matches <em>everything</em> </li>\n  <li> <code>|</code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters </li>\n  <li> <code>File.separator</code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = "/File|Name.txt";\n\nString clean = str.replaceAll(".",""); // Noncompliant; probably meant to remove only dot chars, but returns an empty string\nString clean2 = str.replaceAll("|","_"); // Noncompliant; yields _/_F_i_l_e_|_N_a_m_e_._t_x_t_\nString clean3 = str.replaceAll(File.separator,""); // Noncompliant; exception on Windows\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224553998	1576224553999	2	java
1041	"Externalizable" classes should have no-arguments constructors	S2060	\N	squid	<p>An <code>Externalizable</code> class is one which handles its own <code>Serialization</code> and deserialization. During deserialization, the first\nstep in the process is a default instantiation using the class' no-argument constructor. Therefore an <code>Externalizable</code> class without a\nno-arg constructor cannot be deserialized.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Tomato implements Externalizable {  // Noncompliant; no no-arg constructor\n\n  public Tomato (String color, int weight) { ... }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Tomato implements Externalizable {\n\n  public Tomato() { ... }\n  public Tomato (String color, int weight) { ... }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	\N	0	HTML	1576224549785	1576224549787	2	java
1042	Ints and longs should not be shifted by zero or more than their number of bits-1	S2183	\N	squid	<p>Since an <code>int</code> is a 32-bit variable, shifting by more than +/-31 is confusing at best and an error at worst. Shifting an\n<code>int</code> by 32 is the same as shifting it by 0, and shifting it by 33 is the same as shifting it by 1.</p>\n<p>Similarly, shifting a <code>long</code> by +/-64 is the same as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int shift(int a) {\n  return a &lt;&lt; 48;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int shift(int a) {\n  return a &lt;&lt; 16;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when the shift by zero is obviously for cosmetic reasons:</p>\n<ul>\n  <li> When the value shifted is a literal. </li>\n  <li> When there is a similar shift at the same position on line before or after. E.g.: </li>\n</ul>\n<pre>\nbytes[loc+0] = (byte)(value &gt;&gt; 8);\nbytes[loc+1] = (byte)(value &gt;&gt; 0);\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert	0	HTML	1576224549790	1576224549792	2	java
1043	"readResolve" methods should be inheritable	S2062	\N	squid	<p>The <code>readResolve()</code> method allows final tweaks to the state of an object during deserialization. Non-final classes which implement\n<code>readResolve()</code>, should not set its visibility to <code>private</code> since it will then be unavailable to child classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  private Object readResolve() throws ObjectStreamException  // Noncompliant\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {  // No access to parent's readResolve() method\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {\n  //...\n}\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224549794	1576224549796	1	java
1044	Classes should not have too many "static" imports	S3030	\N	squid	<p>Importing a class statically allows you to use its <code>public static</code> members without qualifying them with the class name. That can be\nhandy, but if you import too many classes statically, your code can become confusing and difficult to maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value: 4</p>\n<pre>\nimport static java.lang.Math.*;\nimport static java.util.Collections.*;\nimport static com.myco.corporate.Constants.*;\nimport static com.myco.division.Constants.*;\nimport static com.myco.department.Constants.*;  // Noncompliant\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	brain-overload	0	HTML	1576224549798	1576224549799	1	java
1097	Extensions and implementations should not be redundant	S1939	\N	squid	<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>\n<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also\nimplicitly implement its parents and there's no need to do so explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo\n    extends Object // Noncompliant\n    implements MyFace, MyOtherFace {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo implements MyOtherFace {\n  //...\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	1min	\N	clumsy	0	HTML	1576224551472	1576224551473	1	java
1098	Variables should not be declared before they are relevant	S1941	\N	squid	<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	brain-overload	0	HTML	1576224551476	1576224551477	1	java
1099	Classes should not have too many fields	S1820	\N	squid	<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.</p>\n<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	1h	\N	brain-overload	0	HTML	1576224551478	1576224551479	1	java
1100	A field should not duplicate the name of its containing class	S1700	\N	squid	<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() // what does this return?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n\n</pre>\n<h2>Exceptions</h2>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	brain-overload	0	HTML	1576224551483	1576224551484	1	java
1154	"switch" statements should not contain non-case labels	S1219	\N	squid	<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled "for" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	misra,suspicious	0	HTML	1576224552737	1576224552780	1	java
1155	Zero should not be a possible denominator	S3518	\N	squid	<p>If the denominator to a division or modulo operation is zero it would result in a fatal error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n  }\n  z = 1 / z; // Noncompliant, possible division by zero\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n    z = 1;\n  }\n  z = 1 / z;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://cwe.mitre.org/data/definitions/369.html">MITRE, CWE-369</a> - Divide by zero </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/KAGyAw">CERT, NUM02-J.</a> - Ensure that division and remainder operations do not\n  result in divide-by-zero errors </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/cAI">CERT, INT33-C.</a> - Ensure that division and remainder operations do not result\n  in divide-by-zero errors </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,denial-of-service	0	HTML	1576224552825	1576224552827	2	java
1156	Private fields only used as local variables in methods should become local variables	S1450	\N	squid	<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int singularField;\n\n  public void doSomething(int y) {\n    singularField = y + 5;\n    ...\n    if(singularField == 0 {...}\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int singularField = y + 5;\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    int singularField = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224552829	1576224552830	1	java
1197	Method overrides should not change contracts	S2638	\N	squid	<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> https://en.wikipedia.org/wiki/Liskov_substitution_principle </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	suspicious	0	HTML	1576224554000	1576224554001	1	java
1198	Track uses of "@SuppressWarnings" annotations	S1309	\N	squid	<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter value of "unused" :</p>\n<pre>\n@SuppressWarnings("unused")\n@SuppressWarnings("unchecked")  // Noncompliant\n</pre>	0	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	\N	0	HTML	1576224554002	1576224554003	1	java
1199	"switch" statements should have at least 3 "case" clauses	S1301	\N	squid	<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>\n  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>\n  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	bad-practice,misra	0	HTML	1576224554005	1576224554006	1	java
1200	Variables should not be self-assigned	S1656	\N	squid	<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	3min	\N	cert	0	HTML	1576224554007	1576224554008	2	java
1045	Custom serialization method signatures should meet requirements	S2061	\N	squid	<p>Writers of <code>Serializable</code> classes can choose to let Java's automatic mechanisms handle serialization and deserialization, or they can\nchoose to handle it themselves by implementing specific methods. However, if the signatures of those methods are not exactly what is expected, they\nwill be ignored and the default serialization mechanisms will kick back in. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Watermelon implements Serializable {\n  // ...\n  void writeObject(java.io.ObjectOutputStream out)// Noncompliant; not private\n        throws IOException\n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n  {...}\n\n  public void readObjectNoData()  // Noncompliant; not private\n  {...}\n\n  static Object readResolve() throws ObjectStreamException  // Noncompliant; this method may have any access modifier, may not be static\n\n  Watermelon writeReplace() throws ObjectStreamException // Noncompliant; this method may have any access modifier, but must return Object\n  {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Watermelon implements Serializable {\n  // ...\n  private void writeObject(java.io.ObjectOutputStream out)\n        throws IOException\n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n        throws IOException, ClassNotFoundException\n  {...}\n\n  private void readObjectNoData()\n        throws ObjectStreamException\n  {...}\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  private Object writeReplace() throws ObjectStreamException\n  {...}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/4gAMAg">CERT, SER01-J.</a> - Do not deviate from the proper signatures of serialization\n  methods </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert	0	HTML	1576224549803	1576224549852	2	java
1046	Silly math should not be performed	S2185	\N	squid	<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or\n<code>Math.floor</code> is silly because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,\n<code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Operation</th>\n      <th>Value</th>\n    </tr>\n    <tr>\n      <td>acos</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>asin</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>atan2</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cbrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>cos</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>cosh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>exp</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>expm1</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>log</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>log10</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>sin</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sinh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>sqrt</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>tan</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>tanh</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <td>toDegrees</td>\n      <td>0.0 or 1.0</td>\n    </tr>\n    <tr>\n      <td>toRadians</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a) {\n  double floor = Math.floor((double)a); // Noncompliant\n  double ceiling = Math.ceil(4.2);  // Noncompliant\n  double arcTan = Math.atan(0.0);  // Noncompliant\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	clumsy	0	HTML	1576224549898	1576224549945	1	java
1047	Math operands should be cast before assignment	S2184	\N	squid	<p>When arithmetic is performed on integers, the result will always be an integer. You can assign that result to a <code>long</code>,\n<code>double</code>, or <code>float</code> with automatic type conversion, but having started as an <code>int</code> or <code>long</code>, the result\nwill likely not be what you expect. </p>\n<p>For instance, if the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost before the\nassignment. Likewise, if the result of multiplication is assigned to a <code>long</code>, it may have already overflowed before the assignment.</p>\n<p>In either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the\noperation takes place.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat twoThirds = 2/3; // Noncompliant; int division. Yields 0.0\nlong millisInYear = 1_000*3_600*24*365; // Noncompliant; int multiplication. Yields 1471228928\nlong bigNum = Integer.MAX_VALUE + 2; // Noncompliant. Yields -2147483647\nlong bigNegNum =  Integer.MIN_VALUE-1; //Noncompliant, gives a positive result instead of a negative one.\nDate myDate = new Date(seconds * 1_000); //Noncompliant, won't produce the expected result if seconds &gt; 2_147_483\n...\npublic long compute(int factor){\n  return factor * 10_000;  //Noncompliant, won't produce the expected result if factor &gt; 214_748\n}\n\npublic float compute2(long factor){\n  return factor / 123;  //Noncompliant, will be rounded to closest long integer\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfloat twoThirds = 2f/3; // 2 promoted to float. Yields 0.6666667\nlong millisInYear = 1_000L*3_600*24*365; // 1000 promoted to long. Yields 31_536_000_000\nlong bigNum = Integer.MAX_VALUE + 2L; // 2 promoted to long. Yields 2_147_483_649\nlong bigNegNum =  Integer.MIN_VALUE-1L; // Yields -2_147_483_649\nDate myDate = new Date(seconds * 1_000L);\n...\npublic long compute(int factor){\n  return factor * 10_000L;\n}\n\npublic float compute2(long factor){\n  return factor / 123f;\n}\n</pre>\n<p>or</p>\n<pre>\nfloat twoThirds = (float)2/3; // 2 cast to float\nlong millisInYear = (long)1_000*3_600*24*365; // 1_000 cast to long\nlong bigNum = (long)Integer.MAX_VALUE + 2;\nlong bigNegNum =  (long)Integer.MIN_VALUE-1;\nDate myDate = new Date((long)seconds * 1_000);\n...\npublic long compute(long factor){\n  return factor * 10_000;\n}\n\npublic float compute2(float factor){\n  return factor / 123;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 5-0-8 - An explicit integral or floating-point conversion shall not increase the size of the underlying type of a cvalue\n  expression. </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/190">MITRE, CWE-190</a> - Integer Overflow or Wraparound </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/woIyAQ">CERT, NUM50-J.</a> - Convert integers to floating point for floating-point\n  operations </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/AxE">CERT, INT18-C.</a> - Evaluate integer expressions in a larger size before\n  comparing or assigning to that size </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/1IAyAQ">CERT, INT18-CPP.</a> - Evaluate integer expressions in a larger size before\n  comparing or assigning to that size </li>\n  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Risky Resource Management </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,misra,overflow,sans-top25-risky	0	HTML	1576224549990	1576224550036	2	java
1048	Comparators should be "Serializable"	S2063	\N	squid	<p>A non-serializable <code>Comparator</code> can prevent an otherwise-<code>Serializable</code> ordered collection from being serializable. Since the\noverhead to make a <code>Comparator</code> serializable is usually low, doing so can be considered good defensive programming.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt; {  // Noncompliant\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt;, Serializable {\n  private static final long serialVersionUID = 1;\n\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	pitfall,serialization	0	HTML	1576224550080	1576224550080	1	java
1101	Simple class names should be used	S1942	\N	squid	<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	confusing,redundant	0	HTML	1576224551485	1576224551486	1	java
1102	Classes and methods that rely on the default system encoding should not be used	S1943	\N	squid	<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its "home" environment. But that code may\nbreak for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to\nreproduce when it's time to fix them.</p>\n<p>This rule detects uses of the following classes and methods:</p>\n<ul>\n  <li> <code>FileReader</code> </li>\n  <li> <code>FileWriter</code> </li>\n  <li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument\n    <ul>\n      <li> <code>String(byte[] bytes)</code> </li>\n      <li> <code>String(byte[] bytes, int offset, int length)</code> </li>\n    </ul> </li>\n  <li> <code>String.getBytes()</code> </li>\n  <li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code> </li>\n  <li> <code>InputStreamReader(InputStream in)</code> </li>\n  <li> <code>OutputStreamWriter(OutputStream out)</code> </li>\n  <li> <code>ByteArrayOutputStream.toString()</code> </li>\n  <li> Some <code>Formatter</code> constructors\n    <ul>\n      <li> <code>Formatter(String fileName)</code> </li>\n      <li> <code>Formatter(File file)</code> </li>\n      <li> <code>Formatter(OutputStream os)</code> </li>\n    </ul> </li>\n  <li> Some <code>Scanner</code> constructors\n    <ul>\n      <li> <code>Scanner(File source)</code> </li>\n      <li> <code>Scanner(Path source)</code> </li>\n      <li> <code>Scanner(InputStream source)</code> </li>\n    </ul> </li>\n  <li> Some <code>PrintStream</code> constructors\n    <ul>\n      <li> <code>PrintStream(File file)</code> </li>\n      <li> <code>PrintStream(OutputStream out)</code> </li>\n      <li> <code>PrintStream(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintStream(String fileName)</code> </li>\n    </ul> </li>\n  <li> Some <code>PrintWriter</code> constructors\n    <ul>\n      <li> <code>PrintWriter(File file)</code> </li>\n      <li> <code>PrintWriter(OutputStream out)</code> </li>\n      <li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintWriter(String fileName)</code> </li>\n    </ul> </li>\n  <li> methods from Apache commons-io library which accept an encoding argument when that argument is null, and overloads of those methods that omit\n  the encoding argument\n    <ul>\n      <li> <code>IOUtils.copy(InputStream, Writer)</code> </li>\n      <li> <code>IOUtils.copy(Reader, OutputStream)</code> </li>\n      <li> <code>IOUtils.readLines(InputStream)</code> </li>\n      <li> <code>IOUtils.toByteArray(Reader)</code> </li>\n      <li> <code>IOUtils.toByteArray(String)</code> </li>\n      <li> <code>IOUtils.toCharArray(InputStream)</code> </li>\n      <li> <code>IOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))</code> </li>\n      <li> <code>IOUtils.toString(byte[])</code> </li>\n      <li> <code>IOUtils.toString(URI)</code> </li>\n      <li> <code>IOUtils.toString(URL)</code> </li>\n      <li> <code>IOUtils.write(char[], OutputStream)</code> </li>\n      <li> <code>IOUtils.write(CharSequence, OutputStream)</code> </li>\n      <li> <code>IOUtils.writeLines(Collection, String, OutputStream)</code> </li>\n      <li> <code>FileUtils.readFileToString(File)</code> </li>\n      <li> <code>FileUtils.readLines(File)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence, boolean)</code> </li>\n      <li> <code>FileUtils.writeStringToFile(File, String)</code> </li>\n    </ul> </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/FoL5AQ">CERT, STR04-J.</a> - Use compatible character encodings when communicating\n  string data between JVMs </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/JgAWCQ">CERT, STR50-J.</a> - Use the appropriate method for counting characters in a\n  string </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert,i18n,unpredictable	0	HTML	1576224551487	1576224551532	1	java
1103	"indexOf" checks should use a start position	S2912	\N	squid	<p>One thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers, and the proper\nchoice of <code>indexOf</code> methods can help move code from confusing to clear.</p>\n<p>If you need to see whether a substring is located beyond a certain point in a string, you can test the <code>indexOf</code> the substring versus\nthe target point, or you can use the version of <code>indexOf</code> which takes a starting point argument. The latter is arguably clearer because the\nresult is tested against -1, which is an easily recognizable "not found" indicator.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString name = "ismael";\n\nif (name.indexOf("ae") &gt; 2) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString name = "ismael";\n\nif (name.indexOf("ae", 2) &gt; -1) {\n  // ...\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	confusing	0	HTML	1576224551576	1576224551577	1	java
1104	Fields in a "Serializable" class should either be transient or serializable	S1948	\N	squid	<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is\nnever explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly\n<code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In\ngeneral a <code>Serializable</code> class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized. </p>\n<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they\ncould be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the\nclass.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant; Address isn't serializable\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Address implements Serializable {\n  private static final long serialVersionUID = 2405172041950251807L;\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the\nresponsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>\n<pre>\n private void writeObject(java.io.ObjectOutputStream out)\n     throws IOException\n private void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/594.html">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk </li>\n  <li> <a href="http://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html">Oracle Java 6, Serializable</a> </li>\n  <li> <a href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html">Oracle Java 7, Serializable</a> </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	cwe,serialization	0	HTML	1576224551579	1576224551624	1	java
1105	A close curly brace should be located at the beginning of a line	RightCurlyBraceStartLineCheck	S1109	squid	<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition) {\n  doSomething();}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224551668	1576224551669	1	java
1106	Boolean checks should not be inverted	S1940	\N	squid	<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( !(a == 2)) { ...}  // Noncompliant\nboolean b = !(i &lt; 10);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a != 2) { ...}\nboolean b = (i &gt;= 10);\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	pitfall	0	HTML	1576224551670	1576224551671	1	java
1157	Track lack of copyright and license headers	S1451	\N	squid	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>	4	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224552832	1576224552833	1	java
1158	"@RequestMapping" methods should be "public"	S3751	\N	squid	<p>A <code>@Controller</code> method with a <code>@RequestMapping</code> annotation will be called to handle matching web requests. That will happen\neven if the method is <code>private</code>, because Spring invokes such methods via reflection, without checking visibility. </p>\n<p>So marking a sensitive method <code>private</code> may seem like a good way to control how such code is called. Unfortunately, not all Spring\nframeworks ignore visibility in this way. For instance, if you've tried to control web access to your sensitive, <code>private</code>,\n<code>@RequestMapping</code> method by marking it <code>@Secured</code> ... it will still be called, whether or not the user is authorized to access\nit. That's because AOP proxies are not applied to non-public methods. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@RequestMapping("/greet", method = GET)\nprivate String greet(String greetee) {  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@RequestMapping("/greet", method = GET)\npublic String greet(String greetee) {\n</pre>	4	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	spring	0	HTML	1576224552838	1576224552839	3	java
1201	Java parser failure	ParsingError	S2260	squid	<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	suspicious	0	HTML	1576224554009	1576224554010	1	java
1202	Multiple variables should not be declared on the same line	S1659	\N	squid	<p>Declaring multiple variable on one line is difficult to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator\n  respectively </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/7wHEAw">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/VgU">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/fAAhAQ">CERT, DCL04-CPP.</a> - Do not declare more than one variable per declaration\n  </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	cert,convention,misra	0	HTML	1576224554011	1576224554012	1	java
1203	Consumed Stream pipelines should not be reused	S3959	\N	squid	<p>Stream operations are divided into intermediate and terminal operations, and are combined to form stream pipelines. After the terminal operation is\nperformed, the stream pipeline is considered consumed, and cannot be used again. Such a reuse will yield unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStream&lt;Widget&gt; pipeline = widgets.stream().filter(b -&gt; b.getColor() == RED);\nint sum1 = pipeline.sum();\nint sum2 = pipeline.mapToInt(b -&gt; b.getWeight()).sum(); // Noncompliant\n</pre>\n<h2>See</h2>\n<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps">Stream Operations</a></p>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	java8	0	HTML	1576224554013	1576224554014	2	java
1204	The Object.finalize() method should not be called	ObjectFinalizeCheck	S1111	squid	<p>According to the official javadoc documentation, this Object.finalize() is called by the garbage collector on an object when garbage collection\ndetermines that there are no more references to the object. Calling this method explicitly breaks this contract and so is misleading. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void dispose() throws Throwable {\n  this.finalize();                       // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/586.html">MITRE, CWE-586</a> - Explicit Call to Finalize() </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	cert,cwe	0	HTML	1576224554015	1576224554015	2	java
1049	"Serializable" inner classes of non-serializable classes should be "static"	S2066	\N	squid	<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is not\nserializable, then serialization will fail, resulting in a runtime error. </p>\n<p>Making the inner class <code>static</code> (i.e. "nested") avoids this problem, therefore inner classes should be <code>static</code> if possible.\nHowever, you should be aware that there are semantic differences between an inner class and a nested one: </p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Pomegranate {\n  // ...\n\n  public class Seed implements Serializable {  // Noncompliant; serialization will fail\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Pomegranate {\n  // ...\n\n  public static class Seed implements Serializable {\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/O4CpAQ">CERT SER05-J.</a> - Do not serialize instances of inner classes </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert,serialization	0	HTML	1576224550081	1576224550082	2	java
1050	Raw byte values should not be used in bitwise operations in combination with shifts	S3034	\N	squid	<p>When reading bytes in order to build other primitive values such as <code>int</code>s or <code>long</code>s, the <code>byte</code> values are\nautomatically promoted, but that promotion can have unexpected results.</p>\n<p>For instance, the binary representation of the integer 640 is <code>0b0000_0010_1000_0000</code>, which can also be written with the array of\n(unsigned) bytes <code>[2, 128]</code>. However, since Java uses two's complement, the representation of the integer in signed bytes will be <code>[2,\n-128]</code> (because the <code>byte</code> <code>0b1000_0000</code> is promoted to the <code>int</code>\n<code>0b1111_1111_1111_1111_1111_1111_1000_0000</code>). Consequently, trying to reconstruct the initial integer by shifting and adding the values of\nthe bytes without taking care of the sign will not produce the expected result. </p>\n<p>To prevent such accidental value conversion, use bitwise and (<code>&amp;</code>) to combine the <code>byte</code> value with <code>0xff</code>\n(255) and turn all the higher bits back off.</p>\n<p>This rule raises an issue any time a <code>byte</code> value is used as an operand without <code>&amp; 0xff</code>, when combined with shifts.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  int intFromBuffer() {\n    int result = 0;\n    for (int i = 0; i &lt; 4; i++) {\n      result = (result &lt;&lt; 8) | readByte(); // Noncompliant\n    }\n    return result;\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  int intFromBuffer() {\n    int result = 0;\n    for (int i = 0; i &lt; 4; i++) {\n      result = (result &lt;&lt; 8) | (readByte() &amp; 0xff);\n    }\n    return result;\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SAHEAw">CERT, NUM52-J.</a> - Be aware of numeric promotion behavior </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert	0	HTML	1576224550124	1576224550168	2	java
1107	"close()" calls should not be redundant	S4087	\N	squid	<p>Java 7's try-with-resources structure automatically handles closing the resources that the <code>try</code> itself opens. Thus, adding an explicit\n<code>close()</code> call is redundant and potentially confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n  writer.close();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	redundant	0	HTML	1576224551672	1576224551673	1	java
1108	"equals(Object obj)" and "hashCode()" should be overridden in pairs	S1206	\N	squid	<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>\n<blockquote>\n  <p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two\n  objects must produce the same integer result. </p>\n  <p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the\n  <code>hashCode</code> method on each of the two objects must produce distinct integer results.</p>\n  <p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of\n  hashtables.</p>\n</blockquote>\n<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {    // Noncompliant - should also override "hashCode()"\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {    // Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n  @Override\n  public int hashCode() {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/581.html">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/EYYbAQ">CERT, MET09-J.</a> - Classes that define an equals() method must also define a\n  hashCode() method </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert,cwe	0	HTML	1576224551675	1576224551719	2	java
1109	Classes should not have too many methods	S1448	\N	squid	<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	1h	\N	brain-overload	0	HTML	1576224551764	1576224551765	1	java
1110	Classes should not be loaded dynamically	S2658	\N	squid	<p>Dynamically loaded classes could contain malicious code executed by a static class initializer. I.E. you wouldn't even have to instantiate or\nexplicitly invoke methods on such classes to be vulnerable to an attack.</p>\n<p>This rule raises an issue for each use of dynamic class loading.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString className = System.getProperty("messageClassName");\nClass clazz = Class.forName(className);  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top 10 2013 Category A1</a> - Injection </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	45min	\N	cwe,owasp-a1	0	HTML	1576224551768	1576224551769	3	java
1159	"equals(Object obj)" should be overridden along with the "compareTo(T obj)" method	S1210	\N	squid	<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>\n<blockquote>\n  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>\n  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>\n  <p>The recommended language is "Note: this class has a natural ordering that is inconsistent with equals." </p>\n</blockquote>\n<p>If this rule is violated, weird and unpredictable failures can occur.</p>\n<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it has relied on\n<code>equals()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224552842	1576224552843	1	java
1160	Generic wildcard types should not be used in return parameters	S1452	\N	squid	<p>It is highly recommended <strong>not</strong> to use wildcard types as return types. Because the type inference rules are fairly complex it is\nunlikely the user of that API will know how to use it correctly. </p>\n<p>Let's take the example of method returning a "List&lt;? extends Animal&gt;". Is it possible on this list to add a Dog, a Cat, ... we simply don't\nknow. And neither does the compiler, which is why it will not allow such a direct use. The use of wildcard types should be limited to method\nparameters.</p>\n<p>This rule raises an issue when a method returns a wildcard type. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;? extends Animal&gt; getAnimals(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;Animal&gt; getAnimals(){...}\n</pre>\n<p>or</p>\n<pre>\nList&lt;Dog&gt; getAnimals(){...}\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	pitfall	0	HTML	1576224552845	1576224552847	1	java
1205	Intermediate Stream methods should not be left unused	S3958	\N	squid	<p>There are two types of stream operations: intermediate operations, which return another stream, and terminal operations, which return something\nother than a stream. Intermediate operations are lazy, meaning they aren't actually executed until and unless a terminal stream operation is performed\non their results. Consequently if the result of an intermediate stream operation is not fed to a terminal operation, it serves no purpose, which is\nalmost certainly an error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nwidgets.stream().filter(b -&gt; b.getColor() == RED); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint sum = widgets.stream()\n                      .filter(b -&gt; b.getColor() == RED)\n                      .mapToInt(b -&gt; b.getWeight())\n                      .sum();\nStream&lt;Widget&gt; pipeline = widgets.stream()\n                                 .filter(b -&gt; b.getColor() == GREEN)\n                                 .mapToInt(b -&gt; b.getWeight());\nsum = pipeline.sum();\n</pre>\n<h2>See</h2>\n<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps">Stream Operations</a></p>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	java8	0	HTML	1576224554017	1576224554018	2	java
1206	"Preconditions" and logging arguments should not require evaluation	S2629	\N	squid	<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions</code> check can result in a\nperformance penalty. That's because whether or not they're needed, each argument must be resolved before the method is actually called.</p>\n<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed\nevery time the method is called, whether or not the log level is low enough to show the message.</p>\n<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions</code> conditions check and logging\ncalls.</p>\n<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,\nthen <code>Preconditions</code> should be skipped altoghether, and the relevant exception should be conditionally thrown instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlogger.log(Level.DEBUG, "Something went wrong: " + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages\n\nlogger.fine("An exception occurred with message: " + message); // Noncompliant\n\nLOG.error("Unable to open file " + csvPath, e);  // Noncompliant\n\nPreconditions.checkState(a &gt; 0, "Arg must be positive, but got " + a);  // Noncompliant. String concatenation performed even when a &gt; 0\n\nPreconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition\n\nPreconditions.checkState(condition, "message: %s", formatMessage());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(Level.SEVERE, "Something went wrong: {0} ", message);  // String formatting only applied if needed\n\nlogger.fine("An exception occurred with message: {}", message);  // SLF4J, Log4j\n\nlogger.log(Level.SEVERE, () -&gt; "Something went wrong: " + message); // since Java 8, we can use Supplier , which will be evaluated lazily\n\nLOG.error("Unable to open file {0}", csvPath, e);\n\nif (LOG.isDebugEnabled() {\n  LOG.debug("Unable to open file " + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.\n}\n\nPreconditions.checkState(arg &gt; 0, "Arg must be positive, but got %d", a);  // String formatting only applied if needed\n\nif (!condition) {\n  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally\n}\n\nif (!condition) {\n  throw new IllegalStateException("message: " + formatMessage());\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>catch</code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of\nstandard program flow). Getters are ignored. This rule accounts for explicit test-level testing with SLF4J methods <code>isXXXEnabled</code> and\nignores the bodies of such <code>if</code> statements.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	performance	0	HTML	1576224554022	1576224554071	1	java
1207	Assignments should not be made from within sub-expressions	AssignmentInSubExpressionCheck	S1121	squid	<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant\n  //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr = cont.substring(pos1, pos2);\nif (str.isEmpty()) {\n  //...\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are ignored.</p>\n<pre>\nBufferedReader br = new BufferedReader(/* ... */);\nString line;\nwhile ((line = br.readLine()) != null) {...}\n</pre>\n<p>Chained assignments, including compound assignments, are ignored.</p>\n<pre>\nint i = j = 0;\nint k = (j += 1);\nresult = (bresult = new byte[len]);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>\n  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>\n  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/nYFtAg">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/1gCTAw">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/KQvhAg">CERT, EXP19-CPP.</a> - Do not perform assignments in conditional expressions\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/KYIyAQ">CERT, MSC02-CPP.</a> - Avoid errors of omission </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,misra,suspicious	0	HTML	1576224554116	1576224554161	1	java
1051	TestCases should contain tests	S2187	\N	squid	<p>There's no point in having a JUnit <code>TestCase</code> without any test methods. Similarly, you shouldn't have a file in the tests directory with\n"Test" in the name, but no tests in the file. Doing either of these things may lead someone to think that uncovered classes have been tested.</p>\n<p>This rule raises an issue when files in the test directory have "Test" in the name or implement <code>TestCase</code> but don't contain any\ntests.</p>	4	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	confusing,tests,unused	0	HTML	1576224550214	1576224550217	1	java
1052	Fields in non-serializable classes should not be "transient"	S2065	\N	squid	<p><code>transient</code> is used to mark fields in a <code>Serializable</code> class which will not be written out to file (or stream). In a class\nthat does not implement <code>Serializable</code>, this modifier is simply wasted keystrokes, and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Vegetable {  // does not implement Serializable\n  private transient Season ripe;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Vegetable {\n  private Season ripe;\n  // ...\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	serialization,unused	0	HTML	1576224550221	1576224550223	1	java
1053	JUnit assertions should not be used in "run" methods	S2186	\N	squid	<p>JUnit assertions should not be made from the <code>run</code> method of a <code>Runnable</code>, because failed assertions result in\n<code>AssertionError</code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the\ntest won't fail.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run() {\n  // ...\n  Assert.assertEquals(expected, actual);  // Noncompliant\n}\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	tests	0	HTML	1576224550226	1576224550229	1	java
1054	Credentials should not be hard-coded	S2068	\N	squid	<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to\nend up in the hands of an attacker. This is particularly true for applications that are distributed.</p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConnection conn = null;\ntry {\n  conn = DriverManager.getConnection("jdbc:mysql://localhost/test?" +\n        "user=steve&amp;password=blue"); // Noncompliant\n  String uname = "steve";\n  String password = "blue";\n  conn = DriverManager.getConnection("jdbc:mysql://localhost/test?" +\n        "user=" + uname + "&amp;password=" + password); // Noncompliant\n\n  java.net.PasswordAuthentication pa = new java.net.PasswordAuthentication("userName", "1234".toCharArray());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nConnection conn = null;\ntry {\n  String uname = getEncryptedUser();\n  String password = getEncryptedPass();\n  conn = DriverManager.getConnection("jdbc:mysql://localhost/test?" +\n        "user=" + uname + "&amp;password=" + password);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/798">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/259">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management">OWASP Top Ten 2013 Category A2</a> -\n  Broken Authentication and Session Management </li>\n  <li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD">Hard Coded Password</a> </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	30min	\N	cert,cwe,owasp-a2,sans-top25-porous	0	HTML	1576224550232	1576224550277	3	java
1055	Loops should not be infinite	S2189	\N	squid	<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;;) {  // Noncompliant; end condition omitted\n  // ...\n}\n\nint j;\nwhile (true) { // Noncompliant; end condition omitted\n  j++;\n}\n\nint k;\nboolean b = true;\nwhile (b) { // Noncompliant; b never written to in loop\n  k++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint j;\nwhile (true) { // reachable end condition added\n  j++;\n  if (j  == Integer.MIN_VALUE) {  // true at Integer.MAX_VALUE +1\n    break;\n  }\n}\n\nint k;\nboolean b = true;\nwhile (b) {\n  k++;\n  b = k &lt; Integer.MAX_VALUE;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/PYHfAw">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>\n</ul>	4	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	cert	0	HTML	1576224550323	1576224550325	2	java
1111	Locale should be used in String operations	S1449	\N	squid	<p>Failure to specify a locale when calling the methods <code>toLowerCase()</code>, <code>toUpperCase()</code> or <code>format()</code> on\n<code>String</code> objects means the system default encoding will be used, possibly creating problems with international characters or number\nrepresentations. For instance with the Turkish language, when converting the small letter 'i' to upper case, the result is capital letter 'I' with a\ndot over it.</p>\n<p>Case conversion without a locale may work fine in its "home" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them. For locale-sensitive\nstrings, the correct locale should always be used, but <code>Locale.ENGLISH</code> can be used for case-insensitive ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyString.toLowerCase()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyString.toLowerCase(Locale.TR)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/EwAiAg">CERT, STR02-J.</a> - Specify an appropriate locale when comparing\n  locale-dependent data </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,unpredictable	0	HTML	1576224551770	1576224551771	1	java
1112	Members of Spring components should be injected	S3749	\N	squid	<p>Spring <code>@Controller</code>s, <code>@Service</code>s, and <code>@Repository</code>s are singletons by default, meaning only one instance of the\nclass is ever instantiated in the application. Typically such a class might have a few <code>static</code> members, such as a logger, but all\nnon-<code>static</code> members should be managed by Spring. That is, they should have one of these annotations: <code>@Resource</code>,\n<code>@Inject</code>, <code>@Autowired</code> or <code>@Value</code>.</p>\n<p>Having non-injected members in one of these classes could indicate an attempt to manage state. Because they are singletons, such an attempt is\nalmost guaranteed to eventually expose data from User1's session to User2. </p>\n<p>This rule raises an issue when a singleton <code>@Controller</code>, <code>@Service</code>, or <code>@Repository</code> has non-<code>static</code>\nmembers that are not annotated with one of:</p>\n<ul>\n  <li> <code>org.springframework.beans.factory.annotation.Autowired</code> </li>\n  <li> <code>org.springframework.beans.factory.annotation.Value</code> </li>\n  <li> <code>javax.annotation.Inject</code> </li>\n  <li> <code>javax.annotation.Resource</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  private String name = null;\n\n  @RequestMapping("/greet", method = GET)\n  public String greet(String greetee) {\n\n    if (greetee != null) {\n      this.name = greetee;\n    }\n\n    return "Hello " + this.name;  // if greetee is null, you see the previous user's data\n  }\n}\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	spring	0	HTML	1576224551773	1576224551815	3	java
1161	An abstract class should have both abstract and concrete methods	S1694	\N	squid	<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>\n<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the\n<code>abstract</code> keyword) with a private constructor.</p>\n<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Animal {  // Noncompliant; should be an interface\n  abstract void move();\n  abstract void feed();\n}\n\npublic abstract class Color {  // Noncompliant; should be concrete with a private constructor\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  public int getRed() {\n    return red;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Animal {\n  void move();\n  void feed();\n}\n\npublic class Color {\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  private Color () {}\n\n  public int getRed() {\n    return red;\n  }\n}\n\npublic abstract class Lamp {\n\n  private boolean switchLamp=false;\n\n  public abstract void glow();\n\n  public void flipSwitch() {\n    switchLamp = !switchLamp;\n    if (switchLamp) {\n      glow();\n    }\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224552849	1576224552892	1	java
1162	Spring "@Controller" classes should not use "@Scope"	S3750	\N	squid	<p>Spring <code>@Controller</code>s, <code>@Service</code>s, and <code>@Repository</code>s have <code>singleton</code> scope by default, meaning only\none instance of the class is ever instantiated in the application. Defining any other scope for one of these class types will result in needless churn\nas new instances are created and destroyed. In a busy web application, this could cause a significant amount of needless additional load on the\nserver.</p>\n<p>This rule raises an issue when the <code>@Scope</code> annotation is applied to a <code>@Controller</code>, <code>@Service</code>, or\n<code>@Repository</code> with any value but "singleton". <code>@Scope("singleton")</code> is redundant, but ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Scope("prototype")  // Noncompliant\n@Controller\npublic class HelloWorld {\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	spring	0	HTML	1576224552938	1576224552941	2	java
1163	"NullPointerException" should not be explicitly thrown	S1695	\N	squid	<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates\nthat code is structured to avoid NPE's. </p>\n<p>Explicitly throwing <code>NullPointerException</code> forces a method's callers to explicitly catch it, rather than coding to avoid it. Further, it\nmakes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely\nthrow an NPE.</p>\n<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation\ninstead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething (String aString) throws NullPointerException {\n     throw new NullPointerException();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething (@NotNull String aString) {\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	pitfall	0	HTML	1576224552944	1576224552946	1	java
1208	The ternary operator should not be used	S1774	\N	squid	<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more\nverbose <code>if</code>/<code>else</code> structure.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(i&gt;10?"yes":"no");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (i &gt; 10) {\n  System.out.println(("yes");\n} else {\n  System.out.println("no");\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	brain-overload	0	HTML	1576224554207	1576224554209	1	java
1209	"entrySet()" should be iterated when both the key and value are needed	S2864	\N	squid	<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed,\nit's more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	performance	0	HTML	1576224554213	1576224554216	1	java
1210	Public methods should throw at most one checked exception	S1160	\N	squid	<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them\nfully part of the API of the method.</p>\n<p>But to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void delete() throws IOException, SQLException {      // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void delete() throws SomeApplicationLevelException {\n  /* ... */\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	error-handling	0	HTML	1576224554219	1576224554221	1	java
1211	"@Override" should be used on overriding and implementing methods	S1161	\N	squid	<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>\n<ul>\n  <li> It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling. </li>\n  <li> It improves the readability of the source code by making it obvious that methods are overridden. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){...}  // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed when overriding a method from the <code>Object</code> class like <code>toString()</code>, <code>hashcode()</code>, ...</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	bad-practice	0	HTML	1576224554224	1576224554225	1	java
1056	"private" methods called only by inner classes should be moved to those classes	S3398	\N	squid	<p>When a <code>private</code> method is only invoked by an inner class, there's no reason not to move it into that class. It will still have the same\naccess to the outer class' members, but the outer class will be clearer and less cluttered.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  private void increment() {  // Noncompliant\n    i++;\n  }\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n\n    private void increment() {\n      Outie.this.i++;\n    }\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	confusing	0	HTML	1576224550330	1576224550332	1	java
1057	JUnit test cases should call super methods	S2188	\N	squid	<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super</code> call is made in the overriding\nmethod. In some cases not calling the <code>super</code> method is acceptable, but not with <code>setUp</code> and <code>tearDown</code> in a JUnit 3\n<code>TestCase</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {  // Noncompliant\n      myClass = new MyClass();\n    }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      myClass = new MyClass();\n    }\n</pre>	4	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	tests	0	HTML	1576224550336	1576224550338	1	java
1058	Abstract methods should not be redundant	S3038	\N	squid	<p>There's no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the\nclass <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Reportable {\n  String getReport();\n}\n\npublic abstract class AbstractRuleReport implements Reportable{\n  public abstract String getReport();  // Noncompliant\n\n  // ...\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	confusing	0	HTML	1576224550341	1576224550344	1	java
1059	Methods should not have too many lines	S138	\N	squid	<p>A method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder\nto maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will\nnot only be easier to understand, but also probably easier to test.</p>	2	\N	READY	java	CONSTANT_ISSUE	\N	20min	\N	brain-overload	0	HTML	1576224550348	1576224550352	1	java
1060	Loops should not contain more than a single "break" or "continue" statement	S135	\N	squid	<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println("i = " + i);\n}\n</pre>	1	\N	READY	java	LINEAR	20min	\N	per extra ["break" or "continue"|"CONTINUE", "EXIT", "CHECK"] statement	brain-overload	0	HTML	1576224550358	1576224550360	1	java
1113	Source code should be indented consistently	IndentationCheck	S1120	squid	<p>Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers within a team also\nreduces the differences that are committed to source control systems, making code reviews easier. </p>\n<p>This rule raises an issue when indentation does not match the configured value. Only the first line of a badly indented section is reported.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With an indent size of 2:</p>\n<pre>\nclass Foo {\n  public int a;\n   public int b;   // Noncompliant, expected to start at column 4\n\n...\n\n  public void doSomething() {\n    if(something) {\n          doSomethingElse();  // Noncompliant, expected to start at column 6\n  }   // Noncompliant, expected to start at column 4\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n  public int a;\n  public int b;\n\n...\n\n  public void doSomething() {\n    if(something) {\n        doSomethingElse();\n    }\n  }\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	1min	\N	style	0	HTML	1576224551861	1576224551863	1	java
1114	Collection sizes and array length comparisons should make sense	S3981	\N	squid	<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or\nequal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return\n<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myList.size() &gt;= 0) { ... }\n\nif (myList.size() &lt; 0) { ... }\n\nboolean result = myArray.length &gt;= 0;\n\nif (0 &gt; myArray.length) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (!myList.isEmpty()) { ... }\n\nif (myArray.length &gt;= 42) { ... }\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224551868	1576224551870	2	java
1115	Classes should not be coupled to too many other classes (Single Responsibility Principle)	S1200	\N	squid	<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book "Principles of Object Oriented Design", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	2h	\N	brain-overload	0	HTML	1576224551872	1576224551916	1	java
1164	Public methods should not contain selector arguments	S2301	\N	squid	<p>A selector argument is a <code>boolean</code> argument that's used to determine which of two paths to take through a method. Specifying such a\nparameter may seem innocuous, particularly if it's well named. </p>\n<p>Unfortunately, the maintainers of the code calling the method won't see the parameter name, only its value. They'll be forced either to guess at\nthe meaning or to take extra time to look the method up.</p>\n<p>Instead, separate methods should be written.</p>\n<p>This rule finds methods with a <code>boolean</code> that's used to determine which path to take through the method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String tempt(String name, boolean ofAge) {\n  if (ofAge) {\n    offerLiquor(name);\n  } else {\n    offerCandy(name);\n  }\n}\n\n// ...\npublic void corrupt() {\n  tempt("Joe", false); // does this mean not to temp Joe?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void temptAdult(String name) {\n  offerLiquor(name);\n}\n\npublic void temptChild(String name) {\n    offerCandy(name);\n}\n\n// ...\npublic void corrupt() {\n  age &lt; legalAge ? temptChild("Joe") : temptAdult("Joe");\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	design	0	HTML	1576224552950	1576224552952	1	java
1165	"NullPointerException" should not be caught	S1696	\N	squid	<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can\neasily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the "is null" branch of\nthe conditional.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n  try {\n    len += str.length();\n  }\n  catch (NullPointerException e) {\n    log.info("argument was null");\n  }\n  return len;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n\n  if (str != null) {\n    len += str.length();\n  }\n  else {\n    log.info("argument was null");\n  }\n  return len;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/395.html">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer\n  Dereference </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/BIB3AQ">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors\n  </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,error-handling	0	HTML	1576224552955	1576224552957	1	java
1166	"Arrays.stream" should be used for primitive arrays	S3631	\N	squid	<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()</code> and <code>Arrays.stream(array)</code> are basically equivalent in terms of\nperformance. However, for arrays of primitives, using <code>Arrays.asList</code> will force the construction of a list of boxed types, and then use\n<em>that</em> last as a stream. On the other hand, <code>Arrays.stream</code> uses the appropriate primitive stream type (<code>IntStream</code>,\n<code>LongStream</code>, <code>DoubleStream</code>) when applicable, with much better performance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.asList("a1", "a2", "b1", "c2", "c1").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.asList("a1", "a2", "b1", "c2", "c1").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray = new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	performance	0	HTML	1576224552962	1576224552964	1	java
1212	A "for" loop update clause should move the counter in the right direction	S2251	\N	squid	<p>A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually\nreach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i--) { // Noncompliant;\n    String string = strings[i];  // ArrayIndexOutOfBoundsException when i reaches -1\n    //...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i++) {\n    String string = strings[i];\n    //...\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/zYEzAg">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>\n</ul>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert	0	HTML	1576224554227	1576224554229	2	java
1213	Parsing should be used to convert "Strings" to primitives	S2130	\N	squid	<p>Rather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method\ninstead. It will be clearer and more efficient.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myNum = "12.2";\n\nfloat f = (new Float(myNum)).floatValue();  // Noncompliant; creates &amp; discards a Float\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString myNum = "12.2";\n\nfloat f = Float.parseFloat(myNum);\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	performance	0	HTML	1576224554231	1576224554231	1	java
1214	Annotation arguments should appear in the order in which they were declared	S3340	\N	squid	<p>For optimal code readability, annotation arguments should be specified in the same order that they were declared in the annotation definition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@interface Pet {\n    String name();\n    String surname();\n}\n\n@Pet(surname ="", name="") // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@interface Pet {\n    String name();\n    String surname();\n}\n\n@Pet(name ="", surname="") // Compliant\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224554233	1576224554234	1	java
1215	Checked exceptions should not be thrown	S1162	\N	squid	<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe\nthat checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>\n<p>This rule verifies that no method throws a new checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod1() throws CheckedException {\n  ...\n  throw new CheckedException(message);   // Noncompliant\n  ...\n  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked\n}\n\npublic void myMethod2() throws CheckedException {  // Compliant; propagation allowed\n  myMethod1();\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	1h	\N	error-handling	0	HTML	1576224554236	1576224554237	1	java
1061	Deprecated elements should have both the annotation and the Javadoc tag	MissingDeprecatedCheck	S1123	squid	<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as\nIDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be\nrefactored. </p>\n<p>Further, Java 9 adds two additional arguments to the annotation:</p>\n<ul>\n  <li> <code>since</code> allows you to describe when the deprecation took place </li>\n  <li> <code>forRemoval</code>, indicates whether the deprecated element will be removed at some future date </li>\n</ul>\n<p>If your compile level is Java 9 or higher, you should be using one or both of these arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * @deprecated\n    */\n  public void foo2() {    // Noncompliant\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since="5.1")\n  public void foo2() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since="4.2", forRemoval=true)\n  public void foo3() {\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.</p>\n<pre>\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\nclass Qix  {\n\n  public void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	bad-practice,obsolete	0	HTML	1576224550362	1576224550404	1	java
1062	Lamdbas containing only one statement should not nest this statement in a block	S1602	\N	squid	<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx -&gt; {System.out.println(x+1);}\n(a, b) -&gt; { return a+b; }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; System.out.println(x+1)\n(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	java8	0	HTML	1576224550449	1576224550450	1	java
1116	Web applications should not have a "main" method	S2653	\N	squid	<p>There is no reason to have a <code>main</code> method in a web application. It may have been useful for debugging during application development,\nbut such a method should never make it into production. Having a <code>main</code> method in a web application opens a door to the application logic\nthat an attacker may never be able to reach (but watch out if one does!), but it is a sloppy practice and indicates that other problems may be\npresent.</p>\n<p>This rule raises an issue when a <code>main</code> method is found in a servlet or an EJB.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n    if (userIsAuthorized(req)) {\n      updatePrices(req);\n    }\n  }\n\n  public static void main(String[] args) { // Noncompliant\n    updatePrices(req);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/VoB8Bw">CERT, ENV06-J.</a> - Production code must not contain debugging entry points\n  </li>\n</ul>	3	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	cert,cwe,jee	0	HTML	1576224551964	1576224551965	3	java
1117	Exception should not be created without being thrown	S3984	\N	squid	<p>Creating a new <code>Throwable</code> without actually throwing it is useless and is probably due to a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x &lt; 0)\n  new IllegalArgumentException("x must be nonnegative");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x &lt; 0)\n  throw new IllegalArgumentException("x must be nonnegative");\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224551968	1576224551969	2	java
1118	"equals" method overrides should accept "Object" parameters	S1201	\N	squid	<p>"equals" as a method name should be used exclusively to override <code>Object.equals(Object)</code> to prevent any confusion.</p>\n<p>It is tempting to overload the method to take a specific class instead of <code>Object</code> as parameter, to save the class comparison check.\nHowever, this will not work as expected when that is the only override.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  public boolean equals(MyClass o) {  // Noncompliant; does not override Object.equals(Object)\n    return o != null &amp;&amp; o.foo == this.foo;\n  }\n\n  public static void main(String[] args) {\n    MyClass o1 = new MyClass();\n    Object o2 = new MyClass();\n    System.out.println(o1.equals(o2));  // Prints "false" because o2 an Object not a MyClass\n  }\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {  // Ignored; `boolean equals(Object)` also present\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    MyClass other = (MyClass)o;\n    return this.foo == other.foo;\n  }\n\n  /* ... */\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>	2	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	suspicious	0	HTML	1576224551972	1576224552017	2	java
1167	The members of an interface declaration or class should appear in a pre-defined order	S1213	\N	squid	<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order\nin the source files:</p>\n<ul>\n  <li> Class and instance variables </li>\n  <li> Constructors </li>\n  <li> Methods </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo{\n   private int field = 0;\n   public boolean isTrue() {...}\n   public Foo() {...}                         // Noncompliant, constructor defined after methods\n   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo{\n   public static final int OPEN = 4;\n   private int field = 0;\n   public Foo() {...}\n   public boolean isTrue() {...}\n}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224552968	1576224552971	1	java
1168	Short-circuit logic should be used to prevent null pointer dereferences in conditionals	S1697	\N	squid	<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely\nnull-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced\n<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (str == null &amp;&amp; str.length() == 0) {\n  System.out.println("String is empty");\n}\n\nif (str != null || str.length() &gt; 0) {\n  System.out.println("String is not empty");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (str == null || str.length() == 0) {\n  System.out.println("String is empty");\n}\n\nif (str != null &amp;&amp; str.length() &gt; 0) {\n  System.out.println("String is not empty");\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:squid:S2259} instead.</p>	2	\N	DEPRECATED	java	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224552976	1576224552979	2	java
1169	Constants should not be defined in interfaces	S1214	\N	squid	<p>According to Joshua Bloch, author of "Effective Java":</p>\n<blockquote>\n  <p>The constant interface pattern is a poor use of interfaces. </p>\n  <p>That a class uses some constants internally is an implementation detail.</p>\n  <p>Implementing a constant interface causes this implementation detail to leak into the class's exported API. It is of no consequence to the users\n  of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future\n  release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.\n  If a nonfinal class implements a constant interface,</p>\n  <p>all of its subclasses will have their namespaces polluted by the constants in the interface.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface Status {                      // Noncompliant\n   int OPEN = 1;\n   int CLOSED = 2;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Status {                    // Compliant\n  OPEN,\n  CLOSED;\n}\n</pre>\n<p>or</p>\n<pre>\npublic final class Status {             // Compliant\n   public static final int OPEN = 1;\n   public static final int CLOSED = 2;\n}\n</pre>	3	\N	READY	java	CONSTANT_ISSUE	\N	10min	\N	bad-practice	0	HTML	1576224552982	1576224553028	1	java
1216	Collection methods with O(n) performance should be used carefully	S2250	\N	squid	<p>The time complexity of method calls on collections is not always obvious. For instance, for most collections the <code>size()</code> method takes\nconstant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is O(n), i.e. directly proportional to the number of\nelements in the collection. When the collection is large, this could therefore be an expensive operation. </p>\n<p>This rule raises an issue when the following O(n) methods are called outside of constructors on class fields:</p>\n<ul>\n  <li> <code>ArrayList</code>\n    <ul>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n  <li> <code>LinkedList</code>\n    <ul>\n      <li> <code>get</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>ConcurrentLinkedQueue</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>ConcurrentLinkedDeque</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>CopyOnWriteArrayList</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n  <li> <code>CopyOnWriteArraySet</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();\n//...\nlog.info("Queue contains " + queue.size() + " elements");  // Noncompliant\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	15min	\N	performance	0	HTML	1576224554238	1576224554280	1	java
1217	Literal suffixes should be upper case	S818	\N	squid	<p>Using upper case literal suffixes removes the potential ambiguity between "1" (digit 1) and "l" (letter el) for declaring literals.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlong long1 = 1l; // Noncompliant\nfloat float1 = 1.0f; // Noncompliant\ndouble double1 = 1.0d; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlong long1 = 1L;\nfloat float1 = 1.0F;\ndouble double1 = 1.0D;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case </li>\n  <li> MISRA C:2012, 7.3 - The lowercase character "l" shall not be used in a literal suffix </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/koAtAQ">CERT DCL16-C</a> - Use "L," not "l," to indicate a long value </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/n4AtAQ">CERT DCL16-CPP</a> - Use "L," not "l," to indicate a long value </li>\n</ul>	1	\N	READY	java	CONSTANT_ISSUE	\N	2min	\N	cert,convention,misra,pitfall	0	HTML	1576224554324	1576224554325	1	java
1218	An open curly brace should be located at the end of a line	LeftCurlyBraceEndLineCheck	S1105	squid	<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>	1	\N	READY	java	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224554328	1576224554330	1	java
1483	Lines should have sufficient coverage by tests	InsufficientLineCoverage	\N	common-xml	An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.	2	\N	READY	xml	LINEAR	2min	\N	number of lines under the coverage threshold	bad-practice	0	HTML	1576224561030	1576224561031	1	\N
1484	Source files should have a sufficient density of comment lines	InsufficientCommentDensity	\N	common-xml	An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.	2	\N	READY	xml	LINEAR	2min	\N	number of lines required to meet minimum density	convention	0	HTML	1576224561032	1576224561033	1	\N
1485	Source files should not have any duplicated blocks	DuplicatedBlocks	\N	common-xml	An issue is created on a file as soon as there is at least one block of duplicated code on this file	2	\N	READY	xml	LINEAR_OFFSET	10min	10min	number of duplicate blocks	pitfall	0	HTML	1576224561035	1576224561035	1	\N
1486	Skipped unit tests should be either removed or fixed	SkippedUnitTests	\N	common-xml	Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.	2	\N	READY	xml	LINEAR	10min	\N	number of skipped tests	pitfall	0	HTML	1576224561036	1576224561037	1	\N
1487	Failed unit tests should be fixed	FailedUnitTests	\N	common-xml	Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.	2	\N	READY	xml	LINEAR	10min	\N	number of failed tests	\N	0	HTML	1576224561037	1576224561038	2	\N
1488	Branches should have sufficient coverage by tests	InsufficientBranchCoverage	\N	common-php	An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.	2	\N	READY	php	LINEAR	5min	\N	number of uncovered conditions	bad-practice	0	HTML	1576224561040	1576224561083	1	\N
1489	Lines should have sufficient coverage by tests	InsufficientLineCoverage	\N	common-php	An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.	2	\N	READY	php	LINEAR	2min	\N	number of lines under the coverage threshold	bad-practice	0	HTML	1576224561087	1576224561087	1	\N
1490	Source files should have a sufficient density of comment lines	InsufficientCommentDensity	\N	common-php	An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.	2	\N	READY	php	LINEAR	2min	\N	number of lines required to meet minimum density	convention	0	HTML	1576224561089	1576224561089	1	\N
1491	Source files should not have any duplicated blocks	DuplicatedBlocks	\N	common-php	An issue is created on a file as soon as there is at least one block of duplicated code on this file	2	\N	READY	php	LINEAR_OFFSET	10min	10min	number of duplicate blocks	pitfall	0	HTML	1576224561091	1576224561091	1	\N
1492	Skipped unit tests should be either removed or fixed	SkippedUnitTests	\N	common-php	Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.	2	\N	READY	php	LINEAR	10min	\N	number of skipped tests	pitfall	0	HTML	1576224561092	1576224561092	1	\N
1493	Failed unit tests should be fixed	FailedUnitTests	\N	common-php	Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.	2	\N	READY	php	LINEAR	10min	\N	number of failed tests	\N	0	HTML	1576224561093	1576224561094	2	\N
1425	Interfaces should not be empty	S4023	\N	typescript	<p>An empty interface is equivalent to an empty object ('{}'). Normally you cannot directly assign an object literal to a type when the object literal\ncontains more properties than are specified in the type. But in the case of an empty interface, this check is not done, and such assignments will be\nsuccessful. The result is highly likely to confuse maintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface MyFace {}  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ninterface MyFace {\n  foo: number;\n}\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224560070	1576224560100	1	typescript
1426	Multiline blocks should be enclosed in curly braces	S2681	\N	typescript	<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nif (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nif (condition) firstActionInBlock();  // Noncompliant\n  secondAction();  // Executed unconditionally\n\nif (condition); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nlet str: string|null = null;\nfor (let i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nstr: string|null = null;\nfor (let i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>	2	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	cert,cwe	0	HTML	1576224560101	1576224560143	1	typescript
1427	Functions should not have identical implementations	S4144	\N	typescript	<p>When two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but\nmay be confusing to maintainers. In the latter case, the code should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private readonly CODE = "bounteous";\n\n  public calculateCode(): string {\n    doTheThing();\n    doOtherThing();\n    return this.CODE;\n  }\n\n  public getName(): string {  // Noncompliant\n    doTheThing();\n    doOtherThing();\n    return this.CODE;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private readonly CODE = "bounteous";\n\n  public calculateCode(): string {\n    doTheThing();\n    doOtherThing();\n    return this.CODE;\n  }\n\n  public getName(): string {\n    return this.calculateCode();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Functions with fewer than 3 lines are ignored.</p>	2	\N	READY	ts	CONSTANT_ISSUE	\N	15min	\N	confusing,duplicate,suspicious	0	HTML	1576224560188	1576224560232	1	typescript
1428	Strings should not be thrown	S3696	\N	typescript	<p>It is a bad practice to <code>throw</code> something that's not derived at some level from <code>Error</code>. If you can't find an existing\n<code>Error</code> type that suitably conveys what you need to convey, then you should extend <code>Error</code> to create one.</p>\n<p>Specifically, part of the point of throwing <code>Error</code>s is to communicate about the conditions of the error, but strings have far less\nability to communicate meaningfully than <code>Error</code>s because they don't include stacktraces.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nthrow "Invalid negative index.";        // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nthrow new Error("Invalid negative index.");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 15-1-2 - NULL shall not be thrown explicitly. </li>\n</ul>	2	\N	READY	ts	CONSTANT_ISSUE	\N	20min	\N	api-design,error-handling,misra	0	HTML	1576224560277	1576224560279	1	typescript
1429	Values should not be uselessly incremented	S2123	\N	typescript	<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet i = 0;\ni = i++; // Noncompliant; i is still zero\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet i = 0;\ni++;\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	unused	0	HTML	1576224560281	1576224560283	2	typescript
1430	Object literal shorthand syntax should be used	S3498	\N	typescript	<p>When an already-defined variable is given the same name within a new object, object-shorthand syntax is preferred as being more compact. Similarly,\nobject-shorthand is also preferred for the definition of functions in object literals.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet a = 1;\n\nlet myObj = {\n  a : a,  // Noncompliant\n  fun: function () {  // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet a = 1;\n\nlet myObj = {\n  a,\n  fun () {\n    //...\n  }\n}\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	1min	\N	convention,es2015	0	HTML	1576224560285	1576224560286	1	typescript
1431	Two branches in a conditional structure should not have exactly the same implementation	S1871	\N	typescript	<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<p>or </p>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doFirstThing();\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>	2	\N	READY	ts	CONSTANT_ISSUE	\N	10min	\N	design,suspicious	0	HTML	1576224560289	1576224560336	1	typescript
1432	"import" should be used to include external code	S3533	\N	typescript	<p>TypeScript provides the <code>import</code> and <code>export</code> keywords as language-standard mechanisms for module management. Javascript's\n<code>require()</code> usages should be converted to the new syntax.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// circle.js\nmodule.exports = function (r) {\n  return PI * r * r;\n};\n\n// foo.js\nconst circle = require('./circle.js');  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// circle.ts\nexport default function (r) {\n  return PI * r * r;\n}\n\n// foo.ts\nimport circle from "./circle.ts"\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	convention,es2015,obsolete	0	HTML	1576224560383	1576224560385	1	typescript
1433	"arguments.callee" should not be used	S2685	\N	typescript	<p>The <code>arguments.callee</code> property holds the current function. It could be useful in an anonymous function, but its usage would make quite\na few optimizations impossible so it was deprecated in the latest versions of JavaScript. In fact, EcmaScript 5 forbids its use in <code>strict</code>\nmode, according to the docs:</p>\n<blockquote>\n  Arguments objects for strict mode functions define non-configurable accessor properties named "caller" and "callee" which throw a TypeError\n  exception on access.\n</blockquote>\n<p>This rule raises an issue when <code>arguments.callee</code> is used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n[1, 2, 3, 4, 5].map(function(n) {\n  if (n === 0) {\n    return 1;\n  } else {\n    return arguments.callee(n - 1) * n;\n  }\n});\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	30min	\N	obsolete	0	HTML	1576224560388	1576224560390	1	typescript
1434	Primitive types should be omitted from initialized or defaulted declarations	S3257	\N	typescript	<p>Unnecessarily verbose declarations and initializations make it harder to read the code, and should be simplified. Specifically, primitive\n(<code>number</code>, <code>string</code>, and <code>boolean</code>) types should be omitted from variable and parameter declaration when they can be\neasily inferred from the initialized or defaulted value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst n: number = 1; // Noncompliant, "number" can be omitted\n\nfunction foo(s: string = "") {} // Noncompliant, "string" can be omitted\n\nclass Bar {\n  b: boolean = true;  // Noncompliant, "boolean" can be omitted\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst n = 1;\n\nfunction foo(s = "") {}\n\nclass Bar {\n  b = true;\n}\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	1min	\N	clumsy,finding	0	HTML	1576224560393	1576224560395	1	typescript
1435	Return values from functions without side effects should not be ignored	S2201	\N	typescript	<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected. </p>\n<p>To prevent generating any false-positives, this rule triggers an issues only on a predefined list of known objects &amp; functions. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n'hello'.lastIndexOf('e'); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet char = 'hello'.lastIndexOf('e');\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/eoAyAQ">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/9gEqAQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>	2	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	cert,misra	0	HTML	1576224560398	1576224560400	2	typescript
1436	Conditionals should start on new lines	S3972	\N	typescript	<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its\nresulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>} </code> from a preceding\n<code>else</code> or <code>else if</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers\nfail to understand that the two statements are unconnected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n</pre>\n<p>Or</p>\n<pre>\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n</pre>	3	\N	READY	ts	CONSTANT_ISSUE	\N	10min	\N	suspicious	0	HTML	1576224560404	1576224560406	1	typescript
1437	Jump statements should not be used unconditionally	S1751	\N	typescript	<p>Having an unconditional <code>break</code>, <code>return</code> or <code>throw</code> in a loop renders it useless; the loop will only execute once\nand the loop structure itself is simply wasted keystrokes.</p>\n<p>Having an unconditional <code>continue</code> in a loop is itself wasted keystrokes.</p>\n<p>For these reasons, unconditional jump statements should never be used except for the final <code>return</code> in a function or method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  console.log("i is " + i);\n  break;  // loop only executes once\n}\n\nfor (i = 0; i &lt; 10; i++) {\n  console.log("i is " + i);\n  continue;  // this is meaningless; the loop would continue anyway\n}\n\nfor (i = 0; i &lt; 10; i++) {\n  console.log("i is " + i);\n  return;  // loop only executes once\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  console.log("i is " + i);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code. </li>\n  <li> MISRA C++:2008, 0-1-1 - A <em>project</em> shall not contain <em>unreachable code</em>. </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code. </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	cert,misra,unused	0	HTML	1576224560409	1576224560452	1	typescript
1438	"super()" should only be invoked once	S3854	\N	typescript	<p><code>super()</code> should only be invoked once in a constructor. Additional invocations will result in runtime errors.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Dog extends Animal {\n  constructor(name) {\n    super();\n    this.name = name;\n    super();         // Noncompliant\n    super.doSomething();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Dog extends Animal {\n  constructor(name) {\n    super();\n    this.name = name;\n    super.doSomething();\n  }\n}\n</pre>	3	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224560498	1576224560500	2	typescript
1439	"NaN" should not be used in comparisons	S2688	\N	typescript	<p><code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results,\nbut probably not the ones you want. </p>\n<p>Instead, the best way to see whether a variable is equal to <code>NaN</code> is to use <code>Number.isNaN()</code>, since ES2015, or (perhaps\ncounter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = NaN;\n\nif (a === NaN) {  // Noncompliant; always false\n  console.log("a is not a number");  // this is dead code\n}\nif (a !== NaN) { // Noncompliant; always true\n  console.log("a is not NaN"); // this statement is not necessarily true\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (Number.isNaN(a)) {\n  console.log("a is not a number");\n}\nif (!Number.isNaN(a)) {\n  console.log("a is not NaN");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/7AEqAQ">CERT, NUM07-J.</a> - Do not attempt comparisons with NaN </li>\n</ul>	2	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	cert	0	HTML	1576224560502	1576224560504	2	typescript
1440	Deprecated APIs should not be used	S1874	\N	typescript	<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nexport interface LanguageService {\n  /**\n  * @deprecated Use getEncodedSyntacticClassifications instead.\n  */\n  getSyntacticClassifications(fileName: string, span: TextSpan): ClassifiedSpan[];\n}\n\nconst syntacticClassifications = getLanguageService().getSyntacticClassifications(file, span); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/477.html">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/KgAVAg">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>\n</ul>	1	\N	READY	ts	CONSTANT_ISSUE	\N	15min	\N	cert,cwe,obsolete	0	HTML	1576224560507	1576224560509	1	typescript
1441	The output of functions that don't return anything should not be used	S3699	\N	typescript	<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its\n"result" to a variable is probably a bug because such functions return <code>undefined</code>, which is probably not what was intended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\n\na = foo();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n}\n\nfoo();\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224560512	1576224560515	2	typescript
1442	Variable names should comply with a naming convention	S117	\N	typescript	<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\nvariable names match one of the following patterns: <code>lowerCamelCase</code>, <code>PascalCamelCase</code> or <code>UPPER_CASED</code>. This rule\nalso allows leading underscore.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst foo_bar = 1;\nconst baz_ = 2;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst fooBar = 1;\nconst _baz = 2;\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224560518	1576224560520	1	typescript
1443	Files should contain an empty new line at the end	S113	\N	typescript	<p>Some tools work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224560523	1576224560524	1	typescript
1444	Functions should use "return" consistently	S3801	\N	typescript	<p>In TypeScript a function can return a value explicitly, by using a <code>return</code> statement with a value, or implicitly, at the end of the\nfunction or by a <code>return</code> with no value, resulting in the function returning <code>undefined</code>. Implicit returns of\n<code>undefined</code> not declared in the function signature, can be confusing for the maintainer.</p>\n<p>This rule ensures that <code>returns</code> are either all explicit or all implicit, or the function signatures makes the implicit\n<code>return</code> obvious.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(a) { // Noncompliant, function exits without "return"\n  if (a == 1) {\n    return true;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo(a): boolean | undefined {\n  if (a == 1) {\n    return true;\n  }\n}\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	20min	\N	api-design,confusing	0	HTML	1576224560527	1576224560528	1	typescript
1445	An open curly brace should be located at the end of a line	S1105	\N	typescript	<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n{                                                      //Noncompliant\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {                                   //Compliant\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Object literals appearing as arguments can start on their own line.</p>\n<pre>\nfunctionWithObject(\n   {                                                 //Compliant\n        g: "someValue"\n   }\n);\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224560531	1576224560532	1	typescript
1446	All branches in a conditional structure should not have exactly the same implementation	S3923	\N	typescript	<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code> clauses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nlet a = (b == 0) ? getValue() : getValue();   // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	15min	\N	\N	0	HTML	1576224560534	1576224560535	2	typescript
1447	Non-existent operators '=+', '=-' and '=!' should not be used	S2757	\N	typescript	<p>The use of operators pairs (<code>=+</code>, <code>=-</code> or <code>=\\!</code>) where the reversed, single operator was meant (<code>+=</code>,\n<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code>, <code>=-</code> and <code>=\\!</code> are used without any space between the two operators and when\nthere is at least one whitespace after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet target =-5;\nlet num = 3;\n\ntarget =- num;  // Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; // Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet target = -5;\nlet num = 3;\n\ntarget = -num;  // Compliant; intent to assign inverse value of num is clear\ntarget += num;\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	2min	\N	\N	0	HTML	1576224560536	1576224560537	2	typescript
1448	Method overloads should be grouped together	S4136	\N	typescript	<p>For clarity, all overloads of the same method should be grouped together. That lets both users and maintainers quickly understand all the current\navailable options.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface MyInterface {\n  doTheThing(): number;\n  doTheOtherThing(): string;\n  doTheThing(str: string): string;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ninterface MyInterface {\n  doTheThing(): number;\n  doTheThing(str: string): string;\n  doTheOtherThing(): string;\n}\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	convention	0	HTML	1576224560539	1576224560540	1	typescript
1449	Jump statements should not occur in "finally" blocks	S1143	\N	typescript	<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and <code>continue</code> from a <code>finally</code> block overwrites similar\nstatements from the suspended <code>try</code> and <code>catch</code> blocks.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) would force\ncontrol flow to leave a <code>finally</code> block. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n    try {\n        return 1; // We expect 1 to be returned\n    } catch(err) {\n        return 2; // Or 2 in cases of error\n    } finally {\n        return 3; // Noncompliant: 3 is returned before 1, or 2, which we did not expect\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    try {\n        return 1; // We expect 1 to be returned\n    } catch(err) {\n        return 2; // Or 2 in cases of error\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/584.html">MITRE, CWE-584</a> - Return Inside Finally Block </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/mIEbAQ">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>\n</ul>	2	\N	READY	ts	CONSTANT_ISSUE	\N	30min	\N	cert,cwe,error-handling	0	HTML	1576224560541	1576224560542	2	typescript
1450	Control structures should use curly braces	S121	\N	typescript	<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/3wHEAw">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>	3	\N	READY	ts	CONSTANT_ISSUE	\N	2min	\N	cert,misra,pitfall	0	HTML	1576224560543	1576224560587	1	typescript
1451	"delete" should not be used on arrays	S2870	\N	typescript	<p>The <code>delete</code> operator can be used to remove a property from any object. Arrays are objects, so the <code>delete</code> operator can be\nused here too, but if it is, a hole will be left in the array because the indexes/keys won't be shifted to reflect the deletion. </p>\n<p>The proper method for removing an element at a certain index would be:</p>\n<ul>\n  <li> <code>Array.prototype.splice</code> - add/remove elements from the array </li>\n  <li> <code>Array.prototype.pop</code> - add/remove elements from the end of the array </li>\n  <li> <code>Array.prototype.shift</code> - add/remove elements from the beginning of the array </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\ndelete myArray[2];  // Noncompliant. myArray =&gt; ['a', 'b', undefined, 'd']\nconsole.log(myArray[2]); // expected value was 'd' but output is undefined\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\n// removes 1 element from index 2\nremoved = myArray.splice(2, 1);  // myArray =&gt; ['a', 'b', 'd']\nconsole.log(myArray[2]); // outputs 'd'\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224560632	1576224560632	1	typescript
1452	Functions should not be too complex	S1541	\N	typescript	<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.</p>	3	\N	READY	ts	LINEAR_OFFSET	1min	10min	per complexity point above the threshold	brain-overload	0	HTML	1576224560633	1576224560634	1	typescript
1453	"for in" should not be used with iterables	S4139	\N	typescript	<p>If you have an iterable, such as an array, set, or list, your best option for looping through its values is the <code>for of</code> syntax. Use\n<code>for in</code> and you'll iterate the properties, rather than the values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst arr = [4, 3, 2, 1];\n\nfor (let value in arr) {  // Noncompliant\n  console.log(value);  // logs 0, 1, 2, 3\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst arr = [4, 3, 2, 1];\n\nfor (let value of arr) {\n  console.log(value);\n}\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224560635	1576224560635	1	typescript
1454	Type assertions should use "as"	S4137	\N	typescript	<p>Type assertion can be done in two ways: with <code>as MyType</code> or with <code>&lt;MyType&gt;</code>. But since there is an ambiguity in the\nlatter when using JSX and there is no ambiguity in the former, <code>as</code> is preferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar foo = &lt;any&gt;"foo";  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar foo = "foo" as any;\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	confusing	0	HTML	1576224560636	1576224560636	1	typescript
1455	Related "if/else if" statements and "cases" in a "switch" should not have the same condition	S1862	\N	typescript	<p>A <code>switch</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to <code>true</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>\n<p>For a <code>switch</code>, if the first case ends with a <code>break</code>, the second case will never be executed, rendering it dead code. Worse\nthere is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.</p>\n<p>On the other hand, if the first case does not end with a <code>break</code>, both cases will be executed, but future maintainers may not notice\nthat.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n\n\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  case 1:  // Noncompliant\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n\n\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	ts	CONSTANT_ISSUE	\N	10min	\N	cert,pitfall,unused	0	HTML	1576224560637	1576224560680	2	typescript
1456	"for of" should be used with Iterables	S4138	\N	typescript	<p>If you have an iterable, such as an array, set, or list, your best option for looping through its values is the <code>for of</code> syntax. Use a\ncounter, and ... well you'll get the right behavior, but your code just isn't as clean or clear.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst arr = [4, 3, 2, 1];\n\nfor (let i = 0; i &lt; arr.length; i++) {  // Noncompliant\n  console.log(arr[i]);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst arr = [4, 3, 2, 1];\n\nfor (let value of arr) {\n  console.log(value);\n}\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	clumsy	0	HTML	1576224560726	1576224560728	1	typescript
1457	Strings and non-strings should not be added	S3402	\N	typescript	<p>Use a <code>+</code> with two numbers and you'll get addition. But use it with a string and anything else, and you'll get concatenation. This could\nbe confusing, specially if it's not obvious that one of the operands is a string. It is recommended to explicitly convert the non-string component to\nmake it easier to understand to future maintainers.</p>\n<p>This rule raises an issue when <code>+</code> is used with a string and a non-string.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 5 + 8;  // okay\nvar z = "8"\nvar y = 5 + z;  // Noncompliant; yields string "58"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = 5 + 8;\nvar z = "8";\nvar y = 5 + Number(z);\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	15min	\N	confusing	0	HTML	1576224560731	1576224560734	1	typescript
1458	Nested blocks of code should not be left empty	S108	\N	typescript	<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i &lt; length; i++) {}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty. Moreover <code>catch</code> blocks are ignored.</p>	2	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	suspicious	0	HTML	1576224560737	1576224560740	1	typescript
1459	Magic numbers should not be used	S109	\N	typescript	<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething() {\n  for (let i = 0; i &lt; 4; i++) {    // Noncompliant, 4 is a magic number\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething() {\n  const numberOfCycles = 4;\n  for (let i = 0; i &lt; numberOfCycles; i++) {\n    // ...\n  }\n}\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	brain-overload	0	HTML	1576224560743	1576224560745	1	typescript
1460	Files should not have too many lines of code	S104	\N	typescript	<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>	2	\N	READY	ts	CONSTANT_ISSUE	\N	1h	\N	brain-overload	0	HTML	1576224560748	1576224560751	1	typescript
1461	Tabulation characters should not be used	S105	\N	typescript	<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>	1	\N	READY	ts	CONSTANT_ISSUE	\N	2min	\N	convention	0	HTML	1576224560758	1576224560760	1	typescript
1462	Lines should not be too long	S103	\N	typescript	<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>	2	\N	READY	ts	CONSTANT_ISSUE	\N	1min	\N	convention	0	HTML	1576224560763	1576224560765	1	typescript
1463	"Array.reverse" should not be used misleadingly	S4043	\N	typescript	<p>Many of JavaScript's <code>Array</code> methods return an altered version of the array while leaving the source array intact.\n<code>Array.reverse()</code> is not one of those. Instead, it alters the source array <em>in addition to</em> returning the altered version, which is\nlikely not what was intended. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar b = a.reverse(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar b = [...a].reverse();  // de-structure and create a new array, so reverse doesn't impact 'a'\n\na.reverse();\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224560772	1576224560774	2	typescript
1464	Non-empty statements should change control flow or have at least one side-effect	S905	\N	typescript	<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does\nnot result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na == 1; // Noncompliant; was assignment intended?\na &lt; b; // Noncompliant; have we forgotten to assign the result to a variable?\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/482">MITRE, CWE-482</a> - Comparing instead of Assigning </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.\n  </li>\n</ul>	2	\N	READY	ts	CONSTANT_ISSUE	\N	10min	\N	cert,cwe,misra,unused	0	HTML	1576224560777	1576224560780	2	typescript
1465	Console logging should not be used	S2228	\N	typescript	<p>Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you\nrun the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconsole.log(password_entered); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n  </li>\n</ul>	1	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	owasp-a6	0	HTML	1576224560784	1576224560786	3	typescript
1466	Dead stores should be removed	S1854	\N	typescript	<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction or when an object property is\nassigned a value that is not subsequently used. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious\nerror in the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1; i &lt; b; i++) {\n    x = x * a;  //Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1; i &lt; b; i++) {\n    x = x * a;\n  }\n  return x;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>true</code>, <code>false</code>, <code>""</code>, <code>[]</code> and\n<code>{}</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C.</a> - Detect and remove unused values </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/S4IyAQ">CERT, MSC13-CPP.</a> - Detect and remove unused values </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/uQCSBg">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	ts	CONSTANT_ISSUE	\N	15min	\N	cert,cwe,unused	0	HTML	1576224560789	1576224560837	1	typescript
1467	Variables should not be self-assigned	S1656	\N	typescript	<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction setName(name) {\n    name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction setName(name) {\n    this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect </li>\n</ul>	2	\N	READY	ts	CONSTANT_ISSUE	\N	3min	\N	cert	0	HTML	1576224560882	1576224560885	2	typescript
1468	Constructors should not be declared inside interfaces	S4124	\N	typescript	<p>Declare a constructor inside an <code>interface</code>, and you will get a simple method with the name "constructor". The same thing will happen if\nyou create a <code>new</code> method inside the <code>interface</code>: you'll get a simple method named "new".</p>\n<p>Instead, the intent was probably to specify that the type did not originate from a TypeScript file. In such cases, just use the <code>declare\nclass</code> syntax.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface TypeDeclaredElsewhere {\n  someMethod(): number;\n  new(b: boolean): TypeDeclaredElsewhere; // Noncompliant\n  constructor(b: boolean): void; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndeclare class TypeDeclaredElsewhere {\n  someMethod(): number;\n  constructor(b: boolean);\n}\n</pre>\n<p> </p>	2	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224560887	1576224560888	2	typescript
1469	"typeof" expressions should only be compared to valid values	S4125	\N	typescript	<p>The <code>typeof</code> operator returns a string indicating the type of its argument, and the set of returned values is limited:</p>\n<ul>\n  <li> "undefined" </li>\n  <li> "boolean" </li>\n  <li> "number" </li>\n  <li> "string" </li>\n  <li> "symbol" (since ECMAScript 2015) </li>\n  <li> "function" </li>\n  <li> "object" (for <code>null</code> and any other object) </li>\n</ul>\n<p>Compare a <code>typeof</code> expression to anything else, and the result is predefined: <code>false</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction someFunc(x: any): boolean {\n  return typeof x === "Number"; // Noncompliant, function will always return 'false'\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction someFunc(x: any): boolean {\n  return typeof x === "number";\n}\n</pre>	3	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224560890	1576224560891	2	typescript
1470	Track lack of copyright and license headers	S1451	\N	typescript	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>	4	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224560892	1576224560894	1	typescript
1471	"await" should only be used with promises	S4123	\N	typescript	<p>It is possible to use <code>await</code> on values which are not <code>Promise</code>s, but it's useless and misleading. The point of\n<code>await</code> is to pause execution until the <code>Promise</code>'s asynchronous code has run to completion. With anything other than a\n<code>Promise</code>, there's nothing to wait for. </p>\n<p>This rule raises an issue when an <code>await</code>ed value is guaranteed not to be a <code>Promise</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet x = 42;\nawait x; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet x = new Promise(resolve =&gt; resolve(42));\nawait x;\n\nlet y = p ? 42 : new Promise(resolve =&gt; resolve(42));\nawait y;\n</pre>	3	\N	READY	ts	CONSTANT_ISSUE	\N	1min	\N	confusing	0	HTML	1576224560896	1576224560897	1	typescript
1472	Destructuring patterns should not be empty	S3799	\N	typescript	<p>Destructuring is a convenient way of extracting multiple values from data stored in (possibly nested) objects and arrays. However, it is possible\nto create an empty pattern that has no effect. When empty curly braces or brackets are used to the right of a property name most of the time the\nintent was to use a default value instead.</p>\n<p>This rule raises an issue when empty destructuring pattern is used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar {a: {}, b} = myObj; // Noncompliant\nfunction foo({first: [], second}) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar {a = {}, b} = myObj;\nfunction foo({first = [], second}) {\n  // ...\n}\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	\N	0	HTML	1576224560899	1576224560900	2	typescript
1473	The "any" type should not be used	S4204	\N	typescript	<p>Variables can be declared with or without types. Variables declared without a type will be implicitly typed if the declaration includes an\ninitialization, and compiler type checking will be automatically applied to any typed variable. But if you declare a variable with the\n<code>any</code> "type" then you've explicitly told the compiler not to do any type checking, which is risky. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet a = 42;  // implicitly typed to number\nlet b: number = 42;  // explicitly typed to number\nlet c: any = 42;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet a = 42;\nlet b: number = 42;\nlet c: number = 42;\n</pre>	2	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	pitfall	0	HTML	1576224560902	1576224560903	1	typescript
1474	Wrapper objects should not be used for primitive types	S1533	\N	typescript	<p>The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. If you use a wrapper object constructor for type conversion,\njust remove the <code>new</code> keyword, and you'll get a primitive value automatically. If you use a wrapper object as a way to add properties to a\nprimitive, you should re-think the design. Such uses are considered bad practice, and should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet x = new Number("0");\nif (x) {\n  alert('hi');  // Shows 'hi'.\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet x = Number("0");\nif (x) {\n  alert('hi');\n}\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	1min	\N	pitfall	0	HTML	1576224560905	1576224560906	1	typescript
1475	Template strings should be used instead of concatenation	S3512	\N	typescript	<p>ECMAScript 2015 added the ability to use template literals instead of concatenation. Since their use is clearer and more concise, they are\npreferred.</p>\n<p>This rule raises an issue when a string is created from the result of two or more concatenations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction sayHello(name) {\n  console.log("hello " + name);  // ignored\n}\n\nfunction madLib(verb, noun) {\n  console.log("I really " + verb + " one or two " + noun);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction sayHello(name) {\n  console.log(`hello ${name}`);  // no issue raised before, but this is better\n}\n\nfunction madLib(verb, noun) {\n  console.log(`I really ${verb} one or two ${noun}`);\n}\n</pre>	1	\N	READY	ts	CONSTANT_ISSUE	\N	5min	\N	clumsy,es2015	0	HTML	1576224560907	1576224560908	1	typescript
1476	Branches should have sufficient coverage by tests	InsufficientBranchCoverage	\N	common-cs	An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.	2	\N	READY	cs	LINEAR	5min	\N	number of uncovered conditions	bad-practice	0	HTML	1576224560912	1576224560959	1	\N
1477	Lines should have sufficient coverage by tests	InsufficientLineCoverage	\N	common-cs	An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.	2	\N	READY	cs	LINEAR	2min	\N	number of lines under the coverage threshold	bad-practice	0	HTML	1576224560964	1576224560965	1	\N
1478	Source files should have a sufficient density of comment lines	InsufficientCommentDensity	\N	common-cs	An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.	2	\N	READY	cs	LINEAR	2min	\N	number of lines required to meet minimum density	convention	0	HTML	1576224560967	1576224560968	1	\N
1479	Source files should not have any duplicated blocks	DuplicatedBlocks	\N	common-cs	An issue is created on a file as soon as there is at least one block of duplicated code on this file	2	\N	READY	cs	LINEAR_OFFSET	10min	10min	number of duplicate blocks	pitfall	0	HTML	1576224560970	1576224560971	1	\N
1480	Skipped unit tests should be either removed or fixed	SkippedUnitTests	\N	common-cs	Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.	2	\N	READY	cs	LINEAR	10min	\N	number of skipped tests	pitfall	0	HTML	1576224560972	1576224560973	1	\N
1481	Failed unit tests should be fixed	FailedUnitTests	\N	common-cs	Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.	2	\N	READY	cs	LINEAR	10min	\N	number of failed tests	\N	0	HTML	1576224560973	1576224560974	2	\N
1482	Branches should have sufficient coverage by tests	InsufficientBranchCoverage	\N	common-xml	An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.	2	\N	READY	xml	LINEAR	5min	\N	number of uncovered conditions	bad-practice	0	HTML	1576224560977	1576224561024	1	\N
\.
